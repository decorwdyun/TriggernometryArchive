<?xml version="1.0" encoding="utf-8"?>
<TriggernometryExport PluginVersion="1.2.0.745">
  <ExportedFolder Id="2f8861fc-77d4-4859-9d5f-d784edfa3fe5" Name="[工具] 运行支持库 Utils.xml" Enabled="true">
    <Folders>
      <Folder Id="83bddaa3-14e0-41e9-964a-21dab502d5cf" Name="高级标点工具箱 AdvWm 旧版本 v2.x（仅兼容 即将移除）" Enabled="true">
        <Folders>
          <Folder Id="98302940-c3d2-496a-bf71-7cd6cb29e88a" Name="场地标点" Enabled="true">
            <Folders>
              <Folder Id="76ef9f94-8ac2-4b45-8fc4-80b5f837b3c1" Name="debug" Enabled="false">
                <Folders/>
                <Triggers>
                  <Trigger Enabled="false" Name="测试循环标点     B：自己-B 线性    AC：自己-C 径向" Id="36a69634-0363-4e49-9a06-5fd9482fb292" RegularExpression="^.{15}\S+ 1C:Add:(?&lt;wmid&gt;\d+):.{8}:(?&lt;pn&gt;[^:]+):(?&lt;x&gt;[^:]+):(?&lt;y&gt;[^:]+):(?&lt;z&gt;[^:]+)">
                    <Actions>
                      <Action OrderNumber="1" VariableOp="SetNumeric" VariableName="1" VariableExpression="${v:1} + 1" ActionType="Variable"/>
                      <Action OrderNumber="2" VariableOp="SetString" VariableName="AdmWm_test_A" VariableExpression="${x}:${y}:${z}" ActionType="Variable" Asynchronous="False">
                        <Condition Enabled="true" Grouping="Or">
                          <ConditionSingle Enabled="true" ExpressionL="${wmid}" ExpressionTypeL="String" ExpressionR="0" ExpressionTypeR="String" ConditionType="NumericEqual"/>
                        </Condition>
                      </Action>
                      <Action OrderNumber="3" LogMessageText="AdvWm_linearConnect:start:${_me.x}:${_me.y}:${_me.z}:end:${x}:${y}:${z}:waymarkers:ABCD1234" LogProcess="True" VariableOp="SetString" ActionType="LogMessage" Asynchronous="False">
                        <Condition Enabled="true" Grouping="Or">
                          <ConditionSingle Enabled="true" ExpressionL="${wmid}" ExpressionTypeL="String" ExpressionR="1" ExpressionTypeR="String" ConditionType="NumericEqual"/>
                        </Condition>
                      </Action>
                      <Action OrderNumber="4" LogMessageText="AdvWm_polarConnect:center:${v:AdmWm_test_A}:start:${_me.x}:${_me.y}:${_me.z}:end:${x}:${y}:${z}:waymarkers:BCD1234" LogProcess="True" VariableOp="SetString" ActionType="LogMessage" Asynchronous="False">
                        <Condition Enabled="true" Grouping="Or">
                          <ConditionSingle Enabled="true" ExpressionL="${wmid}" ExpressionTypeL="String" ExpressionR="2" ExpressionTypeR="String" ConditionType="NumericEqual"/>
                        </Condition>
                      </Action>
                      <Action OrderNumber="5" LogMessageText="${_event}" LogProcess="True" ActionType="LogMessage" Asynchronous="False">
                        <Condition Enabled="true" Grouping="Or">
                          <ConditionSingle Enabled="true" ExpressionL="${wmid} = 1 || ${wmid} = 2" ExpressionTypeL="Numeric" ExpressionR="1" ExpressionTypeR="Numeric" ConditionType="NumericEqual"/>
                        </Condition>
                      </Action>
                    </Actions>
                    <Condition Enabled="true" Grouping="Or">
                      <ConditionSingle Enabled="true" ExpressionL="${pn}" ExpressionTypeL="String" ExpressionR="${_me}" ExpressionTypeR="String" ConditionType="StringEqualNocase"/>
                    </Condition>
                  </Trigger>
                  <Trigger Enabled="false" Name="测试   A-B：线性   A-C：径向" Id="a37828c6-7a3b-4d09-9760-44f50668ea85" RegularExpression="^.{15}\S+ 1C:Add:(?&lt;wmid&gt;\d+):.{8}:(?&lt;pn&gt;[^:]+):(?&lt;x&gt;[^:]+):(?&lt;y&gt;[^:]+):(?&lt;z&gt;[^:]+)">
                    <Actions>
                      <Action OrderNumber="1" VariableOp="SetString" VariableName="AdmWm_test_start" VariableExpression="start:${x}:${y}:${z}" ActionType="Variable" Asynchronous="False">
                        <Condition Enabled="true" Grouping="Or">
                          <ConditionSingle Enabled="true" ExpressionL="${wmid}" ExpressionTypeL="String" ExpressionR="0" ExpressionTypeR="String" ConditionType="NumericEqual"/>
                        </Condition>
                      </Action>
                      <Action OrderNumber="2" LogMessageText="AdvWm:linear:${v:AdmWm_test_start}:end:${x}:${y}:${z}:waymarkers:ABCD1234" LogProcess="True" VariableOp="SetString" ActionType="LogMessage" Asynchronous="False">
                        <Condition Enabled="true" Grouping="Or">
                          <ConditionSingle Enabled="true" ExpressionL="${wmid}" ExpressionTypeL="String" ExpressionR="1" ExpressionTypeR="String" ConditionType="NumericEqual"/>
                        </Condition>
                      </Action>
                      <Action OrderNumber="3" LogMessageText="AdvWm:polar:center:${_me.x}:${_me.y}:${v:AdmWm_test_start}:end:${x}:${y}:${z}:waymarkers:ABCD1234" LogProcess="True" VariableOp="SetString" ActionType="LogMessage" Asynchronous="False">
                        <Condition Enabled="true" Grouping="Or">
                          <ConditionSingle Enabled="true" ExpressionL="${wmid}" ExpressionTypeL="String" ExpressionR="2" ExpressionTypeR="String" ConditionType="NumericEqual"/>
                        </Condition>
                      </Action>
                    </Actions>
                    <Condition Enabled="true" Grouping="Or">
                      <ConditionSingle Enabled="true" ExpressionL="${pn}" ExpressionTypeL="String" ExpressionR="${_me}" ExpressionTypeR="String" ConditionType="StringEqualNocase"/>
                    </Condition>
                  </Trigger>
                </Triggers>
              </Folder>
              <Folder Id="4a971f72-8531-40f6-9f86-96ec5ae78a0b" Name="恢复 / 清空标点" Enabled="true">
                <Folders/>
                <Triggers>
                  <Trigger Enabled="true" Name="Load 队列" Id="bb89dbbe-7a44-405f-b105-40f59074618b" RegularExpression="^AdvWm_loadQueue:(?&lt;t&gt;.+)$">
                    <Actions>
                      <Action OrderNumber="1" ActionType="Placeholder" Description="本触发器会被所有标点指令打断" DescriptionOverride="True"/>
                      <Action OrderNumber="2" NamedCallbackName="place" NamedCallbackParam="load" ActionType="NamedCallback" ExecutionDelayExpression="(${t}) * 1000"/>
                    </Actions>
                  </Trigger>
                  <Trigger Enabled="true" Name="Load" Id="3005217d-f20c-47d1-a4db-c36083b9a584" RegularExpression="^AdvWm_load$">
                    <Actions>
                      <Action OrderNumber="1" NamedCallbackName="place" NamedCallbackParam="load" ActionType="NamedCallback"/>
                    </Actions>
                  </Trigger>
                  <Trigger Enabled="true" Name="Clear" Id="aabbeef9-ec8e-494a-b6e3-60c64cf58451" RegularExpression="^AdvWm_clear$">
                    <Actions>
                      <Action OrderNumber="1" NamedCallbackName="place" NamedCallbackParam="{&#13;&#10;  &quot;A&quot;:{}, &#13;&#10;  &quot;B&quot;:{}, &#13;&#10;  &quot;C&quot;:{}, &#13;&#10;  &quot;D&quot;:{}, &#13;&#10;  &quot;One&quot;:{}, &#13;&#10;  &quot;Two&quot;:{}, &#13;&#10;  &quot;Three&quot;:{}, &#13;&#10;  &quot;Four&quot;:{}&#13;&#10;}" ActionType="NamedCallback"/>
                    </Actions>
                  </Trigger>
                  <Trigger Enabled="true" Name="Clear 队列" Id="ccc164eb-272e-4f6a-a879-6a8c6a0eafc3" RegularExpression="^AdvWm_clearQueue:(?&lt;t&gt;.+)$">
                    <Actions>
                      <Action OrderNumber="1" ActionType="Placeholder" Description="本触发器会被所有标点指令打断" DescriptionOverride="True"/>
                      <Action OrderNumber="2" NamedCallbackName="place" NamedCallbackParam="{&#13;&#10;  &quot;A&quot;:{}, &#13;&#10;  &quot;B&quot;:{}, &#13;&#10;  &quot;C&quot;:{}, &#13;&#10;  &quot;D&quot;:{}, &#13;&#10;  &quot;One&quot;:{}, &#13;&#10;  &quot;Two&quot;:{}, &#13;&#10;  &quot;Three&quot;:{}, &#13;&#10;  &quot;Four&quot;:{}&#13;&#10;}" ActionType="NamedCallback" ExecutionDelayExpression="(${t}) * 1000"/>
                    </Actions>
                  </Trigger>
                  <Trigger Enabled="true" Name="转发排队" Id="b2272be0-36a9-4875-b6e4-d106c2b35f74" RegularExpression="^AdvWm_(?&lt;type&gt;clear|load):(?&lt;t&gt;.+)$">
                    <Actions>
                      <Action OrderNumber="1" ActionType="Placeholder" Asynchronous="False" Description="用这个转发，以免同时执行一条标点和一条排队取消时，后者立刻被前者打断" DescriptionOverride="True"/>
                      <Action OrderNumber="2" LogMessageText="AdvWm_${type}Queue:${n: max(0, ${t} - 0.5) }" LogProcess="True" ActionType="LogMessage" ExecutionDelayExpression="${t} &gt; 0.5 ? 0.5 : ${t}" Asynchronous="False"/>
                    </Actions>
                  </Trigger>
                </Triggers>
              </Folder>
              <Folder Id="cd4f3430-0630-496e-b213-6e91b488e47f" Name="本地标点转为网络标点" Enabled="true">
                <Folders/>
                <Triggers>
                  <Trigger Enabled="true" Sequential="True" Name="本地标点转为网络标点" Id="af82ef69-660a-4afc-a466-40eee555e66b" RegularExpression="^AdvWm_public$">
                    <Actions>
                      <Action OrderNumber="1" NamedCallbackName="command" NamedCallbackParam="/waymark save 30" ActionType="NamedCallback"/>
                      <Action OrderNumber="2" NamedCallbackName="command" NamedCallbackParam="/waymark preset 30" ActionType="NamedCallback"/>
                      <Action OrderNumber="3" ActionType="Placeholder" Asynchronous="False" Description="如果你无论如何一定想在 30 号位置存自己的标点，把上面两个 30 换成你不用的槽位。" DescriptionOverride="True"/>
                    </Actions>
                  </Trigger>
                </Triggers>
              </Folder>
            </Folders>
            <Triggers>
              <Trigger Enabled="true" Name="径向插值标点 polarConnect" Id="942baafa-973f-4100-9943-6b85decc56df" RegularExpression="^AdvWm_polarConnect:[Cc]enter:(?&lt;xc&gt;[^:]+):(?&lt;yc&gt;[^:]+)(?::[^:]+)?:[Ss]tart:(?&lt;x0&gt;[^:]+):(?&lt;y0&gt;[^:]+):(?&lt;z0&gt;[^:]+):[Ee]nd:(?&lt;x1&gt;[^:]+):(?&lt;y1&gt;[^:]+):(?&lt;z1&gt;[^:]+):[Ww]aymarkers:(?&lt;wm&gt;[^:]+)">
                <Actions>
                  <Action OrderNumber="1" TriggerOp="CancelTrigger" TriggerId="bb89dbbe-7a44-405f-b105-40f59074618b" ActionType="Trigger" Asynchronous="False"/>
                  <Action OrderNumber="2" TriggerOp="CancelTrigger" TriggerId="ccc164eb-272e-4f6a-a879-6a8c6a0eafc3" ActionType="Trigger" Asynchronous="False"/>
                  <Action OrderNumber="3" ActionType="Placeholder" Description="初始化" DescriptionOverride="True"/>
                  <Action OrderNumber="4" VariableOp="SetNumeric" VariableName="AdvWm_len" VariableExpression="${f:length:${wm}}" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="5" DictVariableOp="Build" DictVariableTarget="AdvWm_WmMapping" DictVariableValue="=,A=A,B=B,C=C,D=D,1=One,2=Two,3=Three,4=Four" DictTargetPersist="True" ActionType="DictVariable" Asynchronous="False">
                    <Condition Enabled="true" Grouping="Or">
                      <ConditionSingle Enabled="true" ExpressionL="${pd:AdvWm_WmMapping.size}" ExpressionTypeL="String" ExpressionR="8" ExpressionTypeR="String" ConditionType="NumericNotEqual"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="6" ActionType="Placeholder" Description="极坐标转换（注：实际为不考虑高度的柱坐标系）" DescriptionOverride="True"/>
                  <Action OrderNumber="7" VariableOp="SetNumeric" VariableName="AdvWm_r0" VariableExpression="d(${xc}, ${yc}, ${x0}, ${y0})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="8" VariableOp="SetNumeric" VariableName="AdvWm_r1" VariableExpression="d(${xc}, ${yc}, ${x1}, ${y1})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="9" VariableOp="SetNumeric" VariableName="AdvWm_θ0" VariableExpression="θ(${xc}, ${yc}, ${x0}, ${y0})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="10" VariableOp="SetNumeric" VariableName="AdvWm_θ1" VariableExpression="θ(${xc}, ${yc}, ${x1}, ${y1})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="11" VariableOp="SetNumeric" VariableName="AdvWm_θ1" VariableExpression="relθ(${v:AdvWm_θ0}, ${v:AdvWm_θ1}) + ${v:AdvWm_θ0}" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="12" ActionType="Placeholder" Description="wm 拆分为列表   转换为标点名" DescriptionOverride="True"/>
                  <Action OrderNumber="13" ListVariableOp="SetAll" ListVariableName="AdvWm_polar" ListVariableExpression="${pd:AdvWm_WmMapping[${f:slice(${n:${_idx}-1}):${wm}}]}" ListVariableIndex="${v:AdvWm_len}" ActionType="ListVariable" Asynchronous="False"/>
                  <Action OrderNumber="14" ActionType="Placeholder" Description="计算所有半径和角度" DescriptionOverride="True"/>
                  <Action OrderNumber="15" ListVariableOp="SetAll" ListVariableExpressionType="Numeric" ListVariableName="AdvWm_r" ListVariableExpression="((${v:AdvWm_len} - ${_idx}) * ${v:AdvWm_r0} + (${_idx} - 1) * ${v:AdvWm_r1}) / (${v:AdvWm_len} - 1)" ListVariableIndex="${v:AdvWm_len}" ActionType="ListVariable" Asynchronous="False"/>
                  <Action OrderNumber="16" ListVariableOp="SetAll" ListVariableExpressionType="Numeric" ListVariableName="AdvWm_θ" ListVariableExpression="((${v:AdvWm_len} - ${_idx}) * ${v:AdvWm_θ0} + (${_idx} - 1) * ${v:AdvWm_θ1}) / (${v:AdvWm_len} - 1)" ListVariableIndex="${v:AdvWm_len}" ActionType="ListVariable" Asynchronous="False"/>
                  <Action OrderNumber="17" ActionType="Placeholder" Description="加权计算坐标   转换为 JSON 格式" DescriptionOverride="True"/>
                  <Action OrderNumber="18" ListVariableOp="SetAll" ListVariableName="AdvWm_polar" ListVariableExpression="&quot;${_this}&quot;: {&#13;&#10;    &quot;X&quot;: ${n: ${xc} + ${l:AdvWm_r[${_idx}]} * sin(${l:AdvWm_θ[${_idx}]})}, &#13;&#10;    &quot;Z&quot;: ${n: ${yc} + ${l:AdvWm_r[${_idx}]} * cos(${l:AdvWm_θ[${_idx}]})}, &#13;&#10;    &quot;Y&quot;: ${n: ((${v:AdvWm_len} - ${_idx}) * ${z0} + (${_idx} - 1) * ${z1}) / (${v:AdvWm_len} - 1)}, &#13;&#10;    &quot;Active&quot;: true&#13;&#10;}" ActionType="ListVariable" Asynchronous="False"/>
                  <Action OrderNumber="19" ActionType="Placeholder" Description="输出" DescriptionOverride="True"/>
                  <Action OrderNumber="20" VariableOp="SetString" VariableName="AdvWm_json" VariableExpression="{&#13;&#10;${l:AdvWm_polar.join(&quot;,⏎&quot;)}&#13;&#10;}" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="21" VariableOp="Clipboard" VariableName="AdvWm_json" Enabled="False" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="22" NamedCallbackName="place" NamedCallbackParam="${v:AdvWm_json}" VariableOp="SetString" ActionType="NamedCallback" Asynchronous="False"/>
                  <Action OrderNumber="23" VariableOp="UnsetRegexUniversal" VariableName="^AdvWm" ActionType="Variable" Asynchronous="False"/>
                </Actions>
                <Condition Enabled="true" Grouping="Or">
                  <ConditionSingle Enabled="true" ExpressionL="${wm}" ExpressionTypeL="String" ExpressionR="[A-D1-4]{2,8}" ExpressionTypeR="String" ConditionType="RegexMatch"/>
                </Condition>
              </Trigger>
              <Trigger Enabled="true" Name="绝对坐标标点 abs" Id="c69f3124-ac3f-4c85-b34d-38d6ee82c893" RegularExpression="^AdvWm_abs(?&lt;A&gt;:A:(?&lt;xa&gt;[^:]*):(?&lt;ya&gt;[^:]*):(?&lt;za&gt;[^:]*):(?&lt;aa&gt;[^:]*))?(?&lt;B&gt;:B:(?&lt;xb&gt;[^:]*):(?&lt;yb&gt;[^:]*):(?&lt;zb&gt;[^:]*):(?&lt;ab&gt;[^:]*))?(?&lt;C&gt;:C:(?&lt;xc&gt;[^:]*):(?&lt;yc&gt;[^:]*):(?&lt;zc&gt;[^:]*):(?&lt;ac&gt;[^:]*))?(?&lt;D&gt;:D:(?&lt;xd&gt;[^:]*):(?&lt;yd&gt;[^:]*):(?&lt;zd&gt;[^:]*):(?&lt;ad&gt;[^:]*))?(?&lt;One&gt;:One:(?&lt;x1&gt;[^:]*):(?&lt;y1&gt;[^:]*):(?&lt;z1&gt;[^:]*):(?&lt;a1&gt;[^:]*))?(?&lt;Two&gt;:Two:(?&lt;x2&gt;[^:]*):(?&lt;y2&gt;[^:]*):(?&lt;z2&gt;[^:]*):(?&lt;a2&gt;[^:]*))?(?&lt;Three&gt;:Three:(?&lt;x3&gt;[^:]*):(?&lt;y3&gt;[^:]*):(?&lt;z3&gt;[^:]*):(?&lt;a3&gt;[^:]*))?(?&lt;Four&gt;:Four:(?&lt;x4&gt;[^:]*):(?&lt;y4&gt;[^:]*):(?&lt;z4&gt;[^:]*):(?&lt;a4&gt;[^:]*))?$">
                <Actions>
                  <Action OrderNumber="1" TriggerOp="CancelTrigger" TriggerId="bb89dbbe-7a44-405f-b105-40f59074618b" ActionType="Trigger" Asynchronous="False"/>
                  <Action OrderNumber="2" TriggerOp="CancelTrigger" TriggerId="ccc164eb-272e-4f6a-a879-6a8c6a0eafc3" ActionType="Trigger" Asynchronous="False"/>
                  <Action OrderNumber="3" VariableOp="SetNumeric" VariableName="AdvWm_x_A" VariableExpression="(${xa})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="4" VariableOp="SetNumeric" VariableName="AdvWm_y_A" VariableExpression="(${ya})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="5" VariableOp="SetNumeric" VariableName="AdvWm_z_A" VariableExpression="(${za})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="6" VariableOp="SetNumeric" VariableName="AdvWm_a_A" VariableExpression="(${aa})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="7" VariableOp="SetNumeric" VariableName="AdvWm_x_B" VariableExpression="(${xb})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="8" VariableOp="SetNumeric" VariableName="AdvWm_y_B" VariableExpression="(${yb})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="9" VariableOp="SetNumeric" VariableName="AdvWm_z_B" VariableExpression="(${zb})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="10" VariableOp="SetNumeric" VariableName="AdvWm_a_B" VariableExpression="(${ab})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="11" VariableOp="SetNumeric" VariableName="AdvWm_x_C" VariableExpression="(${xc})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="12" VariableOp="SetNumeric" VariableName="AdvWm_y_C" VariableExpression="(${yc})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="13" VariableOp="SetNumeric" VariableName="AdvWm_z_C" VariableExpression="(${zc})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="14" VariableOp="SetNumeric" VariableName="AdvWm_a_C" VariableExpression="(${ac})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="15" VariableOp="SetNumeric" VariableName="AdvWm_x_D" VariableExpression="(${xd})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="16" VariableOp="SetNumeric" VariableName="AdvWm_y_D" VariableExpression="(${yd})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="17" VariableOp="SetNumeric" VariableName="AdvWm_z_D" VariableExpression="(${zd})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="18" VariableOp="SetNumeric" VariableName="AdvWm_a_D" VariableExpression="(${ad})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="19" VariableOp="SetNumeric" VariableName="AdvWm_x_One" VariableExpression="(${x1})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="20" VariableOp="SetNumeric" VariableName="AdvWm_y_One" VariableExpression="(${y1})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="21" VariableOp="SetNumeric" VariableName="AdvWm_z_One" VariableExpression="(${z1})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="22" VariableOp="SetNumeric" VariableName="AdvWm_a_One" VariableExpression="(${a1})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="23" VariableOp="SetNumeric" VariableName="AdvWm_x_Two" VariableExpression="(${x2})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="24" VariableOp="SetNumeric" VariableName="AdvWm_y_Two" VariableExpression="(${y2})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="25" VariableOp="SetNumeric" VariableName="AdvWm_z_Two" VariableExpression="(${z2})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="26" VariableOp="SetNumeric" VariableName="AdvWm_a_Two" VariableExpression="(${a2})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="27" VariableOp="SetNumeric" VariableName="AdvWm_x_Three" VariableExpression="(${x3})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="28" VariableOp="SetNumeric" VariableName="AdvWm_y_Three" VariableExpression="(${y3})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="29" VariableOp="SetNumeric" VariableName="AdvWm_z_Three" VariableExpression="(${z3})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="30" VariableOp="SetNumeric" VariableName="AdvWm_a_Three" VariableExpression="(${a1})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="31" VariableOp="SetNumeric" VariableName="AdvWm_x_Four" VariableExpression="(${x4})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="32" VariableOp="SetNumeric" VariableName="AdvWm_y_Four" VariableExpression="(${y4})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="33" VariableOp="SetNumeric" VariableName="AdvWm_z_Four" VariableExpression="(${z4})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="34" VariableOp="SetNumeric" VariableName="AdvWm_a_Four" VariableExpression="(${a4})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="35" ActionType="Placeholder" Description="加权计算坐标   转换为 JSON 格式" DescriptionOverride="True"/>
                  <Action OrderNumber="36" ListVariableOp="Build" ListVariableExpression=",A,B,C,D,One,Two,Three,Four" ListVariableTarget="AdvWm_abs" ActionType="ListVariable" Asynchronous="False"/>
                  <Action OrderNumber="37" ListVariableOp="Filter" ListVariableExpressionType="Numeric" ListVariableName="AdvWm_abs" ListVariableExpression="${f:length:${${_this}}} != 0" ListVariableTarget="AdvWm_abs" ActionType="ListVariable" Asynchronous="False"/>
                  <Action OrderNumber="38" ListVariableOp="SetAll" ListVariableName="AdvWm_abs" ListVariableExpression="&quot;${_this}&quot;: {&#13;&#10;    &quot;X&quot;:${var:AdvWm_x_${_this}}, &#13;&#10;    &quot;Y&quot;:${var:AdvWm_z_${_this}}, &#13;&#10;    &quot;Z&quot;:${var:AdvWm_y_${_this}}, &#13;&#10;    &quot;Active&quot;:${var:AdvWm_a_${_this}}&#13;&#10;}" ActionType="ListVariable" Asynchronous="False"/>
                  <Action OrderNumber="39" ActionType="Placeholder" Description="输出" DescriptionOverride="True"/>
                  <Action OrderNumber="40" VariableOp="SetString" VariableName="AdvWm_json" VariableExpression="{&#13;&#10;${l:AdvWm_abs.join(&quot;,⏎&quot;)}&#13;&#10;}" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="41" VariableOp="Clipboard" VariableName="AdvWm_json" Enabled="False" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="42" NamedCallbackName="place" NamedCallbackParam="${v:AdvWm_json}" VariableOp="SetString" ActionType="NamedCallback" Asynchronous="False"/>
                  <Action OrderNumber="43" VariableOp="UnsetRegexUniversal" VariableName="^AdvWm" ActionType="Variable" Asynchronous="False"/>
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Name="线性插值标点 linearConnect" Id="4ead44d2-7689-4382-bf5f-2e4f76dd18d2" RegularExpression="^AdvWm_linearConnect:[Ss]tart:(?&lt;x0&gt;[^:]+):(?&lt;y0&gt;[^:]+):(?&lt;z0&gt;[^:]+):[Ee]nd:(?&lt;x1&gt;[^:]+):(?&lt;y1&gt;[^:]+):(?&lt;z1&gt;[^:]+):[Ww]aymarkers:(?&lt;wm&gt;[^:]+)">
                <Actions>
                  <Action OrderNumber="1" TriggerOp="CancelTrigger" TriggerId="bb89dbbe-7a44-405f-b105-40f59074618b" ActionType="Trigger" Asynchronous="False"/>
                  <Action OrderNumber="2" TriggerOp="CancelTrigger" TriggerId="ccc164eb-272e-4f6a-a879-6a8c6a0eafc3" ActionType="Trigger" Asynchronous="False"/>
                  <Action OrderNumber="3" ActionType="Placeholder" Description="初始化" DescriptionOverride="True"/>
                  <Action OrderNumber="4" VariableOp="SetNumeric" VariableName="AdvWm_len" VariableExpression="${f:length:${wm}}" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="5" DictVariableOp="Build" DictVariableTarget="AdvWm_WmMapping" DictVariableValue="=,A=A,B=B,C=C,D=D,1=One,2=Two,3=Three,4=Four" DictTargetPersist="True" ActionType="DictVariable" Asynchronous="False">
                    <Condition Enabled="true" Grouping="Or">
                      <ConditionSingle Enabled="true" ExpressionL="${pd:AdvWm_WmMapping.size}" ExpressionTypeL="String" ExpressionR="8" ExpressionTypeR="String" ConditionType="NumericNotEqual"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="6" ActionType="Placeholder" Description="wm 拆分为列表   转换为标点名" DescriptionOverride="True"/>
                  <Action OrderNumber="7" ListVariableOp="SetAll" ListVariableName="AdvWm_linear" ListVariableExpression="${pd:AdvWm_WmMapping[${f:slice(${n:${_idx}-1}):${wm}}]}" ListVariableIndex="${v:AdvWm_len}" ActionType="ListVariable" Asynchronous="False"/>
                  <Action OrderNumber="8" ActionType="Placeholder" Description="加权计算坐标   转换为 JSON 格式" DescriptionOverride="True"/>
                  <Action OrderNumber="9" ListVariableOp="SetAll" ListVariableName="AdvWm_linear" ListVariableExpression="&quot;${_this}&quot;: {&#13;&#10;    &quot;X&quot;: ${n: ((${v:AdvWm_len} - ${_idx}) * ${x0} + (${_idx} - 1) * ${x1}) / (${v:AdvWm_len} - 1)}, &#13;&#10;    &quot;Z&quot;: ${n: ((${v:AdvWm_len} - ${_idx}) * ${y0} + (${_idx} - 1) * ${y1}) / (${v:AdvWm_len} - 1)}, &#13;&#10;    &quot;Y&quot;: ${n: ((${v:AdvWm_len} - ${_idx}) * ${z0} + (${_idx} - 1) * ${z1}) / (${v:AdvWm_len} - 1)}, &#13;&#10;    &quot;Active&quot;: true&#13;&#10;}" ActionType="ListVariable" Asynchronous="False"/>
                  <Action OrderNumber="10" ActionType="Placeholder" Description="输出" DescriptionOverride="True"/>
                  <Action OrderNumber="11" VariableOp="SetString" VariableName="AdvWm_json" VariableExpression="{&#13;&#10;${l:AdvWm_linear.join(&quot;,⏎&quot;)}&#13;&#10;}" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="12" VariableOp="Clipboard" VariableName="AdvWm_json" Enabled="False" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="13" NamedCallbackName="place" NamedCallbackParam="${v:AdvWm_json}" VariableOp="SetString" ActionType="NamedCallback" Asynchronous="False"/>
                  <Action OrderNumber="14" VariableOp="UnsetRegexUniversal" VariableName="^AdvWm" ActionType="Variable" Asynchronous="False"/>
                </Actions>
                <Condition Enabled="true" Grouping="Or">
                  <ConditionSingle Enabled="true" ExpressionL="${wm}" ExpressionTypeL="String" ExpressionR="[A-D1-4]{2,8}" ExpressionTypeR="String" ConditionType="RegexMatch"/>
                </Condition>
              </Trigger>
              <Trigger Enabled="true" Name="旋转矩阵标点 rotate" Id="3d0cc684-9934-4457-b1d5-8796f9536728" RegularExpression="^AdvWm_rotate(?::[Ss]cale:(?&lt;scale&gt;[^:]*))?(?::θ:(?&lt;theta&gt;[^:]*))?(?::[Cc]enter:(?&lt;x0&gt;[^:]*):(?&lt;y0&gt;[^:]*):(?&lt;z0&gt;[^:]*))?(?&lt;A&gt;:A:(?&lt;xa&gt;[^:]*):(?&lt;ya&gt;[^:]*):(?&lt;za&gt;[^:]*):(?&lt;aa&gt;[^:]*))?(?&lt;B&gt;:B:(?&lt;xb&gt;[^:]*):(?&lt;yb&gt;[^:]*):(?&lt;zb&gt;[^:]*):(?&lt;ab&gt;[^:]*))?(?&lt;C&gt;:C:(?&lt;xc&gt;[^:]*):(?&lt;yc&gt;[^:]*):(?&lt;zc&gt;[^:]*):(?&lt;ac&gt;[^:]*))?(?&lt;D&gt;:D:(?&lt;xd&gt;[^:]*):(?&lt;yd&gt;[^:]*):(?&lt;zd&gt;[^:]*):(?&lt;ad&gt;[^:]*))?(?&lt;One&gt;:One:(?&lt;x1&gt;[^:]*):(?&lt;y1&gt;[^:]*):(?&lt;z1&gt;[^:]*):(?&lt;a1&gt;[^:]*))?(?&lt;Two&gt;:Two:(?&lt;x2&gt;[^:]*):(?&lt;y2&gt;[^:]*):(?&lt;z2&gt;[^:]*):(?&lt;a2&gt;[^:]*))?(?&lt;Three&gt;:Three:(?&lt;x3&gt;[^:]*):(?&lt;y3&gt;[^:]*):(?&lt;z3&gt;[^:]*):(?&lt;a3&gt;[^:]*))?(?&lt;Four&gt;:Four:(?&lt;x4&gt;[^:]*):(?&lt;y4&gt;[^:]*):(?&lt;z4&gt;[^:]*):(?&lt;a4&gt;[^:]*))?$">
                <Actions>
                  <Action OrderNumber="1" TriggerOp="CancelTrigger" TriggerId="bb89dbbe-7a44-405f-b105-40f59074618b" ActionType="Trigger" Asynchronous="False"/>
                  <Action OrderNumber="2" TriggerOp="CancelTrigger" TriggerId="ccc164eb-272e-4f6a-a879-6a8c6a0eafc3" ActionType="Trigger" Asynchronous="False"/>
                  <Action OrderNumber="3" ActionType="Placeholder" Description="本触发器为带有旋转角度的标点函数，以 给定的各组坐标偏移 与 给定角度对应的旋转矩阵 分别相乘得到各组实际坐标，并以计算结果调用鲶鱼精邮差场地标点。" DescriptionOverride="True"/>
                  <Action OrderNumber="4" ActionType="Placeholder" DescriptionOverride="True"/>
                  <Action OrderNumber="5" ActionType="Placeholder" Description="格式：AdvWm_rotate:θ:-3.14:Center:100:100:0:A:0:-10:0:1:B:10:0:0:1:C:...:D:...:One:...:Two:...:Three:...:Four:..." DescriptionOverride="True"/>
                  <Action OrderNumber="6" ActionType="Placeholder" DescriptionOverride="True"/>
                  <Action OrderNumber="7" ActionType="Placeholder" Description="θ: 作为相对北的参照物所处的坐标的 atan2(dx, dy) 值，即从绝对正北开始逆时针一周 -pi 至 pi" DescriptionOverride="True"/>
                  <Action OrderNumber="8" ActionType="Placeholder" Description="Center：场中心坐标，作为旋转中心。需要 (x0, y0, z0) 三个数值。" DescriptionOverride="True"/>
                  <Action OrderNumber="9" ActionType="Placeholder" Description="A/B/C/D/One/Two/Three/Four: 四个值：(dx, dy, dz, isActive)。其中坐标偏移以相对中心、相对方向为正北时的参考系计算。如以参照物为正北（正上）" DescriptionOverride="True"/>
                  <Action OrderNumber="10" ActionType="Placeholder" Description="如以参照物为正北（正上）时，位于场地中心左 5 下 2 的 A 点，可以记为 “A:-5:2:0:1”" DescriptionOverride="True"/>
                  <Action OrderNumber="11" ActionType="Placeholder" DescriptionOverride="True"/>
                  <Action OrderNumber="12" ActionType="Placeholder" Description="可以缺少整组数据（如 B:xB:yB:zB:isActiveB 整组省略），但剩余组要按顺序。" DescriptionOverride="True"/>
                  <Action OrderNumber="13" ActionType="Placeholder" Description="省略的θ、Center组将使用缺省值：-pi, (100, 100, 0), 省略某个标点组则不会修改该标点（与鲶鱼精邮差相同）。" DescriptionOverride="True"/>
                  <Action OrderNumber="14" ActionType="Placeholder" DescriptionOverride="True"/>
                  <Action OrderNumber="15" ActionType="Placeholder" Description="也可以缺少单个数据，但要保留冒号，如前文“A:-5:2:0:1”可以记做“A:-5:2::1”，场地中心的 3 点可记做“Three::::1”。" DescriptionOverride="True"/>
                  <Action OrderNumber="16" ActionType="Placeholder" Description="省略的参数将使用缺省值：x0 = 100, y0 = 100, z0 = 0, θ = -pi, 标点的四个参数均为 0" DescriptionOverride="True"/>
                  <Action OrderNumber="17" ActionType="Placeholder" DescriptionOverride="True"/>
                  <Action OrderNumber="18" VariableOp="SetNumeric" VariableName="AdvWm_θ" VariableExpression="${theta} ?? -pi" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="19" VariableOp="SetNumeric" VariableName="AdvWm_x0" VariableExpression="${x0} ?? 100" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="20" VariableOp="SetNumeric" VariableName="AdvWm_y0" VariableExpression="${y0} ?? 100" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="21" VariableOp="SetNumeric" VariableName="AdvWm_z0" VariableExpression="(${z0})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="22" VariableOp="SetNumeric" VariableName="AdvWm_x_A" VariableExpression="(${xa})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="23" VariableOp="SetNumeric" VariableName="AdvWm_y_A" VariableExpression="(${ya})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="24" VariableOp="SetNumeric" VariableName="AdvWm_z_A" VariableExpression="(${za})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="25" VariableOp="SetNumeric" VariableName="AdvWm_a_A" VariableExpression="(${aa})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="26" VariableOp="SetNumeric" VariableName="AdvWm_x_B" VariableExpression="(${xb})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="27" VariableOp="SetNumeric" VariableName="AdvWm_y_B" VariableExpression="(${yb})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="28" VariableOp="SetNumeric" VariableName="AdvWm_z_B" VariableExpression="(${zb})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="29" VariableOp="SetNumeric" VariableName="AdvWm_a_B" VariableExpression="(${ab})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="30" VariableOp="SetNumeric" VariableName="AdvWm_x_C" VariableExpression="(${xc})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="31" VariableOp="SetNumeric" VariableName="AdvWm_y_C" VariableExpression="(${yc})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="32" VariableOp="SetNumeric" VariableName="AdvWm_z_C" VariableExpression="(${zc})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="33" VariableOp="SetNumeric" VariableName="AdvWm_a_C" VariableExpression="(${ac})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="34" VariableOp="SetNumeric" VariableName="AdvWm_x_D" VariableExpression="(${xd})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="35" VariableOp="SetNumeric" VariableName="AdvWm_y_D" VariableExpression="(${yd})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="36" VariableOp="SetNumeric" VariableName="AdvWm_z_D" VariableExpression="(${zd})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="37" VariableOp="SetNumeric" VariableName="AdvWm_a_D" VariableExpression="(${ad})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="38" VariableOp="SetNumeric" VariableName="AdvWm_x_One" VariableExpression="(${x1})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="39" VariableOp="SetNumeric" VariableName="AdvWm_y_One" VariableExpression="(${y1})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="40" VariableOp="SetNumeric" VariableName="AdvWm_z_One" VariableExpression="(${z1})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="41" VariableOp="SetNumeric" VariableName="AdvWm_a_One" VariableExpression="(${a1})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="42" VariableOp="SetNumeric" VariableName="AdvWm_x_Two" VariableExpression="(${x2})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="43" VariableOp="SetNumeric" VariableName="AdvWm_y_Two" VariableExpression="(${y2})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="44" VariableOp="SetNumeric" VariableName="AdvWm_z_Two" VariableExpression="(${z2})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="45" VariableOp="SetNumeric" VariableName="AdvWm_a_Two" VariableExpression="(${a2})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="46" VariableOp="SetNumeric" VariableName="AdvWm_x_Three" VariableExpression="(${x3})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="47" VariableOp="SetNumeric" VariableName="AdvWm_y_Three" VariableExpression="(${y3})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="48" VariableOp="SetNumeric" VariableName="AdvWm_z_Three" VariableExpression="(${z3})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="49" VariableOp="SetNumeric" VariableName="AdvWm_a_Three" VariableExpression="(${a3})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="50" VariableOp="SetNumeric" VariableName="AdvWm_x_Four" VariableExpression="(${x4})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="51" VariableOp="SetNumeric" VariableName="AdvWm_y_Four" VariableExpression="(${y4})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="52" VariableOp="SetNumeric" VariableName="AdvWm_z_Four" VariableExpression="(${z4})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="53" VariableOp="SetNumeric" VariableName="AdvWm_a_Four" VariableExpression="(${a4})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="54" ActionType="Placeholder" Description="加权计算坐标   转换为 JSON 格式" DescriptionOverride="True"/>
                  <Action OrderNumber="55" ListVariableOp="Build" ListVariableExpression=",A,B,C,D,One,Two,Three,Four" ListVariableTarget="AdvWm_rotate" ActionType="ListVariable" Asynchronous="False"/>
                  <Action OrderNumber="56" ListVariableOp="Filter" ListVariableExpressionType="Numeric" ListVariableName="AdvWm_rotate" ListVariableExpression="${f:length:${${_this}}} != 0" ListVariableTarget="AdvWm_rotate" ActionType="ListVariable" Asynchronous="False"/>
                  <Action OrderNumber="57" ListVariableOp="SetAll" ListVariableName="AdvWm_rotate" ListVariableExpression="&quot;${_this}&quot;: {&#13;&#10;    &quot;X&quot;:${n: ${var:AdvWm_x0} + (${scale} ?? 1) * (- ${var:AdvWm_x_${_this}}*cos(${var:AdvWm_θ}) - ${var:AdvWm_y_${_this}}*sin(${var:AdvWm_θ}))}, &#13;&#10;    &quot;Y&quot;:${n: ${var:AdvWm_z0} + (${scale} ?? 1) * ${var:AdvWm_z_${_this}}}, &#13;&#10;    &quot;Z&quot;:${n: ${var:AdvWm_y0} + (${scale} ?? 1) * (+ ${var:AdvWm_x_${_this}}*sin(${var:AdvWm_θ}) - ${var:AdvWm_y_${_this}}*cos(${var:AdvWm_θ}))}, &#13;&#10;    &quot;Active&quot;:${var:AdvWm_a_${_this}}&#13;&#10;}" ActionType="ListVariable" Asynchronous="False"/>
                  <Action OrderNumber="58" ActionType="Placeholder" Description="输出" DescriptionOverride="True"/>
                  <Action OrderNumber="59" VariableOp="SetString" VariableName="AdvWm_json" VariableExpression="{&#13;&#10;${l:AdvWm_rotate.join(&quot;,⏎&quot;)}&#13;&#10;}" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="60" VariableOp="Clipboard" VariableName="AdvWm_json" Enabled="False" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="61" NamedCallbackName="place" NamedCallbackParam="${v:AdvWm_json}" VariableOp="SetString" ActionType="NamedCallback" Asynchronous="False"/>
                  <Action OrderNumber="62" VariableOp="UnsetRegexUniversal" VariableName="^AdvWm" ActionType="Variable" Asynchronous="False"/>
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Name="极坐标标点 polarDeg / polarRad" Id="961c2c84-67ba-44b9-a252-faefc8124211" RegularExpression="^AdvWm_polar(?&lt;type&gt;Deg|Rad)(?::[Ss]cale:(?&lt;scale&gt;[^:]*))?(?::θ:(?&lt;theta&gt;[^:]*))?(?::[Cc]enter:(?&lt;x0&gt;[^:]*):(?&lt;y0&gt;[^:]*):(?&lt;z0&gt;[^:]*))?(?&lt;A&gt;:A:(?&lt;ra&gt;[^:]*):(?&lt;thetaa&gt;[^:]*):(?&lt;za&gt;[^:]*):(?&lt;aa&gt;[^:]*))?(?&lt;B&gt;:B:(?&lt;rb&gt;[^:]*):(?&lt;thetab&gt;[^:]*):(?&lt;zb&gt;[^:]*):(?&lt;ab&gt;[^:]*))?(?&lt;C&gt;:C:(?&lt;rc&gt;[^:]*):(?&lt;thetac&gt;[^:]*):(?&lt;zc&gt;[^:]*):(?&lt;ac&gt;[^:]*))?(?&lt;D&gt;:D:(?&lt;rd&gt;[^:]*):(?&lt;thetad&gt;[^:]*):(?&lt;zd&gt;[^:]*):(?&lt;ad&gt;[^:]*))?(?&lt;One&gt;:One:(?&lt;r1&gt;[^:]*):(?&lt;theta1&gt;[^:]*):(?&lt;z1&gt;[^:]*):(?&lt;a1&gt;[^:]*))?(?&lt;Two&gt;:Two:(?&lt;r2&gt;[^:]*):(?&lt;theta2&gt;[^:]*):(?&lt;z2&gt;[^:]*):(?&lt;a2&gt;[^:]*))?(?&lt;Three&gt;:Three:(?&lt;r3&gt;[^:]*):(?&lt;theta3&gt;[^:]*):(?&lt;z3&gt;[^:]*):(?&lt;a3&gt;[^:]*))?(?&lt;Four&gt;:Four:(?&lt;r4&gt;[^:]*):(?&lt;theta4&gt;[^:]*):(?&lt;z4&gt;[^:]*):(?&lt;a4&gt;[^:]*))?$">
                <Actions>
                  <Action OrderNumber="1" TriggerOp="CancelTrigger" TriggerId="bb89dbbe-7a44-405f-b105-40f59074618b" ActionType="Trigger" Asynchronous="False"/>
                  <Action OrderNumber="2" TriggerOp="CancelTrigger" TriggerId="ccc164eb-272e-4f6a-a879-6a8c6a0eafc3" ActionType="Trigger" Asynchronous="False"/>
                  <Action OrderNumber="3" VariableOp="SetNumeric" VariableName="AdvWm_dθ" VariableExpression="(${theta} ?? -pi) + pi" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="4" VariableOp="SetNumeric" VariableName="AdvWm_x0" VariableExpression="${x0} ?? 100" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="5" VariableOp="SetNumeric" VariableName="AdvWm_y0" VariableExpression="${y0} ?? 100" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="6" VariableOp="SetNumeric" VariableName="AdvWm_z0" VariableExpression="(${z0})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="7" VariableOp="SetNumeric" VariableName="AdvWm_r_A" VariableExpression="(${ra})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="8" VariableOp="SetNumeric" VariableName="AdvWm_θ_A" VariableExpression="((${type} == Deg) ? pi/180 : 1) * (${thetaa})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="9" VariableOp="SetNumeric" VariableName="AdvWm_z_A" VariableExpression="(${za})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="10" VariableOp="SetNumeric" VariableName="AdvWm_a_A" VariableExpression="(${aa})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="11" VariableOp="SetNumeric" VariableName="AdvWm_r_B" VariableExpression="(${rb})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="12" VariableOp="SetNumeric" VariableName="AdvWm_θ_B" VariableExpression="((${type} == Deg) ? pi/180 : 1) * (${thetab})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="13" VariableOp="SetNumeric" VariableName="AdvWm_z_B" VariableExpression="(${zb})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="14" VariableOp="SetNumeric" VariableName="AdvWm_a_B" VariableExpression="(${ab})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="15" VariableOp="SetNumeric" VariableName="AdvWm_r_C" VariableExpression="(${rc})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="16" VariableOp="SetNumeric" VariableName="AdvWm_θ_C" VariableExpression="((${type} == Deg) ? pi/180 : 1) * (${thetac})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="17" VariableOp="SetNumeric" VariableName="AdvWm_z_C" VariableExpression="(${zc})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="18" VariableOp="SetNumeric" VariableName="AdvWm_a_C" VariableExpression="(${ac})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="19" VariableOp="SetNumeric" VariableName="AdvWm_r_D" VariableExpression="(${rd})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="20" VariableOp="SetNumeric" VariableName="AdvWm_θ_D" VariableExpression="((${type} == Deg) ? pi/180 : 1) * (${thetad})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="21" VariableOp="SetNumeric" VariableName="AdvWm_z_D" VariableExpression="(${zd})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="22" VariableOp="SetNumeric" VariableName="AdvWm_a_D" VariableExpression="(${ad})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="23" VariableOp="SetNumeric" VariableName="AdvWm_r_One" VariableExpression="(${r1})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="24" VariableOp="SetNumeric" VariableName="AdvWm_θ_One" VariableExpression="((${type} == Deg) ? pi/180 : 1) * (${theta1})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="25" VariableOp="SetNumeric" VariableName="AdvWm_z_One" VariableExpression="(${z1})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="26" VariableOp="SetNumeric" VariableName="AdvWm_a_One" VariableExpression="(${a1})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="27" VariableOp="SetNumeric" VariableName="AdvWm_r_Two" VariableExpression="(${r2})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="28" VariableOp="SetNumeric" VariableName="AdvWm_θ_Two" VariableExpression="((${type} == Deg) ? pi/180 : 1) * (${theta2})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="29" VariableOp="SetNumeric" VariableName="AdvWm_z_Two" VariableExpression="(${z2})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="30" VariableOp="SetNumeric" VariableName="AdvWm_a_Two" VariableExpression="(${a2})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="31" VariableOp="SetNumeric" VariableName="AdvWm_r_Three" VariableExpression="(${r3})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="32" VariableOp="SetNumeric" VariableName="AdvWm_θ_Three" VariableExpression="((${type} == Deg) ? pi/180 : 1) * (${theta3})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="33" VariableOp="SetNumeric" VariableName="AdvWm_z_Three" VariableExpression="(${z3})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="34" VariableOp="SetNumeric" VariableName="AdvWm_a_Three" VariableExpression="(${a3})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="35" VariableOp="SetNumeric" VariableName="AdvWm_r_Four" VariableExpression="(${r4})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="36" VariableOp="SetNumeric" VariableName="AdvWm_θ_Four" VariableExpression="((${type} == Deg) ? pi/180 : 1) * (${theta4})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="37" VariableOp="SetNumeric" VariableName="AdvWm_z_Four" VariableExpression="(${z4})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="38" VariableOp="SetNumeric" VariableName="AdvWm_a_Four" VariableExpression="(${a4})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="39" Enabled="False" ActionType="Placeholder" Description="加权计算坐标   转换为 JSON 格式" DescriptionOverride="True"/>
                  <Action OrderNumber="40" ListVariableOp="Build" ListVariableExpression=",A,B,C,D,One,Two,Three,Four" ListVariableTarget="AdvWm_polar" ActionType="ListVariable" Asynchronous="False"/>
                  <Action OrderNumber="41" ListVariableOp="Filter" ListVariableExpressionType="Numeric" ListVariableName="AdvWm_polar" ListVariableExpression="${f:length:${${_this}}} != 0" ListVariableTarget="AdvWm_polar" ActionType="ListVariable" Asynchronous="False"/>
                  <Action OrderNumber="42" ListVariableOp="SetAll" ListVariableName="AdvWm_polar" ListVariableExpression="&quot;${_this}&quot;: {&#13;&#10;    &quot;X&quot;: ${n: ${v:AdvWm_x0} + (${scale} ?? 1) * ${v:AdvWm_r_${_this}} * sin(${v:AdvWm_θ_${_this}} + ${v:AdvWm_dθ}) }, &#13;&#10;    &quot;Y&quot;: ${n: ${v:AdvWm_z0} + (${scale} ?? 1) * ${v:AdvWm_z_${_this}} }, &#13;&#10;    &quot;Z&quot;: ${n: ${v:AdvWm_y0} + (${scale} ?? 1) * ${v:AdvWm_r_${_this}} * cos(${v:AdvWm_θ_${_this}} + ${v:AdvWm_dθ}) }, &#13;&#10;    &quot;Active&quot;: ${v:AdvWm_a_${_this}}&#13;&#10;}" ActionType="ListVariable" Asynchronous="False"/>
                  <Action OrderNumber="43" Enabled="False" ActionType="Placeholder" Description="输出" DescriptionOverride="True"/>
                  <Action OrderNumber="44" VariableOp="SetString" VariableName="AdvWm_json" VariableExpression="{&#13;&#10;${l:AdvWm_polar.join(&quot;,⏎&quot;)}&#13;&#10;}" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="45" VariableOp="Clipboard" VariableName="AdvWm_json" Enabled="False" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="46" NamedCallbackName="place" NamedCallbackParam="${v:AdvWm_json}" VariableOp="SetString" ActionType="NamedCallback" Asynchronous="False"/>
                  <Action OrderNumber="47" VariableOp="UnsetRegexUniversal" VariableName="^AdvWm" ActionType="Variable" Asynchronous="False"/>
                </Actions>
              </Trigger>
            </Triggers>
          </Folder>
          <Folder Id="84c6ac8d-5002-495b-bcb9-1a38809b79a5" Name="实体标点" Enabled="true">
            <Folders/>
            <Triggers>
              <Trigger Enabled="true" Name="清空标点（网络） networkClear" Id="8b6b9e31-e3a1-49e3-b1da-7c8a72bcbbdc" RegularExpression="^AdvHm_networkClear:(?&lt;orders&gt;[1-8]+)">
                <Actions>
                  <Action OrderNumber="1" ListVariableOp="SetAll" ListVariableName="AdvHm_clearAll" ListVariableExpression="    { &quot;c&quot;: &quot;command&quot;, &quot;p&quot;: &quot;/mk clear &lt;${f:slice(${_idx}):0${orders}}&gt;&quot; }" ListVariableIndex="${f:length:${orders}}" ActionType="ListVariable" Asynchronous="False"/>
                  <Action OrderNumber="2" VariableOp="SetString" VariableName="AdvHm_clearAll" VariableExpression="[&#13;&#10;${l:AdvHm_clearAll.join(&quot;,⏎&quot;)}&#13;&#10;]" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="3" NamedCallbackName="queue" NamedCallbackParam="${v:AdvHm_clearAll}" ActionType="NamedCallback" Asynchronous="False"/>
                  <Action OrderNumber="4" VariableName="AdvHm_clearAll" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="5" ListVariableName="AdvHm_clearAll" ActionType="ListVariable" Asynchronous="False"/>
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Name="清空标点（本地） localClear" Id="ed5c3a46-0047-46ee-8a6b-0b96b7c906e8" RegularExpression="^AdvHm_localClear:(?!all$)(?&lt;listname&gt;[^:]+)">
                <Actions>
                  <Action OrderNumber="1" ListVariableOp="SetAll" ListVariableName="AdvHm_clearAll" ListVariableExpression="    {&#13;&#10;        &quot;c&quot;: &quot;mark&quot;,&#13;&#10;        &quot;p&quot;: &quot;{\&quot;Name\&quot;: \&quot;${l:${listname}[${_idx}]}\&quot;, \&quot;MarkType\&quot;: \&quot;0\&quot;, \&quot;LocalOnly\&quot;: 1}&quot;&#13;&#10;    }" ListVariableIndex="${l:${listname}.size}" ActionType="ListVariable" Asynchronous="False"/>
                  <Action OrderNumber="2" VariableOp="SetString" VariableName="AdvHm_clearAll" VariableExpression="[&#13;&#10;${l:AdvHm_clearAll.join(&quot;,⏎&quot;)}&#13;&#10;]" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="3" NamedCallbackName="queue" NamedCallbackParam="${v:AdvHm_clearAll}" ActionType="NamedCallback" Asynchronous="False"/>
                  <Action OrderNumber="4" VariableName="AdvHm_clearAll" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="5" ListVariableName="AdvHm_clearAll" ActionType="ListVariable" Asynchronous="False"/>
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Sequential="True" Name="清空全部标点（本地） localClear:all" Id="d0064dc4-9e1e-409d-9803-5241aaa2d56f" RegularExpression="^AdvHm_localClear:all(?::id:(?&lt;id&gt;.+))?$">
                <Actions>
                  <Action OrderNumber="1" ActionType="Placeholder" Description="指定一个实体 ID，对其遍历执行所有标点后清除标点。ID 未提供时默认为自己。" DescriptionOverride="True"/>
                  <Action OrderNumber="2" VariableOp="SetString" VariableName="tmp_id" VariableExpression="0x${_me.id}" ActionType="Variable">
                    <Condition Enabled="true" Grouping="Or">
                      <ConditionSingle Enabled="true" ExpressionL="${id}" ExpressionTypeL="String" ExpressionR="[14]0.{6}" ExpressionTypeR="String" ConditionType="RegexNotMatch"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="3" VariableOp="SetString" VariableName="tmp_id" VariableExpression="0x${id}" ActionType="Variable">
                    <Condition Enabled="true" Grouping="Or">
                      <ConditionSingle Enabled="true" ExpressionL="${id}" ExpressionTypeL="String" ExpressionR="[14]0.{6}" ExpressionTypeR="String" ConditionType="RegexMatch"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="4" LoopInitExpression="32" LoopIncrExpression="-1" ActionType="Loop">
                    <LoopCondition Enabled="true" Grouping="Or">
                      <ConditionSingle Enabled="true" ExpressionL="${_i}" ExpressionTypeL="String" ExpressionR="0" ExpressionTypeR="String" ConditionType="NumericGreaterEqual"/>
                    </LoopCondition>
                    <LoopActions>
                      <Action OrderNumber="1" NamedCallbackName="mark" NamedCallbackParam="{&#13;&#10;    &quot;ActorID&quot;: ${v:tmp_id},&#13;&#10;    &quot;MarkType&quot;: ${_i},&#13;&#10;    &quot;LocalOnly&quot;: true&#13;&#10;}" ActionType="NamedCallback"/>
                    </LoopActions>
                  </Action>
                  <Action OrderNumber="5" VariableName="tmp_id" ActionType="Variable">
                    <Condition Enabled="true" Grouping="Or">
                      <ConditionSingle Enabled="true" ExpressionL="${id}" ExpressionTypeL="String" ExpressionR="[14]0.{6}" ExpressionTypeR="String" ConditionType="RegexMatch"/>
                    </Condition>
                  </Action>
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Name="单个实体标点 mark" Id="e55dd9f3-55cc-48ff-bc63-45c84aca5bd6" RegularExpression="^AdvHm_mark:(?&lt;entity&gt;[^:]+):(?&lt;marker&gt;[^:]+):(?&lt;isLocal&gt;[^:]+)">
                <Actions>
                  <Action OrderNumber="1" VariableOp="SetNumeric" VariableName="tmp_match" VariableExpression="1" ActionType="Variable" Asynchronous="False">
                    <Condition Enabled="true" Grouping="Or">
                      <ConditionSingle Enabled="true" ExpressionL="${entity}" ExpressionTypeL="String" ExpressionR="^[14]0[A-F0-9].{6}$" ExpressionTypeR="String" ConditionType="RegexMatch"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="2" NamedCallbackName="mark" NamedCallbackParam="{&#13;&#10;  &quot;ActorID&quot;: 0x${entity},&#13;&#10;  &quot;MarkType&quot;: &quot;${marker}&quot;,&#13;&#10;  &quot;LocalOnly&quot;: ${isLocal} &#13;&#10;}" ActionType="NamedCallback">
                    <Condition Enabled="true" Grouping="Or">
                      <ConditionSingle Enabled="true" ExpressionL="${v:tmp_match}" ExpressionTypeL="Numeric" ExpressionR="1" ExpressionTypeR="Numeric" ConditionType="NumericEqual"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="3" NamedCallbackName="mark" NamedCallbackParam="{&#13;&#10;  &quot;Name&quot;: &quot;${entity}&quot;,&#13;&#10;  &quot;MarkType&quot;: &quot;${marker}&quot;,&#13;&#10;  &quot;LocalOnly&quot;: ${isLocal} &#13;&#10;}" ActionType="NamedCallback">
                    <Condition Enabled="true" Grouping="Or">
                      <ConditionSingle Enabled="true" ExpressionL="${v:tmp_match}" ExpressionTypeL="Numeric" ExpressionR="0" ExpressionTypeR="Numeric" ConditionType="NumericEqual"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="4" NamedCallbackName="mark" NamedCallbackParam="{&#13;&#10;  ${f:ifmatch(${entity}, '&quot;ActorID&quot;: 0x${entity}', '&quot;Name&quot;: &quot;${entity}&quot;'):[14]0[0-9A-F]｛6｝},&#13;&#10;  &quot;MarkType&quot;: &quot;${marker}&quot;,&#13;&#10;  &quot;LocalOnly&quot;: ${isLocal} &#13;&#10;}" ActionType="NamedCallback"/>
                  <Action OrderNumber="5" VariableName="tmp_match" ActionType="Variable" Asynchronous="False"/>
                </Actions>
              </Trigger>
            </Triggers>
          </Folder>
        </Folders>
        <Triggers/>
      </Folder>
      <Folder Id="4f86b7e3-6b4c-4fda-94a1-feca20e5dea3" Name="调试工具" Enabled="true">
        <Folders>
          <Folder Id="a5196ef2-848b-4b66-89fd-c94061b361d4" Name="查询实体信息" Enabled="true">
            <Folders/>
            <Triggers>
              <Trigger Enabled="true" Name="查询" Id="10519962-87d6-439a-babe-ff08a827d607" RegularExpression="^EntityInfo:(.+)">
                <Actions>
                  <Action OrderNumber="1" NamedCallbackName="command" NamedCallbackParam="/e 【—————查询实体信息—————】&#13;&#10;实体：${_ffxiventity[$1].name}（${_ffxiventity[$1].id}）&#13;&#10;BNpcID = ${_ffxiventity[$1].BNpcID}  BNpcNameID = ${_ffxiventity[$1].BNpcNameID}&#13;&#10;@ (${n:round(${_entity[$1].x}, 3)}, ${n:round(${_entity[$1].y}, 3)}), ${n:round(${_entity[$1].z}, 3)}&#13;&#10;→ ${n:round(${_entity[$1].heading}, 3)} = ${n:round(${_entity[$1].heading}/pi, 3)}π (${f:pick(${n: roundir(${_entity[$1].heading}, 8)}): 上北, 左上, 左西, 左下, 下南, 右下, 右东, 右上}）&#13;&#10;水平距离：${n: distance(${_entity[$1].xy}, ${_me.xy})} m&#13;&#10;HP：${_entity[$1].currenthp} / ${_ffxiventity[$1].maxhp}&#13;&#10;》${_entity[${_entity[$1].targetid}].name}（${_entity[$1].targetid}）" ActionType="NamedCallback" Asynchronous="False"/>
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Name="/e entity （未指定目标：查询自身/选中的目标）" Id="d9f195ac-d514-48a2-ac01-3b4e000be1b2" RegularExpression="^.{15}\S+ 00:0038::(?i)en(?:tity)? ?$">
                <Actions>
                  <Action OrderNumber="1" ActionType="Placeholder" Description="选中正常目标时：查询目标信息" DescriptionOverride="True"/>
                  <Action OrderNumber="2" LogMessageText="EntityInfo:${_me.targetid}" LogProcess="True" ActionType="LogMessage">
                    <Condition Enabled="true" Grouping="Or">
                      <ConditionSingle Enabled="true" ExpressionL="${_me.targetid}" ExpressionTypeL="String" ExpressionR="^[14].{7}$" ExpressionTypeR="String" ConditionType="RegexMatch"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="3" ActionType="Placeholder" Description="选中 NPC 类目标时：报错" DescriptionOverride="True"/>
                  <Action OrderNumber="4" LogProcess="True" NamedCallbackName="command" NamedCallbackParam="/e 无法查询 NPC。（ID: ${_me.targetid}）" ActionType="NamedCallback">
                    <Condition Enabled="true" Grouping="Or">
                      <ConditionSingle Enabled="true" ExpressionL="${_me.targetid}" ExpressionTypeL="String" ExpressionR="^0.{7}$" ExpressionTypeR="String" ConditionType="RegexMatch"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="5" ActionType="Placeholder" Description="选中自身或未选中任何目标时：targetid 返回 0，查询自身信息" DescriptionOverride="True"/>
                  <Action OrderNumber="6" LogMessageText="EntityInfo:${_me.id}" LogProcess="True" ActionType="LogMessage">
                    <Condition Enabled="true" Grouping="Or">
                      <ConditionSingle Enabled="true" ExpressionL="0x0${_me.targetid}" ExpressionTypeL="Numeric" ExpressionR="0" ExpressionTypeR="String" ConditionType="NumericEqual"/>
                    </Condition>
                  </Action>
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Name="/e entity [name/id]" Id="746095fd-09b7-4415-9240-8ff501bc2c4b" RegularExpression="^.{15}\S+ 00:0038::(?i)en(?:tity)? +(.*)$">
                <Actions>
                  <Action OrderNumber="1" ActionType="Placeholder" Description="指定的名字/id存在：查询目标信息" DescriptionOverride="True"/>
                  <Action OrderNumber="2" LogMessageText="EntityInfo:$1" LogProcess="True" ActionType="LogMessage">
                    <Condition Enabled="true" Grouping="Or">
                      <ConditionSingle Enabled="true" ExpressionL="${_ffxiventity[$1].id}" ExpressionTypeL="String" ExpressionR="" ExpressionTypeR="String" ConditionType="StringNotEqualNocase"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="3" ActionType="Placeholder" Description="指定的名字/id不存在：报错" DescriptionOverride="True"/>
                  <Action OrderNumber="4" NamedCallbackName="command" NamedCallbackParam="/e 指定查询的实体 [$1] 不存在。" ActionType="NamedCallback" Asynchronous="False">
                    <Condition Enabled="true" Grouping="Or">
                      <ConditionSingle Enabled="true" ExpressionL="0x0${_ffxiventity[$1].id}" ExpressionTypeL="String" ExpressionR="0" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                    </Condition>
                  </Action>
                </Actions>
              </Trigger>
            </Triggers>
          </Folder>
        </Folders>
        <Triggers>
          <Trigger Enabled="true" Name="ACT Combat Log Filter" Id="358b88e0-09cf-44ad-9129-675e6ee4bad4" RegularExpression="^(.{15}\S+ 00:0038:: *)?(?i:filter) *$">
            <Actions>
              <Action OrderNumber="1" ActionType="Placeholder" Description="by 阿洛 MnFeN" DescBgColor="def" DescriptionOverride="True"/>
              <Action OrderNumber="2" ActionType="Placeholder" Description="使用说明" DescBgColor="acf" DescriptionOverride="True"/>
              <Action OrderNumber="3" ActionType="Placeholder" Description="1. 在 ACT 战斗记录中复制所有战斗日志；" DescBgColor="def" DescriptionOverride="True"/>
              <Action OrderNumber="4" ActionType="Placeholder" Description="2. 在游戏内输入 &quot;/e filter&quot;，或在触发器测试输入界面输入 &quot;filter&quot; (Ctrl + T)" DescBgColor="def" DescriptionOverride="True"/>
              <Action OrderNumber="5" ActionType="Placeholder" Description="3. 过滤后的日志会写入剪贴板（移除垃圾日志）。" DescBgColor="def" DescriptionOverride="True"/>
              <Action OrderNumber="6" ActionType="Placeholder" Description="Instructions" DescBgColor="acf" DescriptionOverride="True"/>
              <Action OrderNumber="7" ActionType="Placeholder" Description="1. Copy all ACT loglines from ACT combat log; " DescBgColor="def" DescriptionOverride="True"/>
              <Action OrderNumber="8" ActionType="Placeholder" Description="2. Enter &quot;/e filter&quot; in game, or enter &quot;filter&quot; in Triggernometry Test Input (Ctrl + T)" DescBgColor="def" DescriptionOverride="True"/>
              <Action OrderNumber="9" ActionType="Placeholder" Description="3. The filtered logs would be set to the clipboard. (junk data removed)" DescBgColor="def" DescriptionOverride="True"/>
              <Action OrderNumber="10" ExecScriptExpression="using System;&#13;&#10;using System.Text.RegularExpressions;&#13;&#10;using System.Windows.Forms;&#13;&#10;using System.Collections.Generic;&#13;&#10;using System.Linq;&#13;&#10;using System.Threading;&#13;&#10;using System.Globalization;&#13;&#10;using Triggernometry;&#13;&#10;&#13;&#10;public static class LogFilter&#13;&#10;{&#13;&#10;    private static readonly HashSet&lt;string&gt; junkEntities = new HashSet&lt;string&gt;&#13;&#10;    {&#13;&#10;        // 召唤&#13;&#10;        &quot;宝石兽&quot;, &quot;Carbuncle&quot;, &quot;カーバンクル&quot;,&#13;&#10;        &quot;红宝石兽&quot;, &quot;Ruby Carbuncle&quot;, &quot;カーバンクル・ルビー&quot;,&#13;&#10;        &quot;黄宝石兽&quot;, &quot;Topaz Carbuncle&quot;, &quot;カーバンクル・トパーズ&quot;,&#13;&#10;        &quot;绿宝石兽&quot;, &quot;Emerald Carbuncle&quot;, &quot;カーバンクル・エメラルド&quot;,&#13;&#10;        &quot;伊弗利特之灵&quot;, &quot;Ifrit-Egi&quot;, &quot;イフリート・エギ&quot;,   // 英语有没有 - ？&#13;&#10;        &quot;泰坦之灵&quot;, &quot;Titan-Egi&quot;, &quot;タイタン・エギ&quot;,&#13;&#10;        &quot;迦楼罗之灵&quot;, &quot;Garuda-Egi&quot;, &quot;ガルーダ・エギ&quot;,&#13;&#10;        &quot;红宝石伊弗利特&quot;, &quot;Ruby Ifrit&quot;, &quot;イフリート・ルビー&quot;,&#13;&#10;        &quot;黄宝石泰坦&quot;, &quot;Topaz Titan&quot;, &quot;タイタン・トパーズ&quot;,&#13;&#10;        &quot;绿宝石迦楼罗&quot;, &quot;Emerald Garuda&quot;, &quot;ガルーダ・エメラルド&quot;,&#13;&#10;        &quot;亚灵神巴哈姆特&quot;, &quot;Demi-Bahamut&quot;, &quot;デミ・バハムート&quot;,&#13;&#10;        &quot;亚灵神不死鸟&quot;, &quot;Demi-Phoenix&quot;, &quot;デミ・フェニックス&quot;,&#13;&#10;        &quot;光龙巴哈姆特？&quot;, &quot;Solar Bahamut&quot;, &quot;ソル・バハムート&quot;, &#13;&#10;        // 黑骑&#13;&#10;        &quot;英雄的掠影&quot;, &quot;Esteem&quot;, &quot;英雄の影身&quot;, &#13;&#10;        // 机工&#13;&#10;        &quot;车式浮空炮塔&quot;, &quot;Rook Autoturret&quot;, &quot;オートタレット・ルーク&quot;,&#13;&#10;        &quot;后式自走人偶&quot;, &quot;Automaton Queen&quot;, &quot;オートマトン・クイーン&quot;, &#13;&#10;        // 占星&#13;&#10;        &quot;地星&quot;, &quot;Earthly Star&quot;, &quot;アーサリースター&quot;, &#13;&#10;        // 学者&#13;&#10;        &quot;朝日小仙女&quot;, &quot;Eos&quot;, &quot;フェアリー・エオス&quot;,&#13;&#10;        &quot;夕月小仙女&quot;, &quot;Selene&quot;, &quot;フェアリー・セレネ&quot;,&#13;&#10;        &quot;炽天使&quot;, &quot;Seraph&quot;, &quot;セラフィム&quot;,&#13;&#10;        // 白魔&#13;&#10;        &quot;礼仪之铃&quot;, &quot;Liturgy of the Bell&quot;, &quot;リタージー・オブ・ベル&quot;,&#13;&#10;        // 忍者&#13;&#10;        &quot;分身&quot;, &quot;Bunshin&quot;, &quot;分身&quot;&#13;&#10;    };&#13;&#10;&#13;&#10;    private static readonly List&lt;Regex&gt; junkPatterns = new List&lt;Regex&gt;&#13;&#10;    {&#13;&#10;        new Regex(@&quot;^.{15}\S+ (1[4-9]|2[67]|10[578]|105:[^:]+|1[AE]:[^:]*:[^:]*:[^:]*):1.{7}:&quot;, RegexOptions.Compiled),&#13;&#10;        new Regex(@&quot;^.{15}\S+ 00:(?!0039|0044|0839)&quot;, RegexOptions.Compiled),&#13;&#10;        new Regex(@&quot;^.{15}\S+ (1[8F]|2[45]|F[BE]|10E|105:Change):&quot;, RegexOptions.Compiled),&#13;&#10;        new Regex(@&quot;^.{15}\S+ 26:.{50}.+$&quot;, RegexOptions.Compiled),&#13;&#10;    };&#13;&#10;&#13;&#10;    public static void FilterLogs()&#13;&#10;    {&#13;&#10;        string clipboardData = Clipboard.GetText();&#13;&#10;&#13;&#10;        string junkEntitiesPattern = string.Join(&quot;|&quot;, junkEntities.Select(Regex.Escape));&#13;&#10;        Regex idPattern = new Regex($@&quot;:(40.{{6}}):({junkEntitiesPattern}):&quot;);&#13;&#10;        HashSet&lt;string&gt; idsToRemove = idPattern.Matches(clipboardData).Cast&lt;Match&gt;().Select(m =&gt; $&quot;:{m.Groups[1].Value}:&quot;).ToHashSet();&#13;&#10;&#13;&#10;        string[] lines = clipboardData.Split(new[] { &quot;\r\n&quot;, &quot;\r&quot;, &quot;\n&quot; }, StringSplitOptions.RemoveEmptyEntries);&#13;&#10;        var filteredLines = lines.Where(line =&gt;&#13;&#10;            !idsToRemove.Any(id =&gt; line.Contains(id)) &amp;&amp;&#13;&#10;            !junkPatterns.Any(pattern =&gt; pattern.IsMatch(line))&#13;&#10;        ).ToArray();&#13;&#10;        var result = string.Join(&quot;\r\n&quot;, filteredLines);&#13;&#10;        if (string.IsNullOrEmpty(result))&#13;&#10;        {&#13;&#10;            Clipboard.Clear();&#13;&#10;        }&#13;&#10;        else&#13;&#10;        {&#13;&#10;            Clipboard.SetText(result);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    [STAThread]&#13;&#10;    public static void Main()&#13;&#10;    {&#13;&#10;        Thread thread = new Thread(() =&gt;&#13;&#10;        {&#13;&#10;            FilterLogs();&#13;&#10;        });&#13;&#10;        thread.SetApartmentState(ApartmentState.STA);&#13;&#10;        thread.Start();&#13;&#10;        thread.Join();&#13;&#10;        string result = CultureInfo.CurrentUICulture.TwoLetterISOLanguageName == &quot;zh&quot; ? &quot;筛选完成&quot; : &quot;Filtered&quot;;&#13;&#10;        Triggernometry.Interpreter.StaticHelpers.SetScalarVariable(false, &quot;tmp_tts&quot;, result);&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;Triggernometry.RealPlugin.plug.RegisterNamedCallback(&quot;LogFilter&quot;, new System.Action&lt;object, string&gt;((_, __) =&gt; LogFilter.Main()), &quot;MnFeN 阿洛&quot;);" ActionType="ExecuteScript" Asynchronous="False">
                <Condition Enabled="true" Grouping="Or">
                  <ConditionSingle Enabled="true" ExpressionL="${ecallback:LogFilter}" ExpressionTypeL="String" ExpressionR="0" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                </Condition>
              </Action>
              <Action OrderNumber="11" NamedCallbackName="LogFilter" ActionType="NamedCallback" Asynchronous="False"/>
              <Action OrderNumber="12" UseTTSTextExpression="${v:tmp_tts}" ActionType="UseTTS" Asynchronous="False"/>
              <Action OrderNumber="13" VariableName="tmp_tts" ActionType="Variable" Asynchronous="False"/>
            </Actions>
          </Trigger>
          <Trigger Enabled="true" Name="ACT Combat Log Anonymizer" Id="a0fc42d0-66b7-4c01-82e8-40cca1cac238" RegularExpression="^(.{15}\S+ 00:0038:: *)?(?i:anonymizer|匿名|niming|nm) *$">
            <Actions>
              <Action OrderNumber="1" ActionType="Placeholder" Description="by 阿洛 MnFeN" DescBgColor="def" DescriptionOverride="True"/>
              <Action OrderNumber="2" ActionType="Placeholder" Description="使用说明" DescBgColor="acf" DescriptionOverride="True"/>
              <Action OrderNumber="3" ActionType="Placeholder" Description="用于配合触发器的调试日志生成器" DescBgColor="def" DescriptionOverride="True"/>
              <Action OrderNumber="4" ActionType="Placeholder" Description="1. 在 ACT 战斗记录中复制所需的战斗日志片段；" DescBgColor="def" DescriptionOverride="True"/>
              <Action OrderNumber="5" ActionType="Placeholder" Description="2. 在游戏内输入 &quot;/e anonymizer/匿名&quot;，或在触发器测试输入界面输入 &quot;anonymizer&quot; / &quot;匿名&quot; (Ctrl + T)" DescBgColor="def" DescriptionOverride="True"/>
              <Action OrderNumber="6" ActionType="Placeholder" Description="3. 所有队员的 id 和名称会转为占位符 &quot;${l:party[n]}:队员n&quot;，并写入剪贴板，这会在测试日志时自动填入当前的小队成员 id。" DescBgColor="def" DescriptionOverride="True"/>
              <Action OrderNumber="7" ExecScriptExpression="using System;&#13;&#10;using System.Text.RegularExpressions;&#13;&#10;using System.Windows.Forms;&#13;&#10;using System.Collections.Generic;&#13;&#10;using System.Linq;&#13;&#10;using System.Threading;&#13;&#10;using System.Globalization;&#13;&#10;using Triggernometry;&#13;&#10;&#13;&#10;public static class LogAnonymizer&#13;&#10;{&#13;&#10;    private static Regex RegexId = new Regex(@&quot;(?&lt;=:)(?&lt;id&gt;10[0-9A-F]{6})(?=:|$)&quot;);&#13;&#10;    private static Regex RegexName = new Regex(@&quot;\G:(?&lt;name&gt;[A-Z][a-z'-]{1,14} [A-Z][a-z'-]{1,14}|[^a-z:\d][^A-Z:\d]{0,5})(?=:|$)&quot;);&#13;&#10;&#13;&#10;    public static void Anonymize()&#13;&#10;    {&#13;&#10;        string clipboardData = Clipboard.GetText();&#13;&#10;        var id2Name = new Dictionary&lt;string, string&gt;();&#13;&#10;&#13;&#10;        // 从当前复制的日志中提取所有 id，并尝试对应到后面的名字&#13;&#10;        foreach (Match match in RegexId.Matches(clipboardData))&#13;&#10;        {&#13;&#10;            if (!match.Success) continue; // 以防万一&#13;&#10;&#13;&#10;            string id = match.Groups[&quot;id&quot;].Value;&#13;&#10;            int searchStart = match.Index + match.Length;&#13;&#10;            // 正则 \G 用于确保仅从 searchStart 位置开始匹配紧随其后的名字&#13;&#10;            Match nameMatch = RegexName.Match(clipboardData, searchStart);&#13;&#10;&#13;&#10;            if (nameMatch.Success)&#13;&#10;            {&#13;&#10;                string name = nameMatch.Groups[&quot;name&quot;].Value;&#13;&#10;                if (!id2Name.TryGetValue(id, out string currentName) || currentName == &quot;&quot;)&#13;&#10;                {&#13;&#10;                    id2Name[id] = name;&#13;&#10;                }&#13;&#10;                else&#13;&#10;                {&#13;&#10;                    if (currentName != name)&#13;&#10;                    {&#13;&#10;                        MessageBox.Show($&quot;ID {id} name inconsistent: '{currentName}' vs '{name}'&quot;);&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            }&#13;&#10;            else&#13;&#10;            {&#13;&#10;                if (!id2Name.ContainsKey(id))&#13;&#10;                {&#13;&#10;                    id2Name[id] = &quot;&quot;;&#13;&#10;                }&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        // 读取当前小队列表，如果记录的所有 id 均在小队列表中，则用小队列表的顺序替换&#13;&#10;        var party = Triggernometry.Interpreter.StaticHelpers.GetListVariable(false, &quot;party&quot;)?.Values?.Select(v =&gt; v.ToString())?.ToList();&#13;&#10;        Dictionary&lt;string, int&gt; id2Idx;&#13;&#10;        if (party != null &amp;&amp; id2Name.Keys.All(id =&gt; party.Contains(id)))&#13;&#10;        {&#13;&#10;            id2Idx = id2Name.Keys.ToDictionary(id =&gt; id, id =&gt; party.IndexOf(id) + 1);&#13;&#10;        }&#13;&#10;        else&#13;&#10;        {&#13;&#10;            id2Idx = id2Name.Keys&#13;&#10;                .Select((id, idx) =&gt; (id, idx))&#13;&#10;                .ToDictionary(pair =&gt; pair.id, pair =&gt; pair.idx + 1);&#13;&#10;            &#13;&#10;            // 试图修正自己的 idx&#13;&#10;            do&#13;&#10;            {&#13;&#10;                // 获取自己在当前小队列表的序号&#13;&#10;                var myId = Triggernometry.FFXIV.Entity.MyHexID;&#13;&#10;                var myIdx = party?.IndexOf(Triggernometry.FFXIV.Entity.MyHexID) ?? -1;&#13;&#10;                myIdx++;&#13;&#10;                RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, $&quot;/e myIdx = {myIdx}&quot;);&#13;&#10;                if (myIdx &lt;= 0) break;&#13;&#10;&#13;&#10;                // 查找当前占用了自身 idx 的 id&#13;&#10;                var otherPair = id2Idx.FirstOrDefault(pair =&gt; pair.Value == myIdx);&#13;&#10;                if (!otherPair.Equals(default(KeyValuePair&lt;string, int&gt;))) // 有人占用了自身 idx&#13;&#10;                {&#13;&#10;                    if (id2Name.ContainsKey(myId)) // 日志包含自己：二人对换&#13;&#10;                    {&#13;&#10;                        id2Idx[otherPair.Key] = id2Idx[myId];&#13;&#10;                        id2Idx[myId] = myIdx;&#13;&#10;                    }&#13;&#10;                    else if (id2Idx.Count &lt;= party.Count) // 日志没包含自己，且日志不满小队人数&#13;&#10;                    {&#13;&#10;                        id2Idx[otherPair.Key] = id2Idx.Count + 1;&#13;&#10;                    }&#13;&#10;                }&#13;&#10;                else // 没有人占用了自身 idx&#13;&#10;                {&#13;&#10;                    if (id2Name.ContainsKey(myId)) // 日志包含自己&#13;&#10;                    {&#13;&#10;                        id2Idx[myId] = myIdx;&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            } while (false);&#13;&#10;        }&#13;&#10;/*&#13;&#10;        // 替换自身 id 与名字&#13;&#10;        if (Triggernometry.FFXIV.Entity.MyID != 0)&#13;&#10;        {&#13;&#10;            var id = Triggernometry.FFXIV.Entity.MyHexID;&#13;&#10;            var name = Triggernometry.FFXIV.Entity.MyName;&#13;&#10;            clipboardData = clipboardData.Replace($&quot;{id}:{name}&quot;, &quot;$&quot; + &quot;{_me.id}:自身&quot;);&#13;&#10;            clipboardData = clipboardData.Replace(id, &quot;$&quot; + &quot;{_me.id}&quot;);&#13;&#10;            if (clipboardData.Contains(name)) // 自己的 id 变动了&#13;&#10;            { &#13;&#10;                var regexMe = new Regex(@&quot;(?&lt;id&gt;10[0-9A-F]{6}):&quot; + Regex.Escape(name) + @&quot;(?=:|$)&quot;);&#13;&#10;                var myIds = regexMe.Matches(clipboardData).Cast&lt;Match&gt;().Select(m =&gt; m.Groups[&quot;id&quot;].Value).ToList();&#13;&#10;                var hashset = new HashSet&lt;string&gt;(myIds);&#13;&#10;                if (hashset.Count &gt; 1)&#13;&#10;                { &#13;&#10;                    MessageBox.Show($&quot;发现自身名字 \&quot;{name}\&quot; 对应多个 ID：\n{string.Join(&quot;\n&quot;, hashset)}&quot;);&#13;&#10;                }&#13;&#10;                id = hashset.FirstOrDefault();&#13;&#10;                if (id != null)&#13;&#10;                {&#13;&#10;                    clipboardData = clipboardData.Replace(id, &quot;$&quot; + &quot;{_me.id}&quot;); &#13;&#10;                }&#13;&#10;                clipboardData = clipboardData.Replace(name, &quot;自身&quot;);&#13;&#10;            }&#13;&#10;        }&#13;&#10;*/&#13;&#10;        // 替换小队 id 与名字&#13;&#10;        foreach (var pair in id2Idx)&#13;&#10;        {&#13;&#10;            string id = pair.Key;&#13;&#10;            int idx = pair.Value;&#13;&#10;            if (id2Name.TryGetValue(id, out string name) &amp;&amp; name != &quot;&quot;)&#13;&#10;            {&#13;&#10;                clipboardData = clipboardData.Replace($&quot;{id}:{name}&quot;, &quot;$&quot; + $&quot;{{l:party[{idx}]}}:队员&quot;);&#13;&#10;            }&#13;&#10;            clipboardData = clipboardData.Replace(id, &quot;$&quot; + $&quot;{{l:party[{idx}]}}&quot;);&#13;&#10;        }&#13;&#10;&#13;&#10;        // 输出&#13;&#10;        if (string.IsNullOrEmpty(clipboardData))&#13;&#10;        {&#13;&#10;            Clipboard.Clear();&#13;&#10;        }&#13;&#10;        else&#13;&#10;        {&#13;&#10;            Clipboard.SetText(clipboardData);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    [STAThread]&#13;&#10;    public static void Main()&#13;&#10;    {&#13;&#10;        Thread thread = new Thread(() =&gt;&#13;&#10;        {&#13;&#10;            Anonymize();&#13;&#10;        });&#13;&#10;        thread.SetApartmentState(ApartmentState.STA);&#13;&#10;        thread.Start();&#13;&#10;        thread.Join();&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;Triggernometry.RealPlugin.plug.RegisterNamedCallback(nameof(LogAnonymizer), new System.Action&lt;object, string&gt;((_, __) =&gt; LogAnonymizer.Main()), &quot;MnFeN 阿洛&quot;);" ActionType="ExecuteScript" Asynchronous="False">
                <Condition Enabled="true" Grouping="Or">
                  <ConditionSingle Enabled="true" ExpressionL="${ecallback:LogAnonymizer}" ExpressionTypeL="String" ExpressionR="0" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                </Condition>
              </Action>
              <Action OrderNumber="8" NamedCallbackName="LogAnonymizer" ActionType="NamedCallback" Asynchronous="False"/>
              <Action OrderNumber="9" UseTTSTextExpression="处理完成" ActionType="UseTTS" Asynchronous="False"/>
            </Actions>
          </Trigger>
          <Trigger Enabled="true" Name="查询表达式 /e 数学表达式 =?   /e 文本表达式 ==?" Id="69773161-db58-49d5-ab22-567d618d5d68" RegularExpression="^.{15}\S+ 00:0038::(?&lt;what&gt;.+?) *(?&lt;eq&gt;={1,2}) *[\?？] *$">
            <Actions>
              <Action OrderNumber="1" JsonEndpointExpression="http://127.0.0.1:2019/command" NamedCallbackName="command" NamedCallbackParam="/e == ${what}" ActionType="NamedCallback">
                <Condition Enabled="true" Grouping="Or">
                  <ConditionSingle Enabled="true" ExpressionL="${eq}" ExpressionTypeL="String" ExpressionR="==" ExpressionTypeR="String" ConditionType="StringEqualNocase"/>
                </Condition>
              </Action>
              <Action OrderNumber="2" JsonEndpointExpression="http://127.0.0.1:2019/command" NamedCallbackName="command" NamedCallbackParam="/e = ${n:${what}}" ActionType="NamedCallback">
                <Condition Enabled="true" Grouping="Or">
                  <ConditionSingle Enabled="true" ExpressionL="${eq}" ExpressionTypeL="String" ExpressionR="=" ExpressionTypeR="String" ConditionType="StringEqualNocase"/>
                </Condition>
              </Action>
            </Actions>
          </Trigger>
          <Trigger Enabled="true" Name="内存检索/修改" Id="aa77f167-61b1-462a-9142-96430ede9323" RegularExpression="^.{15}\S+ 00:0038::(?&lt;type&gt;byte|u?short|u?int|u?long|float|double) (?&lt;offset&gt;[^=]+?)( *= *(?&lt;val&gt;.+))?$">
            <Actions>
              <Action OrderNumber="1" ActionType="Placeholder" Asynchronous="False" Description="查询或修改自己选中的实体（或没选中时：自己）的内存中某处的值" DescriptionOverride="True"/>
              <Action OrderNumber="2" ActionType="Placeholder" Asynchronous="False" Description="查询：/e float 0xc4 （查询自己实体后 0xC4 位置的 float 值）" DescriptionOverride="True"/>
              <Action OrderNumber="3" ActionType="Placeholder" Asynchronous="False" Description="写入：/e float 0xc4 = 2 （自己实体后 0xC4 位置的 float 值写为 2）" DescriptionOverride="True"/>
              <Action OrderNumber="4" ActionType="Placeholder" Asynchronous="False" Description="多级指针 如：/e float 0x100, 0x50 意为 Read&lt;IntPtr&gt;(entityAddress + 0x100) + 0x50" DescriptionOverride="True"/>
              <Action OrderNumber="5" ExecScriptExpression="using System;&#13;&#10;using System.Linq;&#13;&#10;using Triggernometry;&#13;&#10;using Triggernometry.Utilities;&#13;&#10;&#13;&#10;static void Log(string msg) =&gt; Triggernometry.RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e \n&quot; + msg);&#13;&#10;&#13;&#10;string s = &quot;${_entity[${_me.targetid}].address}&quot;;&#13;&#10;var tgtaddress = s.Length &lt;= 1 ? ${_me.address} : 0${_entity[${_me.targetid}].address};&#13;&#10;var offsets = &quot;${offset}&quot;.Split(',').Select(str =&gt; (int)MathParser.Parse(str)).ToList();&#13;&#10;var address = (IntPtr)tgtaddress + offsets[0];&#13;&#10;&#13;&#10;for (int i = 1; i &lt; offsets.Count; i++)&#13;&#10;{&#13;&#10;    address = Memory.Read&lt;IntPtr&gt;(Memory.XivProcHandle, address) + offsets[i];&#13;&#10;}&#13;&#10;string tgtValueStr = &quot;${val}&quot;.Trim();&#13;&#10;var current = Memory.Read&lt;${type}&gt;(Memory.XivProcHandle, address);&#13;&#10;string msg = $&quot;{tgtaddress.ToString(&quot;X&quot;)} + {string.Join(&quot;, &quot;, offsets.Select(o =&gt; o.ToString(&quot;X&quot;)))} =&gt; {address.ToString(&quot;X&quot;)}:\n    Prev: (${type}){current}&quot;;&#13;&#10;&#13;&#10;if (&quot;${type}&quot; == &quot;byte&quot;)&#13;&#10;{&#13;&#10;    msg += $&quot; ({Convert.ToString((byte)current, 2).PadLeft(8, '0')})&quot;;&#13;&#10;}&#13;&#10;if (!string.IsNullOrEmpty(tgtValueStr))&#13;&#10;{&#13;&#10;    ${type} value = (${type})MathParser.Parse(tgtValueStr);&#13;&#10;    Memory.Write&lt;${type}&gt;(Memory.XivProcHandle, address, value);&#13;&#10;    msg += $&quot;\n    Set to: {value}&quot;;&#13;&#10;    if (&quot;${type}&quot; == &quot;byte&quot;)&#13;&#10;    {&#13;&#10;        msg += $&quot; ({Convert.ToString((byte)value, 2).PadLeft(8, '0')})&quot;;&#13;&#10;    }&#13;&#10;}&#13;&#10;Log(msg);" ActionType="ExecuteScript" Asynchronous="False"/>
            </Actions>
          </Trigger>
          <Trigger Enabled="true" Name="进制转换：10→16  /e 数学表达式 = 0x?" Id="cd820da9-c21c-4e67-b7f1-9993883c1c71" RegularExpression="^.{15}\S+ 00:0038::(?&lt;what&gt;.+?) *= *0x[?？] *$">
            <Actions>
              <Action OrderNumber="1" NamedCallbackName="command" NamedCallbackParam="/e $1 = 0x${f:dec2hex:$1}" ActionType="NamedCallback"/>
            </Actions>
          </Trigger>
          <Trigger Enabled="true" Sequential="True" Name="模拟区域切换" Id="8514312a-0095-4417-bae4-84c4b3b8b346" RegularExpression="^.{15}\S+ 00:0038::(?i) *zone +(?&lt;zoneId&gt;.+)$">
            <Actions>
              <Action OrderNumber="1" ActionType="Placeholder" Asynchronous="False" Description="e.g. /e zone 1238    /e zone 0x4D6" DescriptionOverride="True"/>
              <Action OrderNumber="2" ActionType="Placeholder" Asynchronous="False" Description="可以将触发器内部的当前区域 ID 设置为指定 ID，使限制区域 ID 的触发器临时可工作，用于调试触发器" DescriptionOverride="True"/>
              <Action OrderNumber="3" ActionType="Placeholder" Asynchronous="False" Description="目前只能换 id，同时建议不要用 name 限制以免适配多客户端带来不必要的麻烦" DescriptionOverride="True"/>
              <Action OrderNumber="4" ActionType="Placeholder" Asynchronous="False" Description="想重置时游戏内正常切换区域即可" DescriptionOverride="True"/>
              <Action OrderNumber="5" ExecScriptExpression="Triggernometry.RealPlugin.plug.ZoneChangeDelegate(${n: ${zoneId}}, &quot;TestZone&quot;);" ActionType="ExecuteScript"/>
              <Action OrderNumber="6" NamedCallbackName="command" NamedCallbackParam="/e Simulating Zone: ${_ffxivzoneid} (0x${f:dec2hex:${_ffxivzoneid}})" ActionType="NamedCallback"/>
            </Actions>
          </Trigger>
        </Triggers>
      </Folder>
      <Folder Id="b4abd59c-4554-4afe-97fd-ca967d15035f" Name="高级标点工具箱 AdvWm v4.8.0" Enabled="true" RawEnvironmentVariables="version = 4.8.0">
        <Folders>
          <Folder Id="e0c8e7bc-deb4-44ea-9455-2f99b140aea7" Name="core" Enabled="true">
            <Folders>
              <Folder Id="40e0adc2-5931-4429-8023-a8125dba6f8b" Name="WaymarkEncoder" Enabled="true">
                <Folders>
                  <Folder Id="1f90e03c-1ca7-4a74-a699-01169d693a80" Name="user" Enabled="true">
                    <Folders/>
                    <Triggers>
                      <Trigger Enabled="true" Sequential="True" Name="2. 应答 + 播报" Id="6308d5bd-3892-4a7b-988f-265942292d4f" RegularExpression="^.{15}\S+ 1C:Add:0:.{8}:[^:]*:(?&lt;x&gt;[^:]+):(?&lt;y&gt;[^:]+):(?&lt;z&gt;[^:]+)">
                        <Actions>
                          <Action OrderNumber="1" NamedCallbackName="AdvWm" NamedCallbackParam="Action: Answer" ActionType="NamedCallback"/>
                          <Action OrderNumber="2" NamedCallbackName="AdvWm" NamedCallbackParam="Action: GetUsers" ActionType="NamedCallback" ExecutionDelayExpression="2000"/>
                          <Action OrderNumber="3" ListVariableName="AdvWm_users" ActionType="ListVariable"/>
                          <Action OrderNumber="4" NamedCallbackName="AdvWm" NamedCallbackParam="A: ${v:AdvWm_A}&#13;&#10;public: true" ActionType="NamedCallback">
                            <Condition Enabled="true" Grouping="Or">
                              <ConditionSingle Enabled="true" ExpressionL="${ev:AdvWm_A}" ExpressionTypeL="String" ExpressionR="1" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                            </Condition>
                          </Action>
                          <Action OrderNumber="5" VariableName="AdvWm_A" ActionType="Variable"/>
                        </Actions>
                        <Condition Enabled="true" Grouping="Or">
                          <ConditionSingle Enabled="true" ExpressionL="abs(${z})" ExpressionTypeL="Numeric" ExpressionR="0xff14 / 1000" ExpressionTypeR="Numeric" ConditionType="StringEqualCase"/>
                        </Condition>
                      </Trigger>
                      <Trigger Enabled="true" Name="3. 接收" Id="1e57ec49-8eec-4793-9ad0-67927d606281" RegularExpression="^.{15}\S+ 1C:Add:0:.{8}:[^:]*:(?&lt;x&gt;[^:]+):(?&lt;y&gt;[^:]+):(?&lt;z&gt;[^:]+)">
                        <Actions>
                          <Action OrderNumber="1" ListVariableOp="Push" ListVariableName="AdvWm_users" ListVariableExpression="${f:dec2hex8:${n: (round(${x} * 100) - 8000) * 0x1000 + (round(${y} * 100) - 8000) + 0x10000000}}, ${n: round(${z}, 2)}" ActionType="ListVariable"/>
                        </Actions>
                        <Condition Enabled="true" Grouping="Or">
                          <ConditionSingle Enabled="true" ExpressionL="abs(${z})" ExpressionTypeL="Numeric" ExpressionR="0xff14 / 1000" ExpressionTypeR="Numeric" ConditionType="StringEqualCase"/>
                          <ConditionSingle Enabled="true" ExpressionL="abs(${z})" ExpressionTypeL="Numeric" ExpressionR="0.14" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                        </Condition>
                      </Trigger>
                      <Trigger Enabled="true" Sequential="True" Name="1. 询问" Id="fb64c61e-d6cb-4ea1-abaf-f85c37d799fd" RegularExpression="^.{15}\S+ 00:0038::(?&lt;user&gt;[!?！？]user)$">
                        <Actions>
                          <Action OrderNumber="1" TriggerOp="EnableTrigger" TriggerId="6308d5bd-3892-4a7b-988f-265942292d4f" ActionType="Trigger" Description="? 是匿名" DescriptionOverride="True"/>
                          <Action OrderNumber="2" TriggerOp="EnableTrigger" TriggerId="1e57ec49-8eec-4793-9ad0-67927d606281" ActionType="Trigger" Description="! 是实名" DescriptionOverride="True"/>
                          <Action OrderNumber="3" VariableOp="SetString" VariableName="AdvWm_A" VariableExpression="${if: ${_wm[A].active} ? ${_wm[A].pos} : clear}" ActionType="Variable"/>
                          <Action OrderNumber="4" NamedCallbackName="AdvWm" NamedCallbackParam="Action: ${if: ${f:startwith(?):${f:tohalfwidth:${user}}} ? AskAnonymous : Ask }" ActionType="NamedCallback"/>
                        </Actions>
                      </Trigger>
                    </Triggers>
                  </Folder>
                  <Folder Id="2d39dba4-c77e-413c-835e-c810729738fb" Name="tell" Enabled="true">
                    <Folders/>
                    <Triggers>
                      <Trigger Enabled="true" Name="2. 接收" Id="07782697-6988-41d7-a963-e166950e7f6c" RegularExpression="^.{15}\S+ 1C:Add:0:(?&lt;id&gt;.{8}):(?&lt;name&gt;[^:]*):(?&lt;x&gt;[^:]+):(?&lt;y&gt;[^:]+)">
                        <Actions>
                          <Action OrderNumber="1" NamedCallbackName="AdvWm" NamedCallbackParam="Action: Decode&#13;&#10;Sender: ${name} (${_entity[${id}].jobEN3})" ActionType="NamedCallback" ExecutionDelayExpression="500"/>
                        </Actions>
                        <Condition Enabled="true" Grouping="And">
                          <ConditionSingle Enabled="true" ExpressionL="${x}" ExpressionTypeL="Numeric" ExpressionR="0xff14 / 1000" ExpressionTypeR="Numeric" ConditionType="StringEqualCase"/>
                          <ConditionSingle Enabled="true" ExpressionL="${y}" ExpressionTypeL="Numeric" ExpressionR="0xff14 / 1000" ExpressionTypeR="Numeric" ConditionType="StringEqualCase"/>
                        </Condition>
                      </Trigger>
                      <Trigger Enabled="true" Name="1. 发送" Id="23f48153-973e-453b-bf5f-9155f81ed917" RegularExpression="^.{15}\S+ 00:0038::(?&lt;tell&gt;[!?！？]tell) (?&lt;msg&gt;.+)">
                        <Actions>
                          <Action OrderNumber="1" NamedCallbackName="AdvWm" NamedCallbackParam="Action: ${if: ${f:startwith(?):${f:tohalfwidth:${tell}}} &amp;&amp; ${epv:AdvWm_Anonymous} ? EncodeAnonymous : Encode }&#13;&#10;Data: ${msg}" ActionType="NamedCallback"/>
                          <Action OrderNumber="2" Asynchronous="False"/>
                        </Actions>
                      </Trigger>
                    </Triggers>
                  </Folder>
                </Folders>
                <Triggers/>
              </Folder>
            </Folders>
            <Triggers>
              <Trigger Enabled="true" Sequential="True" Name="注册回调" Id="de1cf3b0-65fe-4e20-96ba-ab9bc95bb983" RegularExpression="^.{15}\S+ 01:">
                <Actions>
                  <Action OrderNumber="1" ExecScriptExpression="using System;&#13;&#10;using System.Collections;&#13;&#10;using System.Collections.Generic;&#13;&#10;using System.Linq;&#13;&#10;using System.Text;&#13;&#10;using Triggernometry;&#13;&#10;using static System.Math;&#13;&#10;using Triggernometry.FFXIV;&#13;&#10;using Triggernometry.PluginBridges.BridgeNamazu;&#13;&#10;using Triggernometry.Utilities;&#13;&#10;using Triggernometry.Utilities.Math;&#13;&#10;using System.Threading.Tasks;&#13;&#10;&#13;&#10;public struct Info&#13;&#10;{&#13;&#10;    public const string Name = &quot;AdvWm&quot;;&#13;&#10;    public const string NameCN = &quot;高级标点工具箱&quot;;&#13;&#10;    public const string Version = &quot;${env:version}&quot;;&#13;&#10;    public const string Author = &quot;阿洛 MnFeN&quot;;&#13;&#10;&#13;&#10;    public static string InitInfo =&gt; $&quot;{Name}：{NameCN} v{Version} by {Author} 已成功初始化。&quot;;&#13;&#10;}&#13;&#10;&#13;&#10;RealPlugin.plug.RegisterNamedCallback(&quot;AdvWm&quot;, new Action&lt;object, string&gt;(AdvWm.NamedCallback), null, registrant: $&quot;{Info.NameCN} v{Info.Version}&quot;);&#13;&#10;RealPlugin.plug.InvokeNamedCallback(&quot;NamazuLog&quot;, Info.InitInfo);&#13;&#10;Interpreter.StaticHelpers.Log(RealPlugin.DebugLevelEnum.Custom, Info.InitInfo);&#13;&#10;&#13;&#10;public class AdvWm&#13;&#10;{&#13;&#10;    string _command;&#13;&#10;    MultiLineRawArgs _data;&#13;&#10;    public AdvWm(string command) =&gt; _command = command;&#13;&#10;&#13;&#10;    public static void Log(string message) =&gt; RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, $&quot;/e {message}&quot;);&#13;&#10;&#13;&#10;    public static void NamedCallback(object _, string input)&#13;&#10;    {&#13;&#10;        var commands = input.Split(new string[] { &quot;---&quot; }, StringSplitOptions.None);&#13;&#10;        foreach (var command in commands)&#13;&#10;        {&#13;&#10;            new AdvWm(command).Execute();&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    static readonly HashSet&lt;string&gt; postNamazuWaymarkKeywords = new HashSet&lt;string&gt; {&#13;&#10;        &quot;save&quot;, &quot;backup&quot;, &quot;load&quot;, &quot;restore&quot;, &quot;reset&quot;, &quot;clear&quot;, &quot;public&quot;&#13;&#10;    };&#13;&#10;&#13;&#10;    private void Execute()&#13;&#10;    {&#13;&#10;        // 首先判断是否为关键词模式&#13;&#10;        string simpleCmd = _command.ToLower().Trim();&#13;&#10;        if (postNamazuWaymarkKeywords.Contains(simpleCmd))&#13;&#10;        {&#13;&#10;            RealPlugin.plug.InvokeNamedCallback(&quot;place&quot;, simpleCmd);&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        // 初始化 解析键值对&#13;&#10;        _data = new MultiLineRawArgs(_command);&#13;&#10;        // 提取共通参数&#13;&#10;        string action = _data.TryGet(&quot;Action&quot;, out action) ? action : &quot;&quot;;&#13;&#10;        bool log = !_data.TryGet(&quot;Log&quot;, out string rawLog) || bool.Parse(rawLog.ToLower());&#13;&#10;        bool local = !_data.TryGet(out string rawLocal, &quot;Local&quot;, &quot;LocalOnly&quot;) || bool.Parse(rawLocal.ToLower());&#13;&#10;&#13;&#10;        Waymarks waymarks;&#13;&#10;        switch (action?.ToLower())&#13;&#10;        {&#13;&#10;            case &quot;getversion&quot;:&#13;&#10;                Interpreter.StaticHelpers.SetScalarVariable(isPersistent: false, $&quot;{Info.Name}_version&quot;, Info.Version); return;&#13;&#10;            case &quot;encode&quot;:&#13;&#10;                WaymarksEncoder.EncodeAndSendWaymarks(_data.Get(&quot;data&quot;), false); return;&#13;&#10;            case &quot;encodeanonymous&quot;:&#13;&#10;                WaymarksEncoder.EncodeAndSendWaymarks(_data.Get(&quot;data&quot;), true); return;&#13;&#10;            case &quot;decode&quot;:&#13;&#10;                string sender = _data.Get(&quot;sender&quot;);&#13;&#10;                WaymarksEncoder.DecodeFromWaymarksAndShow(); return;&#13;&#10;            case &quot;ask&quot;:&#13;&#10;                WaymarksEncoder.Ask(false); return;&#13;&#10;            case &quot;askanonymous&quot;:&#13;&#10;                WaymarksEncoder.Ask(true); return;&#13;&#10;            case &quot;answer&quot;:&#13;&#10;                WaymarksEncoder.Answer(); return;&#13;&#10;            case &quot;getusers&quot;:&#13;&#10;                WaymarksEncoder.GetUsersResult(); return;&#13;&#10;            case &quot;polar&quot;: // 不推荐使用，仅为兼容旧版本，可被 default 模式完全替代&#13;&#10;                waymarks = ParseWaymarksPolar(); break;&#13;&#10;            case &quot;circle&quot;:&#13;&#10;                waymarks = ParseWaymarksCircle(); break;&#13;&#10;            case &quot;arc&quot;:&#13;&#10;                waymarks = ParseWaymarksArc(); break;&#13;&#10;            case &quot;linear&quot;:&#13;&#10;            case &quot;connect&quot;:&#13;&#10;            case &quot;linearconnect&quot;:&#13;&#10;                waymarks = ParseWaymarksLinearConnect(); break;&#13;&#10;            // case &quot;absolute&quot;:  case &quot;relative&quot;:  case &quot;place&quot;: 旧版本的指令全部整合为默认的标点模式&#13;&#10;            default:&#13;&#10;                waymarks = ParseWaymarksDefault(); break;&#13;&#10;        }&#13;&#10;        // Log($&quot;初始：\n{waymarks}&quot;);&#13;&#10;        TryApplyScales(waymarks);&#13;&#10;        // Log($&quot;伸缩：\n{waymarks}&quot;);&#13;&#10;        TryApplyRotation(waymarks);&#13;&#10;        // Log($&quot;旋转：\n{waymarks}&quot;);&#13;&#10;        TryApplyCenter(waymarks);&#13;&#10;        // Log($&quot;平移：\n{waymarks}&quot;);&#13;&#10;        waymarks.LocalOnly = local;&#13;&#10;        waymarks.Log = log;&#13;&#10;        waymarks.Mark();&#13;&#10;    }&#13;&#10;&#13;&#10;    /// &lt;summary&gt; 根据提供的所有坐标，生成一组初始标点。 &lt;/summary&gt;&#13;&#10;    private Waymarks ParseWaymarksDefault()&#13;&#10;    {&#13;&#10;        Waymarks waymarks = new Waymarks();&#13;&#10;        foreach (string name in Waymark.WaymarkNames)  // a b c d 1 2 3 4&#13;&#10;        {&#13;&#10;            if (_data.TryGet(name, out string rawCoord))&#13;&#10;            {&#13;&#10;                waymarks.Add(Waymark.Parse(name, rawCoord));&#13;&#10;            }&#13;&#10;        }&#13;&#10;        return waymarks;&#13;&#10;    }&#13;&#10;&#13;&#10;    /// &lt;summary&gt; 根据提供的所有极坐标，生成一组初始标点。建议使用 Default 替代。 &lt;/summary&gt;&#13;&#10;    private Waymarks ParseWaymarksPolar()&#13;&#10;    {&#13;&#10;        Waymarks waymarks = new Waymarks();&#13;&#10;        foreach (string name in Waymark.WaymarkNames)  // a b c d 1 2 3 4&#13;&#10;        {&#13;&#10;            if (_data.TryGet(name, out string rawPolarCoord))&#13;&#10;            {   // 已重构为接近正常方法的处理逻辑&#13;&#10;                XIVCoord polarCoord = XIVCoord.ParseRawData(rawPolarCoord.StartsWith(&quot;polar &quot;) ? rawPolarCoord : $&quot;polar {rawPolarCoord}&quot;);&#13;&#10;                waymarks.Add(new Waymark(name, polarCoord.ToCartesian()));&#13;&#10;            }&#13;&#10;        }&#13;&#10;        return waymarks;&#13;&#10;    }&#13;&#10;&#13;&#10;    /// &lt;summary&gt; 根据提供的半径和标点名，生成一组排列成圆周的初始标点。 &lt;/summary&gt;&#13;&#10;    private Waymarks ParseWaymarksCircle()&#13;&#10;    {&#13;&#10;        Waymarks waymarks = new Waymarks();&#13;&#10;        double rCardinal = MathParser.Parse(_data.Get(&quot;R&quot;));&#13;&#10;        double rIntercard = _data.TryGet(&quot;R2&quot;, out string rawR2) ? MathParser.Parse(rawR2) : rCardinal;&#13;&#10;        string[] usedWaymarkNames = _data.Get(&quot;Waymarks&quot;).Select(c =&gt; char.ToLower(c).ToString()).ToArray(); // 用哪些点 相对正北逆时针 如 A4D3C2B1&#13;&#10;        double step = 2 * PI / usedWaymarkNames.Length; // 相邻标点的角度差&#13;&#10;        int count = 0;&#13;&#10;        foreach (string name in usedWaymarkNames)  // a b c d 1 2 3 4&#13;&#10;        {&#13;&#10;            if (Waymark.WaymarkNames.Contains(name))&#13;&#10;            {&#13;&#10;                var r = (count &amp; 1) == 0 ? rCardinal : rIntercard;&#13;&#10;                var θ = count * step - PI;&#13;&#10;                waymarks.Add(new Waymark(name, new PolarCoord(r, θ, 0)));&#13;&#10;            }&#13;&#10;            count++;&#13;&#10;        }&#13;&#10;        return waymarks;&#13;&#10;    }&#13;&#10;&#13;&#10;    /// &lt;summary&gt; 根据提供的半径、标点名、圆心角，生成一组排列成弧线的初始标点。 &lt;/summary&gt;&#13;&#10;    private Waymarks ParseWaymarksArc()&#13;&#10;    {&#13;&#10;        Waymarks waymarks = new Waymarks();&#13;&#10;        double r = MathParser.Parse(_data.Get(&quot;R&quot;));   // 半径&#13;&#10;        string[] usedWaymarkNames = _data.Get(&quot;Waymarks&quot;).Select(c =&gt; char.ToLower(c).ToString()).ToArray(); // 用哪些点 相对正北逆时针 如 A4D3C2B1&#13;&#10;        int stepCount = usedWaymarkNames.Length - 1;&#13;&#10;&#13;&#10;        // 圆弧的圆心角，不提供的时候默认为使标点紧邻的角度（弧长约 2.6）&#13;&#10;        double dθ = _data.TryGet(out string rawdθ, &quot;dθ&quot;, &quot;dTheta&quot;) ? MathParser.Parse(rawdθ) : (stepCount &gt;= 1) ? 2.6 / r * stepCount : 0;&#13;&#10;        double θStep = (stepCount &gt;= 1) ? dθ / stepCount : 0; // 相邻标点的角度差&#13;&#10;        int count = 0;&#13;&#10;        foreach (string name in usedWaymarkNames)  // a b c d 1 2 3 4&#13;&#10;        {&#13;&#10;            if (Waymark.WaymarkNames.Contains(name)) // 允许使用非标点名的字符占位等分点，不会生成标点&#13;&#10;            {&#13;&#10;                PolarCoord polarCoord = new PolarCoord(r, (count - stepCount / 2.0) * θStep - PI, 0);&#13;&#10;                waymarks.Add(new Waymark(name, polarCoord));&#13;&#10;            }&#13;&#10;            count++;&#13;&#10;        }&#13;&#10;        return waymarks;&#13;&#10;    }&#13;&#10;&#13;&#10;    /// &lt;summary&gt; 根据提供的起点、终点、标点名，生成线性插值的初始标点。 &lt;/summary&gt;&#13;&#10;    private Waymarks ParseWaymarksLinearConnect()&#13;&#10;    {&#13;&#10;        Waymarks waymarks = new Waymarks();&#13;&#10;        string[] usedWaymarkNames = _data.Get(&quot;Waymarks&quot;).Select(c =&gt; char.ToLower(c).ToString()).ToArray(); // 用哪些点 起点到终点 如 A4D3C2B1&#13;&#10;        if (usedWaymarkNames.Length &lt; 2)&#13;&#10;        {&#13;&#10;            throw new Exception(&quot;AdvWm: LinearConnect 模式下，提供的标点数量不足 2&quot;);&#13;&#10;        }&#13;&#10;        XIVCoord startCoord = XIVCoord.ParseRawData(_data.Get(&quot;start&quot;));&#13;&#10;        XIVCoord endCoord = XIVCoord.ParseRawData(_data.Get(&quot;end&quot;));&#13;&#10;        XIVCoord vector = endCoord - startCoord;&#13;&#10;        double totalDistance = vector.Length;&#13;&#10;        // Log($&quot;{vector}&quot;);&#13;&#10;        int count = 0;&#13;&#10;        foreach (string name in usedWaymarkNames)  // A B C D 1 2 3 4&#13;&#10;        {&#13;&#10;            if (Waymark.WaymarkNames.Contains(name))&#13;&#10;            {&#13;&#10;                double percentage = (double)count / (usedWaymarkNames.Length - 1);  // 标点默认等分&#13;&#10;                if (_data.TryGet(name, out string rawDistance))   // 也可以不等分，自定义标点位置&#13;&#10;                {&#13;&#10;                    if (rawDistance.EndsWith(&quot; m&quot;))      // 以 A: 5 m 形式提供的距离&#13;&#10;                    {&#13;&#10;                        // @d 代表总长度，如 A: @d - 5 m 意为终点前 5 m&#13;&#10;                        string strTotalDistance = totalDistance.ToString(MathParser.CultureInfo);&#13;&#10;                        rawDistance = rawDistance.Replace(&quot;@d&quot;, strTotalDistance);&#13;&#10;                        double distance = MathParser.Parse(rawDistance.Substring(0, rawDistance.Length - 2));&#13;&#10;                        percentage = distance / totalDistance;&#13;&#10;                    }&#13;&#10;                    else                                // 以 A: 0.125 形式提供的百分比&#13;&#10;                    {&#13;&#10;                        percentage = MathParser.Parse(rawDistance);&#13;&#10;                    }&#13;&#10;                }&#13;&#10;&#13;&#10;                XIVCoord coord = startCoord + percentage * vector;&#13;&#10;                waymarks.Add(new Waymark(name, coord));&#13;&#10;            }&#13;&#10;            count++;&#13;&#10;        }&#13;&#10;        return waymarks;&#13;&#10;    }&#13;&#10;&#13;&#10;    /// &lt;summary&gt; 如果当前指令提供了任何伸缩，将伸缩变换应用到给定的一组标点坐标。 &lt;/summary&gt;&#13;&#10;    /// &lt;returns&gt;&lt;/returns&gt;&#13;&#10;    private void TryApplyScales(Waymarks waymarks)&#13;&#10;    {&#13;&#10;        // 首先尝试解析 Scale 和具体的 ScaleX, ScaleY, ScaleZ 参数&#13;&#10;        bool hasScale = _data.TryGet(&quot;Scale&quot;, out string rawScale);&#13;&#10;        bool hasScaleX = _data.TryGet(&quot;ScaleX&quot;, out string rawScaleX);&#13;&#10;        bool hasScaleY = _data.TryGet(&quot;ScaleY&quot;, out string rawScaleY);&#13;&#10;        bool hasScaleZ = _data.TryGet(&quot;ScaleZ&quot;, out string rawScaleZ);&#13;&#10;&#13;&#10;        // 未给定参数则免去解析直接返回&#13;&#10;        if (!hasScale &amp;&amp; !hasScaleX &amp;&amp; !hasScaleY &amp;&amp; !hasScaleZ) return;&#13;&#10;&#13;&#10;        // 如果存在 scale 参数，按照 scaleX ?? scale ?? 1 的优先级解析&#13;&#10;        double defaultScale = hasScale ? MathParser.Parse(rawScale) : 1;&#13;&#10;&#13;&#10;        double scaleX = hasScaleX ? MathParser.Parse(rawScaleX) : defaultScale;&#13;&#10;        double scaleY = hasScaleY ? MathParser.Parse(rawScaleY) : defaultScale;&#13;&#10;        double scaleZ = hasScaleZ ? MathParser.Parse(rawScaleZ) : defaultScale;&#13;&#10;&#13;&#10;        // 如果任一缩放倍率不是 1，则缩放&#13;&#10;        if (Abs(scaleX - 1) &gt; 1e-5 || Abs(scaleY - 1) &gt; 1e-5 || Abs(scaleZ - 1) &gt; 1e-5)&#13;&#10;        {&#13;&#10;            foreach (Waymark wm in waymarks)&#13;&#10;            {&#13;&#10;                wm.Coord = wm.Coord.ScaleBy(scaleX, scaleY, scaleZ);&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /// &lt;summary&gt; 如果当前指令提供了旋转，将伸缩变换应用到给定的一组标点坐标。 &lt;/summary&gt;&#13;&#10;    /// &lt;returns&gt;&lt;/returns&gt;&#13;&#10;    private void TryApplyRotation(Waymarks waymarks)&#13;&#10;    {&#13;&#10;        if (_data.TryGet(out string rawθ, &quot;θ&quot;, &quot;Theta&quot;))&#13;&#10;        {&#13;&#10;            double θ = MathParser.Parse(rawθ);&#13;&#10;            foreach (Waymark wm in waymarks)&#13;&#10;            {&#13;&#10;                wm.Coord = wm.Coord.RotateTo(θ);&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /// &lt;summary&gt; 如果当前指令提供了场地中心，将场地中心应用到给定的一组标点坐标。 &lt;/summary&gt;&#13;&#10;    void TryApplyCenter(Waymarks waymarks)&#13;&#10;    {&#13;&#10;        if (_data.TryGet(out string rawCenter, &quot;O&quot;, &quot;Center&quot;))&#13;&#10;        {&#13;&#10;            XIVCoord centerCoord = XIVCoord.ParseRawData(rawCenter);&#13;&#10;            foreach (Waymark wm in waymarks)&#13;&#10;            {&#13;&#10;                wm.Coord = wm.Coord.MoveTo(centerCoord);&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;}&#13;&#10;&#13;&#10;#region XIVCoord&#13;&#10;&#13;&#10;&#13;&#10;&#13;&#10;#endregion XIVCoord&#13;&#10;&#13;&#10;#region Waymark(s)&#13;&#10;&#13;&#10;public enum WaymarkType { A, B, C, D, One, Two, Three, Four }&#13;&#10;public class Waymark&#13;&#10;{&#13;&#10;    public WaymarkType Type { get; set; }&#13;&#10;    public XIVCoord Coord { get; set; }&#13;&#10;    public bool Ignore { get; set; }&#13;&#10;    public bool Active { get; set; }&#13;&#10;&#13;&#10;    /// &lt;summary&gt;&#13;&#10;    /// 用于遍历时保证输出顺序&#13;&#10;    /// &lt;/summary&gt;&#13;&#10;    public static readonly string[] WaymarkNames = new string[] { &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot; };&#13;&#10;    public static readonly WaymarkType[] WaymarkTypes = new WaymarkType[]&#13;&#10;    {&#13;&#10;        WaymarkType.A, WaymarkType.B, WaymarkType.C, WaymarkType.D,&#13;&#10;        WaymarkType.One, WaymarkType.Two, WaymarkType.Three, WaymarkType.Four&#13;&#10;    };&#13;&#10;&#13;&#10;    /// &lt;summary&gt;&#13;&#10;    /// 从用户输入的标点类型转化为实际 Type&#13;&#10;    /// &lt;/summary&gt;&#13;&#10;    public static readonly Dictionary&lt;string, WaymarkType&gt; TypeMap = Enumerable.Range(0, 8)&#13;&#10;        .ToDictionary(i =&gt; WaymarkNames[i], i =&gt; WaymarkTypes[i]);&#13;&#10;&#13;&#10;    public Waymark(WaymarkType type, XIVCoord coord = null, bool ignore = false)&#13;&#10;    {&#13;&#10;        Type = type;&#13;&#10;        Coord = coord ?? new CartesianCoord(0, 0, 0);&#13;&#10;        Active = coord != null;&#13;&#10;        Ignore = ignore;&#13;&#10;    }&#13;&#10;&#13;&#10;    public Waymark(string rawType, XIVCoord coord = null, bool ignore = false)&#13;&#10;    {&#13;&#10;        if (TypeMap.TryGetValue(rawType, out var mappedType))&#13;&#10;        {&#13;&#10;            Type = mappedType;&#13;&#10;        }&#13;&#10;        else&#13;&#10;        {&#13;&#10;            throw new Exception($&quot;AdvWm: {rawType} 不是合法的标点名之一（A B C D 1 2 3 4）。&quot;);&#13;&#10;        }&#13;&#10;        Coord = coord ?? new CartesianCoord(0, 0, 0);&#13;&#10;        Active = coord != null;&#13;&#10;        Ignore = ignore;&#13;&#10;    }&#13;&#10;&#13;&#10;    public static Waymark Parse(string rawType, string rawCoord, bool ignore = false)&#13;&#10;    {&#13;&#10;        Waymark wm = new Waymark(rawType, null, ignore);&#13;&#10;&#13;&#10;        switch (rawCoord.Trim().ToLower())&#13;&#10;        {&#13;&#10;            // 清除标点&#13;&#10;            case &quot;clear&quot;:&#13;&#10;                wm.Active = false;&#13;&#10;                wm.Coord = new CartesianCoord(0, 0, 0);&#13;&#10;                break;&#13;&#10;            // 变相地“清除”标点  不会有淡入淡出动画&#13;&#10;            case &quot;fakeclear&quot;:&#13;&#10;                wm.Active = true;&#13;&#10;                wm.Coord = new CartesianCoord(0, 0, 1000);&#13;&#10;                break;&#13;&#10;            default:&#13;&#10;                wm.Active = true;&#13;&#10;                wm.Coord = XIVCoord.ParseRawData(rawCoord);&#13;&#10;                break;&#13;&#10;        }&#13;&#10;&#13;&#10;        return wm;&#13;&#10;    }&#13;&#10;&#13;&#10;    public string Jsonify()&#13;&#10;    {&#13;&#10;        if (Ignore)&#13;&#10;            return &quot;&quot;;&#13;&#10;        if (Active)&#13;&#10;            return $&quot;\&quot;{Type}\&quot;: {{ {Coord.Jsonify()}, \&quot;Active\&quot;: true }}&quot;;&#13;&#10;        else&#13;&#10;            return $&quot;\&quot;{Type}\&quot;: {{}}&quot;;&#13;&#10;    }&#13;&#10;&#13;&#10;    public override string ToString() =&gt; Jsonify();&#13;&#10;}&#13;&#10;&#13;&#10;public sealed class Waymarks : IEnumerable&lt;Waymark&gt;&#13;&#10;{&#13;&#10;    private readonly Dictionary&lt;WaymarkType, Waymark&gt; _waymarks;&#13;&#10;    public bool Log = true;&#13;&#10;    public bool LocalOnly = true;&#13;&#10;&#13;&#10;    public Waymarks()&#13;&#10;    {&#13;&#10;        _waymarks = new Dictionary&lt;WaymarkType, Waymark&gt;();&#13;&#10;        foreach (var type in Waymark.WaymarkTypes)&#13;&#10;        {&#13;&#10;            _waymarks[type] = new Waymark(type, ignore: true);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    public Waymark this[WaymarkType type]&#13;&#10;    {&#13;&#10;        get =&gt; _waymarks[type];&#13;&#10;        set =&gt; _waymarks[type] = value;&#13;&#10;    }&#13;&#10;&#13;&#10;    IEnumerator IEnumerable.GetEnumerator() =&gt; GetEnumerator();&#13;&#10;    public IEnumerator&lt;Waymark&gt; GetEnumerator()&#13;&#10;    {&#13;&#10;        foreach (var type in Waymark.WaymarkTypes)&#13;&#10;        {&#13;&#10;            if (_waymarks.TryGetValue(type, out Waymark waymark))&#13;&#10;            {&#13;&#10;                yield return waymark;&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    public void Add(Waymark wm)&#13;&#10;    {&#13;&#10;        if (wm == null || wm.Ignore) return;&#13;&#10;        else _waymarks[wm.Type] = wm;&#13;&#10;    }&#13;&#10;&#13;&#10;    public string Jsonify()&#13;&#10;    {&#13;&#10;        var jsonList = _waymarks.Values.Where(wm =&gt; wm?.Ignore == false)&#13;&#10;            .Select(wm =&gt; &quot;    &quot; + wm.Jsonify()).ToList();&#13;&#10;        if (!Log)&#13;&#10;            jsonList.Add($&quot;    \&quot;Log\&quot;: false&quot;);&#13;&#10;        if (!LocalOnly)&#13;&#10;            jsonList.Add($&quot;    \&quot;LocalOnly\&quot;: false&quot;);&#13;&#10;        string data = string.Join(&quot;,\n&quot;, jsonList);&#13;&#10;        return $&quot;{{\n{string.Join(&quot;,\n&quot;, jsonList)}\n}}&quot;;&#13;&#10;    }&#13;&#10;    public override string ToString() =&gt; Jsonify();&#13;&#10;&#13;&#10;    public void Mark()&#13;&#10;    {&#13;&#10;        RealPlugin.plug.InvokeNamedCallback(&quot;place&quot;, this.Jsonify());&#13;&#10;        //RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, $&quot;/e {this}&quot;);&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;#endregion Waymark(s)&#13;&#10;&#13;&#10;public static class WaymarksEncoder&#13;&#10;{&#13;&#10;    static bool IsSelfAnonymous =&gt; Interpreter.StaticHelpers.GetScalarVariable(true, &quot;AdvWm_Anonymous&quot;) != null;&#13;&#10;&#13;&#10;    private static int CoordToInt(float coord)&#13;&#10;    {&#13;&#10;        // 标点数据只有三位精度。&#13;&#10;        // float 在 ±16384 内时可保证第三位小数准确，小于这个阈值的最大 2^n / 1000 为 ±8388.608，恰好 24 bit&#13;&#10;        int encodedInt = (int)Round((double)coord * 1000);&#13;&#10;        if (encodedInt &lt; 0)            // -8388608 ~ -1&#13;&#10;            encodedInt += 0xFFFFFF;    // 转换为 8388608 (0x800000) ~ 16777215 (0xFFFFFF)&#13;&#10;        return encodedInt;&#13;&#10;    }&#13;&#10;&#13;&#10;    static float IntToCoord(int encodedInt) =&gt; (encodedInt &gt; 0x7FFFFF ? encodedInt - 0xFFFFFF : encodedInt) / 1000f;&#13;&#10;&#13;&#10;    /// &lt;summary&gt; 通过 6 字节 int 解码 10XXXXXX ID &lt;/summary&gt;&#13;&#10;    static uint? CoordToId(float coord) =&gt; coord == 0 ? null : (uint?)(CoordToInt(coord) + 0x10000000);&#13;&#10;&#13;&#10;    /// &lt;summary&gt; 将 id 编码为两个 3 字节精度的坐标：80.00 - 120.95 &lt;/summary&gt;&#13;&#10;    static (float, float) IdToCoords(uint id)&#13;&#10;    {&#13;&#10;        id -= 0x10000000;&#13;&#10;        return (80 + ((id &gt;&gt; 12) &amp; 0xFFF) / 100f, 80 + (id &amp; 0xFFF) / 100f);&#13;&#10;    }&#13;&#10;&#13;&#10;&#13;&#10;    /// &lt;summary&gt; 解码当前标点为文本，并检测发送者 &lt;/summary&gt;&#13;&#10;    public static void DecodeFromWaymarksAndShow()&#13;&#10;    {&#13;&#10;        List&lt;byte&gt; byteList = new List&lt;byte&gt;();&#13;&#10;        var waymarks = Triggernometry.Utilities.Memory.Waymarks.Read();&#13;&#10;        uint? senderId = CoordToId(waymarks.A.Z);&#13;&#10;        string senderDesc = &quot;匿名&quot;;&#13;&#10;        if (senderId != null)&#13;&#10;        {&#13;&#10;            var sender = Triggernometry.FFXIV.Entity.GetEntityByID(senderId.Value);&#13;&#10;            var isCN = !Triggernometry.FFXIV.Entity.GetMyself().Name.Contains(&quot; &quot;);&#13;&#10;            senderDesc = $&quot;{sender.Name} ({(isCN ? sender.Job.NameCN2 : sender.Job.NameTCN2)})&quot;;&#13;&#10;        }&#13;&#10;        foreach (var waymark in waymarks.Skip(1)) // 跳过用于表明密语消息的 A 点&#13;&#10;        {&#13;&#10;            if (!waymark.Active) break;&#13;&#10;            foreach (var coord in new[] { waymark.X, waymark.Y, waymark.Z })&#13;&#10;            {&#13;&#10;                int encodedInt = CoordToInt(coord);&#13;&#10;                // 从而将 ±8388.608 以内的 float 转换为 24 bit 数据，再分解为 3 字节&#13;&#10;                byteList.Add((byte)((encodedInt &gt;&gt; 16) &amp; 0xFF));   // 高8位&#13;&#10;                byteList.Add((byte)((encodedInt &gt;&gt; 8) &amp; 0xFF));    // 中8位&#13;&#10;                byteList.Add((byte)(encodedInt &amp; 0xFF));           // 低8位&#13;&#10;            }&#13;&#10;        }&#13;&#10;        string msg = Encoding.UTF8.GetString(byteList.ToArray());&#13;&#10;        AdvWm.Log($&quot;[AdvWm] Secret Message:\n{senderDesc}：\n{msg}&quot;);&#13;&#10;    }&#13;&#10;&#13;&#10;    /// &lt;summary&gt; 编码一串文本，以标点形式发送 &lt;/summary&gt;&#13;&#10;    public static void EncodeAndSendWaymarks(string msg, bool anonymous)&#13;&#10;    {&#13;&#10;        try&#13;&#10;        {&#13;&#10;            byte[] byteArray = Encoding.UTF8.GetBytes(msg);&#13;&#10;            if (byteArray.Length &gt; 63)&#13;&#10;                throw new Exception(&quot;输入字符串过长，不能超过 63 字节。&quot;);&#13;&#10;&#13;&#10;            Array.Resize(ref byteArray, 63);&#13;&#10;&#13;&#10;            List&lt;int&gt; integers = new List&lt;int&gt;();&#13;&#10;            for (int i = 0; i &lt; 21; i++)&#13;&#10;            {&#13;&#10;                integers.Add((byteArray[i * 3] &lt;&lt; 16) | (byteArray[i * 3 + 1] &lt;&lt; 8) | (byteArray[i * 3 + 2]));&#13;&#10;            }&#13;&#10;            string advWm = $&quot;Local: false&quot;;&#13;&#10;            float az = anonymous ? 0 : IntToCoord((int)(Triggernometry.FFXIV.Entity.MyID - 0x10000000));&#13;&#10;            advWm += $&quot;\nA: {0xFF14 / 1000f}, {0xFF14 / 1000f}, {az}&quot;;&#13;&#10;            string[] names = new string[] { &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot; };&#13;&#10;            for (int i = 0; i &lt; 7; i++)&#13;&#10;            {&#13;&#10;                if (integers[i * 3] == 0 &amp;&amp; integers[i * 3 + 1] == 0 &amp;&amp; integers[i * 3 + 2] == 0)&#13;&#10;                    advWm += $&quot;\n{names[i]}: clear&quot;;&#13;&#10;                else&#13;&#10;                {&#13;&#10;                    float x = IntToCoord(integers[i * 3]);&#13;&#10;                    float y = IntToCoord(integers[i * 3 + 1]);&#13;&#10;                    float z = IntToCoord(integers[i * 3 + 2]);&#13;&#10;                    advWm += $&quot;\n{names[i]}: {x}, {y}, {z}&quot;;&#13;&#10;                }&#13;&#10;            }&#13;&#10;            RealPlugin.plug.InvokeNamedCallback(&quot;AdvWm&quot;, advWm);&#13;&#10;        }&#13;&#10;        catch (Exception e)&#13;&#10;        {&#13;&#10;            AdvWm.Log($&quot;发送失败：{e.Message}&quot;);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    public static void Ask(bool wantAnonymous)&#13;&#10;        =&gt; AskOrAnswerByWaymarkA(0xFF14 / 1000f * (wantAnonymous ? -1 : 1), true);&#13;&#10;&#13;&#10;    public static void Answer()&#13;&#10;        =&gt; AskOrAnswerByWaymarkA(0.14f, false);&#13;&#10;&#13;&#10;    /// &lt;summary&gt; &#13;&#10;    /// 通过改变标点 A，发起关于谁在使用此工具箱的询问或应答。&#13;&#10;    /// x, y 各三字节精度，用于存储 ID；&#13;&#10;    /// z = ±0xff14 / 1000 代表发起询问（负值代表希望匿名）；±0.14 代表应答（负值代表没开启标点）。&#13;&#10;    /// &lt;/summary&gt;&#13;&#10;    private static void AskOrAnswerByWaymarkA(float z, bool isAsk)&#13;&#10;    {&#13;&#10;        try&#13;&#10;        {&#13;&#10;            string advWm = $&quot;Local: false&quot;;&#13;&#10;            (float ax, float ay) = IdToCoords(Triggernometry.FFXIV.Entity.MyID);&#13;&#10;            if (IsSelfAnonymous) // real anonymous&#13;&#10;                (ax, ay) = (80, 80);&#13;&#10;            if (!isAsk &amp;&amp; !BridgeNamazu.NamazuPlugin.ActionEnabled[&quot;Waymark&quot;]) // 应答者没开启标点&#13;&#10;                z *= -1;&#13;&#10;            advWm += $&quot;\nA: {ax}, {ay}, {z}&quot;;&#13;&#10;            BridgeNamazu.NamazuPlugin.DoActionForce(&quot;AdvWm&quot;, advWm, &quot;Waymark&quot;);&#13;&#10;        }&#13;&#10;        catch (Exception e)&#13;&#10;        {&#13;&#10;            AdvWm.Log($&quot;发送失败：{e.Message}&quot;);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    public static void GetUsersResult()&#13;&#10;    {&#13;&#10;        var users = Interpreter.StaticHelpers.GetListVariable(false, &quot;AdvWm_users&quot;)?.Values?.Select(v =&gt; new UserEntry(v.ToString())).ToList();&#13;&#10;        if (users == null) return;&#13;&#10;        var ask = users?.FirstOrDefault(u =&gt; u.Asked);&#13;&#10;        // 查询者非自己且要求匿名时，不显示结果&#13;&#10;        if (ask?.Id != Triggernometry.FFXIV.Entity.MyID &amp;&amp; (ask?.WantAnonymous ?? true) &amp;&amp; !IsSelfAnonymous) return;&#13;&#10;        var answers = users?.Where(u =&gt; !u.Asked).ToList();&#13;&#10;        string msg = $&quot;[AdvWm] 看看誰是挂友！&lt;se.10&gt;\nAsked by: \n  · {ask}\nUsers:\n  · {string.Join(&quot;\n  · &quot;, answers)}&quot;;&#13;&#10;        AdvWm.Log(msg);&#13;&#10;    }&#13;&#10;&#13;&#10;    public class UserEntry&#13;&#10;    {&#13;&#10;        public uint Id;&#13;&#10;        public float Z;&#13;&#10;        public bool Asked =&gt; Abs(Abs(Z) - 0xFF14 / 1000f) &lt; 0.001;&#13;&#10;        public bool EnabledWaymark =&gt; Asked || Z &gt; 0;&#13;&#10;        public bool WantAnonymous =&gt; Asked &amp;&amp; Z &lt; 0;&#13;&#10;        /// &lt;summary&gt; 接收如 10ABCDEF, -0.14 的输入，前面是 id，后面是标点的 z 坐标&lt;/summary&gt;&#13;&#10;        public UserEntry(string data)&#13;&#10;        {&#13;&#10;            var d = data.Split(',');&#13;&#10;            Id = uint.Parse(d[0], System.Globalization.NumberStyles.HexNumber);&#13;&#10;            Z = float.Parse(d[1], System.Globalization.CultureInfo.InvariantCulture);&#13;&#10;        }&#13;&#10;        public override string ToString()&#13;&#10;        {&#13;&#10;            bool anonymous = IsSelfAnonymous ? false : WantAnonymous;&#13;&#10;            var entity = Triggernometry.FFXIV.Entity.GetEntityByID(Id);&#13;&#10;            string str = anonymous ? &quot;&quot; : entity.Name;&#13;&#10;            if (str == &quot;&quot;) &#13;&#10;                str = &quot;匿名&quot;;&#13;&#10;            else&#13;&#10;            {&#13;&#10;                bool isCN = !Triggernometry.FFXIV.Entity.GetMyself().Name.Contains(&quot; &quot;);&#13;&#10;                str += $&quot; ({(isCN ? entity.Job.NameCN2 : entity.Job.NameTCN2)})&quot;;&#13;&#10;            }&#13;&#10;            if (!EnabledWaymark)&#13;&#10;                str += &quot; [未使用標点]&quot;;&#13;&#10;            return str;&#13;&#10;        }&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;" ActionType="ExecuteScript" Description="【代码】" DescBgColor="acf" DescriptionOverride="True"/>
                  <Action OrderNumber="2" LogMessageText="AdvWm_Init" LogProcess="True" ActionType="LogMessage">
                    <Condition Enabled="true" Grouping="Or">
                      <ConditionSingle Enabled="true" ExpressionL="${ecallback:AdvWm}" ExpressionTypeL="String" ExpressionR="1" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="3" FolderId="40e0adc2-5931-4429-8023-a8125dba6f8b" TriggerOp="EnableTrigger" TriggerId="fb64c61e-d6cb-4ea1-abaf-f85c37d799fd" ActionType="Folder"/>
                  <Action OrderNumber="4" FolderId="2d39dba4-c77e-413c-835e-c810729738fb" TriggerOp="EnableTrigger" TriggerId="fb64c61e-d6cb-4ea1-abaf-f85c37d799fd" ActionType="Folder"/>
                  <Action OrderNumber="5" FolderId="1f90e03c-1ca7-4a74-a699-01169d693a80" TriggerOp="EnableTrigger" TriggerId="fb64c61e-d6cb-4ea1-abaf-f85c37d799fd" ActionType="Folder"/>
                  <Action OrderNumber="6" TriggerOp="EnableTrigger" TriggerId="fb64c61e-d6cb-4ea1-abaf-f85c37d799fd" ActionType="Trigger"/>
                  <Action OrderNumber="7" TriggerOp="EnableTrigger" TriggerId="6308d5bd-3892-4a7b-988f-265942292d4f" ActionType="Trigger"/>
                  <Action OrderNumber="8" TriggerOp="EnableTrigger" TriggerId="1e57ec49-8eec-4793-9ad0-67927d606281" ActionType="Trigger"/>
                </Actions>
                <Condition Enabled="true" Grouping="Or">
                  <ConditionSingle Enabled="true" ExpressionL="${ecallback:AdvWm}" ExpressionTypeL="String" ExpressionR="0" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                </Condition>
              </Trigger>
              <Trigger Enabled="true" Name="版本" Id="3eeb7e0a-63a2-4527-9026-6ad8e8b1c36d" RegularExpression="^AdvWm_getVersion">
                <Actions>
                  <Action OrderNumber="1" ListVariableOp="Push" ListVariableName="AdvWm_version" ListVariableExpression="${env:version}" ActionType="ListVariable"/>
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Name="场地标点：/e mk [正点半径] [斜点半径]?    如 &quot;/e mk 15&quot;  &quot;/e mk 18 10&quot;" Id="a7bc53e6-fbbb-40ad-8e4b-c3ee1536dccd" RegularExpression="^.{15}\S+ 00:0038:: *mk +(?&lt;card&gt;[^ ]+)(?: +(?&lt;intercard&gt;[^ ]+))? *(?&lt;center&gt;@ *(?&lt;x0&gt;[^ ]+) +(?&lt;y0&gt;[^ ]+)(?: +(?&lt;z0&gt;[^ ]+))? *)?$">
                <Actions>
                  <Action OrderNumber="1" ActionType="Placeholder" Asynchronous="False" Description="需求：高级标点工具箱，没有的在远程触发器 - 自检 里找" DescriptionOverride="True"/>
                  <Action OrderNumber="2" NamedCallbackName="AdvWm" NamedCallbackParam="action: circle&#13;&#10;waymarks: ADCB&#13;&#10;r: ${card}&#13;&#10;center: ${n: ${x0} ?? 100}, ${n: ${y0} ?? 100}, ${n: ${z0} ?? ${_me.z}}" ActionType="NamedCallback" Asynchronous="False" Description="ABCD" DescriptionOverride="True"/>
                  <Action OrderNumber="3" NamedCallbackName="AdvWm" NamedCallbackParam="action: circle&#13;&#10;waymarks: 4321&#13;&#10;θ: -3/4 * π&#13;&#10;r: (${intercard} ?? ${card})&#13;&#10;center: ${n: ${x0} ?? 100}, ${n: ${y0} ?? 100}, ${n: ${z0} ?? ${_me.z}}" Enabled="False" ActionType="NamedCallback" Asynchronous="False" Description="1234（北侧从左到右 4A1）" DescriptionOverride="True"/>
                  <Action OrderNumber="4" NamedCallbackName="AdvWm" NamedCallbackParam="action: circle&#13;&#10;waymarks: 4321&#13;&#10;θ: -1/4 * π&#13;&#10;r: (${intercard} ?? ${card})&#13;&#10;center: ${n: ${x0} ?? 100}, ${n: ${y0} ?? 100}, ${n: ${z0} ?? ${_me.z}}" ActionType="NamedCallback" Asynchronous="False" Description="1234（北侧从左到右 1A2）" DescriptionOverride="True"/>
                  <Action OrderNumber="5" ActionType="Placeholder" Asynchronous="False" Description="应用本地标点（使全队可见）： " DescriptionOverride="True"/>
                  <Action OrderNumber="6" NamedCallbackName="command" NamedCallbackParam="/waymark save 30" ActionType="NamedCallback" Asynchronous="False"/>
                  <Action OrderNumber="7" NamedCallbackName="command" NamedCallbackParam="/waymark preset 30" ActionType="NamedCallback" Asynchronous="False"/>
                  <Action OrderNumber="8" LogMessageText="[00:00:00.000] 0 00:0038::mk 15 10" LogProcess="True" Enabled="False" ActionType="LogMessage" Description="如果解析插件真的完全不工作，双击这行在 mk 之后输入标点参数，右键测试这行（左面的对号不要点）" DescBgColor="fdd" DescTextColor="000" DescriptionOverride="True"/>
                </Actions>
              </Trigger>
              <Trigger Enabled="false" Name="导入提示" Id="56b09e32-5abf-460c-91d9-1444d3ec2910" RegularExpression="^." PrevActionsRefire="Deny" PeriodRefire="Deny" RefirePeriodExpression="30000">
                <Actions>
                  <Action OrderNumber="1" MessageBoxIconType="Information" MessageBoxText="高级标点工具箱已更新 v${env:version}。&#13;&#10;如果你有本地版本，请删除本地版本，以免冲突。&#13;&#10;如果你是开发者，可以查看使用说明中的新功能介绍。&#13;&#10;&#13;&#10;本条消息只会提示一次。" ActionType="MessageBox"/>
                  <Action OrderNumber="2" TriggerOp="DisableTrigger" TriggerId="56b09e32-5abf-460c-91d9-1444d3ec2910" ActionType="Trigger"/>
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Name="手动标点： /e pl/place A/B/C/D/1/2/3/4 (x) (y) (z)" Id="762e2fa3-f6ae-4315-8048-d750671adb61" RegularExpression="^.{15}\S+ 00:0038:: *[Pp][Ll]([Aa][Cc][Ee])? +(?&lt;wm&gt;[A-Da-d1-4])(?&lt;x&gt; +[^ ]+)?(?&lt;y&gt; +[^ ]+)?(?&lt;z&gt; +[^ ]+)? *$">
                <Actions>
                  <Action OrderNumber="1" NamedCallbackName="AdvWm" NamedCallbackParam="action: place&#13;&#10;${wm}: (${x} ?? ${_me.x}), (${y} ?? ${_me.y}), (${z} ?? ${_me.z})" ActionType="NamedCallback"/>
                </Actions>
              </Trigger>
            </Triggers>
          </Folder>
        </Folders>
        <Triggers>
          <Trigger Enabled="false" Sequential="True" Name="启动时文本提示（自行开关）" Id="d7c8998b-47b3-4ae1-a66b-5bc0f22c8d1b" RegularExpression="^AdvWm_Init">
            <Actions>
              <Action OrderNumber="1" NamedCallbackName="command" NamedCallbackParam="/e ${if: ${f:contain(&quot; &quot;):${_me.name}} ? &quot;已激活：高級標点工具箱&quot; : &quot;已激活：高级标点工具箱&quot; } AdvWm v${env:version}" ActionType="NamedCallback"/>
            </Actions>
          </Trigger>
          <Trigger Enabled="false" Name="本分组不可关闭，否则影响基础功能。如需关闭本地标点，在鲶鱼精邮差插件页面关闭 Waymark。" Id="038b655f-9b22-4717-935f-2cba6df5ab40" RegularExpression="">
            <Actions/>
          </Trigger>
        </Triggers>
      </Folder>
      <Folder Id="f1cb57f3-1d3a-4039-86c6-28853397c9fe" Name="日志转录" Enabled="true">
        <Folders/>
        <Triggers>
          <Trigger Enabled="true" Name="1B Tether" Id="b76001fa-c4e6-46fc-9c6f-95c2a56f42d6" RegularExpression="^(?&lt;time&gt;.{14}) \S+ 23:(?&lt;sid&gt;.{8}):(?&lt;sn&gt;[^:]*):(?&lt;tid&gt;.{8}):(?&lt;tn&gt;[^:]*):[^:]*:[^:]*:(?&lt;type&gt;[^:]*)">
            <Actions>
              <Action OrderNumber="1" DictVariableOp="GetEntity" DictVariableName="tmp_src" DictVariableValue="${sid}" ActionType="DictVariable" Asynchronous="False"/>
              <Action OrderNumber="2" DictVariableOp="GetEntity" DictVariableName="tmp_tgt" DictVariableValue="${tid}" ActionType="DictVariable" Asynchronous="False"/>
              <Action OrderNumber="3" ActionType="Placeholder" Asynchronous="False" Description="如果是 10xxxxxx =&gt; 40xxxxxx 则交换两者" DescriptionOverride="True"/>
              <Action OrderNumber="4" LogMessageText="${time} _Tether AAA:23:${type}:${sid}:${sn}:${d:tmp_src[bnpcnameid]}:${d:tmp_src[bnpcid]}:${d:tmp_src[x]}:${d:tmp_src[y]}:${d:tmp_src[z]}:${d:tmp_src[h]}:${tid}:${tn}:${d:tmp_tgt[bnpcnameid]}:${d:tmp_tgt[bnpcid]}:${d:tmp_tgt[x]}:${d:tmp_tgt[y]}:${d:tmp_tgt[z]}:${d:tmp_tgt[h]}:0" LogProcess="True" LogProcessACT="True" ActionType="LogMessage" Asynchronous="False">
                <Condition Enabled="true" Grouping="Or">
                  <ConditionSingle Enabled="true" ExpressionL="${f:startwith(40):${sid}}" ExpressionTypeL="String" ExpressionR="1" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                </Condition>
              </Action>
              <Action OrderNumber="5" LogMessageText="${time} _Tether AAA:23:${type}:${tid}:${tn}:${d:tmp_tgt[bnpcnameid]}:${d:tmp_tgt[bnpcid]}:${d:tmp_tgt[x]}:${d:tmp_tgt[y]}:${d:tmp_tgt[z]}:${d:tmp_tgt[h]}:${sid}:${sn}:${d:tmp_src[bnpcnameid]}:${d:tmp_src[bnpcid]}:${d:tmp_src[x]}:${d:tmp_src[y]}:${d:tmp_src[z]}:${d:tmp_src[h]}:1" LogProcess="True" LogProcessACT="True" ActionType="LogMessage" Asynchronous="False">
                <Condition Enabled="true" Grouping="Or">
                  <ConditionSingle Enabled="true" ExpressionL="${f:startwith(40):${sid}}" ExpressionTypeL="String" ExpressionR="0" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                </Condition>
              </Action>
              <Action OrderNumber="6" DictVariableValueType="Numeric" DictVariableName="tmp_src" ActionType="DictVariable" Asynchronous="False"/>
              <Action OrderNumber="7" DictVariableName="tmp_tgt" ActionType="DictVariable" Asynchronous="False"/>
            </Actions>
            <Condition Enabled="true" Grouping="Or">
              <ConditionSingle Enabled="true" ExpressionL="${f:startwith(40):${sid}} || ${f:startwith(40):${tid}}" ExpressionTypeL="Numeric" ExpressionR="1" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
            </Condition>
          </Trigger>
          <Trigger Enabled="true" Name="10F ActorSetPos" Id="afea2cfe-0e85-4bc6-8424-cc23c26b3350" RegularExpression="^(?&lt;time&gt;.{14}) \S+ 10F:(?&lt;id&gt;4.{7}):(?&lt;h&gt;[^:]+):[^:]+:[^:]+:(?&lt;x&gt;[^:]+):(?&lt;y&gt;[^:]+):(?&lt;z&gt;[^:]+)$">
            <Actions>
              <Action OrderNumber="1" DictVariableOp="GetEntity" DictVariableName="tmp_entity" DictVariableValue="${id}" ActionType="DictVariable" Asynchronous="False"/>
              <Action OrderNumber="2" LogMessageText="${time} _ActorSetPos AAA:10F:${id}:${d:tmp_entity[name]}:${d:tmp_entity[bnpcnameid]}:${d:tmp_entity[bnpcid]}:${x}:${y}:${z}:${h}" LogProcess="True" LogProcessACT="True" ActionType="LogMessage" Asynchronous="False">
                <Condition Enabled="false" Grouping="Or">
                  <ConditionSingle Enabled="true" ExpressionL="${d:tmp_entity[bnpcid]}" ExpressionTypeL="String" ExpressionR="9020" ExpressionTypeR="String" ConditionType="StringNotEqualCase"/>
                </Condition>
              </Action>
              <Action OrderNumber="3" DictVariableName="tmp_entity" ActionType="DictVariable" Asynchronous="False"/>
            </Actions>
          </Trigger>
          <Trigger Enabled="true" Name="111 ActorControl" Id="09154dac-37c2-49e0-a42f-a5e10a4eae82" RegularExpression="^(?&lt;time&gt;.{14}) \S+ 111:(?&lt;id&gt;4.{7}):(?&lt;type&gt;[^:]*):(?&lt;param1&gt;[^:]*):(?&lt;param2&gt;[^:]*)">
            <Actions>
              <Action OrderNumber="1" DictVariableOp="Build" DictVariableTarget="ProcessedLog_ActorControl" DictVariableValue="=&#13;&#10;0031=Unknown49 AAA:200:¤{param1}&#13;&#10;003E=AnimationState AAA:201:¤{param1}:¤{param2}&#13;&#10;003F=WeaponId AAA:202:¤{param1}&#13;&#10;0197=PlayActionTimeline AAA:203:¤{param1}&#13;&#10;019D=EObjAnimation AAA:204:¤{param1}:¤{param2}&#13;&#10;01F8=StatusUpdate AAA:205:¤{param1}" ActionType="DictVariable" Asynchronous="False">
                <Condition Enabled="true" Grouping="Or">
                  <ConditionSingle Enabled="true" ExpressionL="${ed:ProcessedLog_ActorControl}" ExpressionTypeL="String" ExpressionR="0" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                </Condition>
              </Action>
              <Action OrderNumber="2" DictVariableOp="GetEntity" DictVariableName="tmp_entity" DictVariableValue="${id}" ActionType="DictVariable" Asynchronous="False"/>
              <Action OrderNumber="3" LogMessageText="${time} _${d:ProcessedLog_ActorControl[${type}]}:${id}:${d:tmp_entity[name]}:${d:tmp_entity[bnpcnameid]}:${d:tmp_entity[bnpcid]}:${d:tmp_entity[x]}:${d:tmp_entity[y]}:${d:tmp_entity[z]}:${d:tmp_entity[h]}" LogProcess="True" LogProcessACT="True" ActionType="LogMessage" Asynchronous="False">
                <Condition Enabled="false" Grouping="Or">
                  <ConditionSingle Enabled="true" ExpressionL="${d:tmp_entity[bnpcid]}" ExpressionTypeL="String" ExpressionR="9020" ExpressionTypeR="String" ConditionType="StringNotEqualCase"/>
                </Condition>
              </Action>
              <Action OrderNumber="4" DictVariableName="tmp_entity" ActionType="DictVariable" Asynchronous="False"/>
            </Actions>
          </Trigger>
          <Trigger Enabled="true" Name="110 ActorSpawnExtra" Id="44640587-e1d3-44a0-aa19-b4449cfb65f5" RegularExpression="^(?&lt;time&gt;.{14}) \S+ 110:(?&lt;id&gt;4.{7}):(?!E0000000:0000:00)(?&lt;params&gt;.+)">
            <Actions>
              <Action OrderNumber="1" DictVariableOp="GetEntity" DictVariableName="tmp_entity" DictVariableValue="${id}" ActionType="DictVariable" Asynchronous="False"/>
              <Action OrderNumber="2" LogMessageText="${time} _ActorSpawnExtra AAA:110:${id}:${d:tmp_entity[name]}:${d:tmp_entity[bnpcnameid]}:${d:tmp_entity[bnpcid]}:${d:tmp_entity[x]}:${d:tmp_entity[y]}:${d:tmp_entity[z]}:${d:tmp_entity[h]}:${params}" LogProcess="True" LogProcessACT="True" ActionType="LogMessage" Asynchronous="False">
                <Condition Enabled="false" Grouping="Or">
                  <ConditionSingle Enabled="true" ExpressionL="${d:tmp_entity[bnpcid]}" ExpressionTypeL="String" ExpressionR="9020" ExpressionTypeR="String" ConditionType="StringNotEqualCase"/>
                </Condition>
              </Action>
              <Action OrderNumber="3" DictVariableName="tmp_entity" ActionType="DictVariable" Asynchronous="False"/>
            </Actions>
          </Trigger>
        </Triggers>
      </Folder>
      <Folder Id="a529e01d-a121-4391-bfef-0b52951eb3b8" Name="小队框架 PartyList v2.1" Enabled="true">
        <Folders>
          <Folder Id="0184b79d-f3d6-490f-adaa-b0cf486ab458" Name="记录完整小队" Enabled="true">
            <Folders/>
            <Triggers>
              <Trigger Enabled="true" Name="[F] 注册区域      PartyList:Register:[zoneid]:[playerDescs]" Id="804216a2-d4ab-417e-b58b-591f3f5836bf" RegularExpression="^PartyList:Register:(?&lt;zoneid&gt;\d+):(?&lt;playerDescs&gt;.+)">
                <Actions>
                  <Action OrderNumber="1" DictVariableOp="Set" DictVariableName="PartyListPlayerDescs" DictVariableKey="${zoneid}" DictVariableValue="${playerDescs}" ActionType="DictVariable"/>
                  <Action OrderNumber="2" ActionType="Placeholder" Asynchronous="False" Description="如果当前处于要注册的地图：触发检查" DescriptionOverride="True"/>
                  <Action OrderNumber="3" LogMessageText="PartyList:Show:1:1:0:${zoneid}" LogProcess="True" ActionType="LogMessage">
                    <Condition Enabled="true" Grouping="Or">
                      <ConditionSingle Enabled="true" ExpressionL="${zoneid}" ExpressionTypeL="String" ExpressionR="${_ffxivzoneid}" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                    </Condition>
                  </Action>
                </Actions>
                <Condition Enabled="true" Grouping="Or">
                  <ConditionSingle Enabled="true" ExpressionL="${playerDescs}" ExpressionTypeL="String" ExpressionR="Self" ExpressionTypeR="String" ConditionType="StringNotEqualNocase"/>
                </Condition>
              </Trigger>
              <Trigger Enabled="true" Name="接收：倒计时" Id="755696a8-6cb0-4dc0-b362-783adf5c145d" RegularExpression="^.{15}\S+ 10C:">
                <Actions>
                  <Action OrderNumber="1" LogMessageText="PartyList:Show:0:1:0" LogProcess="True" ActionType="LogMessage"/>
                </Actions>
                <Condition Enabled="true" Grouping="And">
                  <ConditionSingle Enabled="true" ExpressionL="${d:PartyListPlayerDescs[${_ffxivzoneid}]}" ExpressionTypeL="String" ExpressionR="" ExpressionTypeR="String" ConditionType="StringNotEqualCase"/>
                  <ConditionSingle Enabled="true" ExpressionL="${d:PartyListPlayerDescs[${_ffxivzoneid}]}" ExpressionTypeL="String" ExpressionR="Self" ExpressionTypeR="String" ConditionType="StringNotEqualCase"/>
                  <ConditionSingle Enabled="true" ExpressionL="${el:party}" ExpressionTypeL="String" ExpressionR="0" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                </Condition>
              </Trigger>
              <Trigger Enabled="true" Name="接收：文本指令　　/e party　（非全队模式下提示错误）" Id="ad7c7abc-f5b0-48f9-b3f7-80940bf71bf2" RegularExpression="^.{15}\S+ 00:0038:: *[Pp][Aa][Rr][Tt][Yy] *$">
                <Actions>
                  <Action OrderNumber="1" ActionType="Placeholder" Description="条件：当前地图未注册为全队模式" DescriptionOverride="True"/>
                  <Action OrderNumber="2" UseTTSTextExpression="当前地图区域未注册小队类型。" ActionType="UseTTS"/>
                </Actions>
                <Condition Enabled="true" Grouping="Or">
                  <ConditionSingle Enabled="true" ExpressionL="${d:PartyListPlayerDescs[${_ffxivzoneid}]}" ExpressionTypeL="String" ExpressionR="Self" ExpressionTypeR="String" ConditionType="StringEqualNocase"/>
                  <ConditionSingle Enabled="true" ExpressionL="${d:PartyListPlayerDescs[${_ffxivzoneid}]}" ExpressionTypeL="String" ExpressionR="" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                </Condition>
              </Trigger>
              <Trigger Enabled="true" Sequential="True" Name="[F][C] 开启窗口   PartyList:Show:..." Id="48f1e88c-2ae6-4d9e-9123-02e5695db901" RegularExpression="^PartyList:Show:(?&lt;successTTS&gt;[01]):(?&lt;failTTS&gt;[01]):(?&lt;forceOpen&gt;[01])(?::(?&lt;zoneid&gt;[^:]*))?">
                <Actions>
                  <Action OrderNumber="1" UseTTSTextExpression="正在开启小队配置" ActionType="UseTTS">
                    <Condition Enabled="true" Grouping="And">
                      <ConditionSingle Enabled="true" ExpressionL="${successTTS}" ExpressionTypeL="String" ExpressionR="1" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                      <ConditionGroup Enabled="true" Grouping="Or">
                        <ConditionSingle Enabled="true" ExpressionL="${ev:PartyListForm_isRunning}" ExpressionTypeL="String" ExpressionR="0" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                        <ConditionSingle Enabled="true" ExpressionL="${forceOpen}" ExpressionTypeL="String" ExpressionR="1" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                      </ConditionGroup>
                    </Condition>
                  </Action>
                  <Action OrderNumber="2" UseTTSTextExpression="请检查后台窗口" ActionType="UseTTS">
                    <Condition Enabled="true" Grouping="And">
                      <ConditionSingle Enabled="true" ExpressionL="${ev:PartyListForm_isRunning}" ExpressionTypeL="String" ExpressionR="1" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                      <ConditionSingle Enabled="true" ExpressionL="${successTTS}" ExpressionTypeL="String" ExpressionR="1" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                      <ConditionSingle Enabled="true" ExpressionL="${forceOpen}" ExpressionTypeL="String" ExpressionR="0" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="3" ExecScriptExpression="using System;&#13;&#10;using System.Collections.Generic;&#13;&#10;using System.Drawing;&#13;&#10;using System.Globalization;&#13;&#10;using System.Linq;&#13;&#10;using System.Threading;&#13;&#10;using System.Windows.Forms;&#13;&#10;using Triggernometry;&#13;&#10;using Triggernometry.CustomControls;&#13;&#10;using static Triggernometry.Interpreter;&#13;&#10;&#13;&#10;public struct Info&#13;&#10;{&#13;&#10;    public const string Name = &quot;小队列表&quot;;&#13;&#10;    public const string Version = &quot;0.3&quot;; // 2024.11.25&#13;&#10;    public const string Author = &quot;阿洛 MnFeN&quot;;&#13;&#10;}&#13;&#10;&#13;&#10;RealPlugin.plug.RegisterNamedCallback(&quot;PartyList&quot;, new Action&lt;object, string&gt;(PartyListHelper.Start), null);&#13;&#10;&#13;&#10;public static class PartyListHelper&#13;&#10;{&#13;&#10;    public static void Start(object _, string rawPlayerDescriptions)&#13;&#10;    {&#13;&#10;        StaticHelpers.SetScalarVariable(false, &quot;PartyListForm_isRunning&quot;, &quot;1&quot;);&#13;&#10;        try&#13;&#10;        {&#13;&#10;            string[] playerDescriptions = Context.SplitArguments(rawPlayerDescriptions);&#13;&#10;            if (playerDescriptions.Length &lt; 1) throw new ArgumentException(&quot;PartyList: 未提供初始化小队列表所需的描述文本参数。&quot;);&#13;&#10;            Thread staThread = new Thread(() =&gt; new PartyListForm(playerDescriptions).Run());&#13;&#10;            staThread.SetApartmentState(ApartmentState.STA);&#13;&#10;            staThread.Start();&#13;&#10;            staThread.Join();&#13;&#10;        }&#13;&#10;        finally&#13;&#10;        {&#13;&#10;            StaticHelpers.SetScalarVariable(false, &quot;PartyListForm_isRunning&quot;, null);&#13;&#10;        }&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;#region PartyListForm&#13;&#10;public class PartyListForm : Form&#13;&#10;{&#13;&#10;    public static Font UserFont = CreateFont(10, &quot;Microsoft YaHei&quot;, &quot;Microsoft JhengHei&quot;);&#13;&#10;&#13;&#10;    PartyListPanel partyListPanel;&#13;&#10;&#13;&#10;    /// &lt;summary&gt; The Panel that contains all the option groups on the form, scrollable. &lt;/summary&gt;&#13;&#10;    Panel mainPanel = new Panel()&#13;&#10;    {&#13;&#10;        AutoSize = true,&#13;&#10;        AutoSizeMode = AutoSizeMode.GrowAndShrink,&#13;&#10;        Dock = DockStyle.Top,&#13;&#10;        AutoScroll = true,&#13;&#10;    };&#13;&#10;&#13;&#10;    /// &lt;summary&gt; The TableLayoutPanel which contains buttons and other controls at the bottom of the form. &lt;/summary&gt;&#13;&#10;    TableLayoutPanel bottomPanel = new BottomTableLayoutPanel();&#13;&#10;&#13;&#10;    public Button btnSave = new MyButton { Text = &quot;保存&quot; };&#13;&#10;&#13;&#10;    public PartyListForm(params string[] playerDescriptions)&#13;&#10;    {&#13;&#10;        // SuspendLayout until Run()&#13;&#10;        SuspendLayout();&#13;&#10;        // basic&#13;&#10;        Text = Info.Name;&#13;&#10;        Font = UserFont;&#13;&#10;        TopMost = true;&#13;&#10;        StartPosition = FormStartPosition.CenterScreen;&#13;&#10;        int width = (TextRenderer.MeasureText(&quot;啊啊啊啊啊&quot;, Font).Width) * 8;&#13;&#10;        MinimumSize = new Size(width, width * 3 / 5); // To-do：添加一个根据所有控件总高度调节最小高度的逻辑&#13;&#10;&#13;&#10;        // Controls&#13;&#10;        Controls.Add(mainPanel);&#13;&#10;        Controls.Add(bottomPanel);&#13;&#10;        bottomPanel.Controls.Add(btnSave);&#13;&#10;        bottomPanel.ColumnStyles.Add(new ColumnStyle(SizeType.AutoSize));&#13;&#10;&#13;&#10;        // Events&#13;&#10;        Shown += (sender, e) =&gt; RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &lt;se.9&gt;\n正在开启小队列表控件。\n如果没有看到，请检查后台窗口。&quot;);&#13;&#10;        Shown += (sender, e) =&gt; mainPanel.AutoScrollPosition = new Point(0, 0);&#13;&#10;        btnSave.Click += btnSave_Click;&#13;&#10;&#13;&#10;        // PartyListPanel&#13;&#10;        partyListPanel = new PartyListPanel(playerDescriptions);&#13;&#10;        var group = new MyGroupBox { Text = &quot; 小队顺序（拖拽调整）&quot; };&#13;&#10;        var panel = new GroupPanel();&#13;&#10;        mainPanel.Controls.Add(panel);&#13;&#10;        panel.Controls.Add(group);&#13;&#10;        group.Controls.Add(partyListPanel);&#13;&#10;    }&#13;&#10;&#13;&#10;    public static Font CreateFont(float size, params string[] fontFamilies)&#13;&#10;    {&#13;&#10;        foreach (var fontFamily in fontFamilies)&#13;&#10;        {&#13;&#10;            try { return new Font(fontFamily, size); }&#13;&#10;            catch (ArgumentException) { }&#13;&#10;        }&#13;&#10;        return SystemFonts.DefaultFont;&#13;&#10;    }&#13;&#10;&#13;&#10;    void btnSave_Click(object sender, EventArgs e)&#13;&#10;    {&#13;&#10;        partyListPanel.SaveToConfig();&#13;&#10;        RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &lt;se.10&gt;\n已保存小队列表。&quot;);&#13;&#10;        Close();&#13;&#10;    }&#13;&#10;&#13;&#10;    /// &lt;summary&gt; 读取配置，恢复表单布局，显示表单。&lt;/summary&gt;&#13;&#10;    public void Run()&#13;&#10;    {&#13;&#10;        partyListPanel.LoadFromConfig();&#13;&#10;        ResumeLayout();&#13;&#10;        ShowDialog();&#13;&#10;        Dispose();&#13;&#10;    }&#13;&#10;&#13;&#10;    class BottomTableLayoutPanel : TableLayoutPanel&#13;&#10;    {&#13;&#10;        public BottomTableLayoutPanel() : base()&#13;&#10;        {&#13;&#10;            Dock = DockStyle.Bottom;&#13;&#10;            RowCount = 1;&#13;&#10;            ColumnCount = 1;&#13;&#10;            ColumnStyles.Add(new ColumnStyle(SizeType.AutoSize));&#13;&#10;        }&#13;&#10;    }&#13;&#10;    class MyGroupBox : GroupBox&#13;&#10;    {&#13;&#10;        public MyGroupBox() : base()&#13;&#10;        {&#13;&#10;            Dock = DockStyle.Top;&#13;&#10;            AutoSize = true;&#13;&#10;            AutoSizeMode = AutoSizeMode.GrowAndShrink;&#13;&#10;            Margin = new Padding(20);&#13;&#10;        }&#13;&#10;    }&#13;&#10;    class MyButton : Button&#13;&#10;    {&#13;&#10;        public MyButton() : base()&#13;&#10;        {&#13;&#10;            Anchor = AnchorStyles.None;&#13;&#10;            AutoSize = true;&#13;&#10;            Margin = new Padding(5);&#13;&#10;            Padding = new Padding(5);&#13;&#10;        }&#13;&#10;    }&#13;&#10;    class BackgroundPanel : Panel&#13;&#10;    {&#13;&#10;        public BackgroundPanel() : base()&#13;&#10;        {&#13;&#10;            AutoSize = true;&#13;&#10;            AutoSizeMode = AutoSizeMode.GrowAndShrink;&#13;&#10;            Dock = DockStyle.Fill;&#13;&#10;            AutoScroll = true;&#13;&#10;        }&#13;&#10;    }&#13;&#10;    class GroupPanel : Panel&#13;&#10;    {&#13;&#10;        public GroupPanel() : base()&#13;&#10;        {&#13;&#10;            AutoSize = true;&#13;&#10;            AutoSizeMode = AutoSizeMode.GrowAndShrink;&#13;&#10;            Dock = DockStyle.Top;&#13;&#10;            Padding = new Padding(20, 20, 20, 0);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;}&#13;&#10;&#13;&#10;#endregion&#13;&#10;" ActionType="ExecuteScript">
                    <Condition Enabled="true" Grouping="Or">
                      <ConditionSingle Enabled="true" ExpressionL="${ecallback:小队列表}" ExpressionTypeL="String" ExpressionR="0" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                      <ConditionSingle Enabled="true" ExpressionL="${forceOpen}" ExpressionTypeL="String" ExpressionR="1" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="4" NamedCallbackName="PartyList" NamedCallbackParam="${d:PartyListPlayerDescs[${n: ${zoneid} ?? ${_ffxivzoneid} }]}" ActionType="NamedCallback">
                    <Condition Enabled="true" Grouping="Or">
                      <ConditionSingle Enabled="true" ExpressionL="${ev:PartyListForm_isRunning}" ExpressionTypeL="String" ExpressionR="0" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                      <ConditionSingle Enabled="true" ExpressionL="${forceOpen}" ExpressionTypeL="String" ExpressionR="1" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="5" LogMessageText="PartyList:MyIdx8:${v:myIdx}" LogProcess="True" ActionType="LogMessage">
                    <Condition Enabled="true" Grouping="Or">
                      <ConditionSingle Enabled="true" ExpressionL="${ev:myIdx}" ExpressionTypeL="String" ExpressionR="1" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                    </Condition>
                  </Action>
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Name="接收：团灭" Id="30acc2df-14f8-4c0b-a24f-2dacfcd68f73" RegularExpression="^.{15}\S+ 21:.{8}:4000000(?&lt;type&gt;[16])">
                <Actions>
                  <Action OrderNumber="1" LogMessageText="PartyList:Show:0:1:0" LogProcess="True" ActionType="LogMessage"/>
                </Actions>
                <Condition Enabled="true" Grouping="And">
                  <ConditionSingle Enabled="true" ExpressionL="${d:PartyListPlayerDescs[${_ffxivzoneid}]}" ExpressionTypeL="String" ExpressionR="" ExpressionTypeR="String" ConditionType="StringNotEqualCase"/>
                  <ConditionSingle Enabled="true" ExpressionL="${d:PartyListPlayerDescs[${_ffxivzoneid}]}" ExpressionTypeL="String" ExpressionR="Self" ExpressionTypeR="String" ConditionType="StringNotEqualCase"/>
                  <ConditionSingle Enabled="true" ExpressionL="${el:party}" ExpressionTypeL="String" ExpressionR="0" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                </Condition>
              </Trigger>
              <Trigger Enabled="true" Name="接收：文本指令　　/e party　（正确）" Id="2fd9d97a-3046-496c-9fb0-5c6b4312747e" RegularExpression="^.{15}\S+ 00:0038:: *[Pp][Aa][Rr][Tt][Yy] *(?&lt;force&gt; force)?$">
                <Actions>
                  <Action OrderNumber="1" ActionType="Placeholder" Description="条件：当前地图注册为全队模式（或使用 force 强制开启）" DescriptionOverride="True"/>
                  <Action OrderNumber="2" LogMessageText="PartyList:Show:1:1:${if: len(${force}) &gt; 0 ? 1 : 0 }" LogProcess="True" ActionType="LogMessage"/>
                </Actions>
                <Condition Enabled="true" Grouping="Or">
                  <ConditionSingle Enabled="true" ExpressionL="${force}" ExpressionTypeL="String" ExpressionR="" ExpressionTypeR="String" ConditionType="StringNotEqualCase"/>
                  <ConditionGroup Enabled="true" Grouping="And">
                    <ConditionSingle Enabled="true" ExpressionL="${d:PartyListPlayerDescs[${_ffxivzoneid}]}" ExpressionTypeL="String" ExpressionR="" ExpressionTypeR="String" ConditionType="StringNotEqualCase"/>
                    <ConditionSingle Enabled="true" ExpressionL="${d:PartyListPlayerDescs[${_ffxivzoneid}]}" ExpressionTypeL="String" ExpressionR="Self" ExpressionTypeR="String" ConditionType="StringNotEqualNocase"/>
                  </ConditionGroup>
                </Condition>
              </Trigger>
            </Triggers>
          </Folder>
          <Folder Id="fddd5d0f-0ff8-4f51-8c61-f4f058289eb5" Name="记录自身位置" Enabled="true">
            <Folders/>
            <Triggers>
              <Trigger Enabled="true" Sequential="True" Name="[F] Setter        PartyList:MyIdx8:[1-8]" Id="c5492c8b-d3b5-424a-a875-8c76eb1420e8" RegularExpression="^PartyList:MyIdx8:(?&lt;idx&gt;\d)">
                <Actions>
                  <Action OrderNumber="1" ActionType="Placeholder" Description="MyIdx8:序号" DescriptionOverride="True"/>
                  <Action OrderNumber="2" VariableOp="SetString" VariableName="myIdx" VariableExpression="${idx}" ActionType="Variable"/>
                  <Action OrderNumber="3" VariableOp="SetNumeric" VariableName="myIdx_isG1" VariableExpression="${v:myIdx} % 2 = 1" ActionType="Variable"/>
                  <Action OrderNumber="4" VariableOp="SetNumeric" VariableName="myIdx_isTH" VariableExpression="${v:myIdx} &lt;= 4" ActionType="Variable"/>
                  <Action OrderNumber="5" VariableOp="SetNumeric" VariableName="myIdx_isTM" VariableExpression="${v:myIdx} % 4 % 3 != 0" ActionType="Variable"/>
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Name="接收：团灭" Id="ca01efff-fa50-433d-9c36-a327f5135aff" RegularExpression="^.{15}\S+ 21:.{8}:4000000(?&lt;type&gt;[16])">
                <Actions>
                  <Action OrderNumber="1" ActionType="Placeholder" Asynchronous="False" Description="条件：已注册 zoneId =&gt; Self" DescriptionOverride="True"/>
                  <Action OrderNumber="2" LogMessageText="PartyList:MyIdxCheck:0:1:0:1:0:10::&lt;se.11&gt;" LogProcess="True" ActionType="LogMessage"/>
                </Actions>
                <Condition Enabled="true" Grouping="Or">
                  <ConditionSingle Enabled="true" ExpressionL="${d:PartyListPlayerDescs[${_ffxivzoneid}]}" ExpressionTypeL="String" ExpressionR="Self" ExpressionTypeR="String" ConditionType="StringEqualNocase"/>
                </Condition>
              </Trigger>
              <Trigger Enabled="true" Sequential="True" Name="接收：文本指令　　/e MT 　　（正确）" Id="02e85511-99d6-483b-a278-dbaad00ac70e" RegularExpression="^.{15}\S+ 00:0038:: *([MmSs][Tt]|[TtHhDd][1-4]) *$">
                <Actions>
                  <Action OrderNumber="1" ActionType="Placeholder" Asynchronous="False" Description="条件：当前地图未注册为全队模式" DescriptionOverride="True"/>
                  <Action OrderNumber="2" LogMessageText="PartyList:MyIdx8:${?d: &#13;&#10;  MT = 1, T1 = 1,  &#13;&#10;  ST = 2, T2 = 2, &#13;&#10;  H1 = 3, &#13;&#10;  H2 = 4, &#13;&#10;  D1 = 5, &#13;&#10;  D2 = 6, &#13;&#10;  D3 = 7, &#13;&#10;  D4 = 8  &#13;&#10;  [${f:toupper:$1}]&#13;&#10;}" LogProcess="True" ActionType="LogMessage"/>
                  <Action OrderNumber="3"/>
                  <Action OrderNumber="4" LogMessageText="PartyList:MyIdxCheck:1:1:1:1:5:10:&lt;se.10&gt;:&lt;se.11&gt;" LogProcess="True" LogProcessACT="True" ActionType="LogMessage"/>
                </Actions>
                <Condition Enabled="true" Grouping="Or">
                  <ConditionSingle Enabled="true" ExpressionL="${d:PartyListPlayerDescs[${_ffxivzoneid}]}" ExpressionTypeL="String" ExpressionR="Self" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                  <ConditionSingle Enabled="true" ExpressionL="${d:PartyListPlayerDescs[${_ffxivzoneid}]}" ExpressionTypeL="String" ExpressionR="" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                </Condition>
              </Trigger>
              <Trigger Enabled="true" Name="[F] 注册区域      PartyList:Register:[zoneid]:Self" Id="b800fe7b-baef-43e1-9e68-f40bae8fc8fb" RegularExpression="^PartyList:Register:(?&lt;zoneid&gt;\d+):Self">
                <Actions>
                  <Action OrderNumber="1" DictVariableOp="Set" DictVariableName="PartyListPlayerDescs" DictVariableKey="${zoneid}" DictVariableValue="Self" ActionType="DictVariable"/>
                  <Action OrderNumber="2" ActionType="Placeholder" Asynchronous="False" Description="如果当前处于要注册的地图：触发检查" DescriptionOverride="True"/>
                  <Action OrderNumber="3" LogMessageText="PartyList:MyIdxCheck:1:1:1:1:10:10:&lt;se.9&gt;:&lt;se.9&gt;" LogProcess="True" ActionType="LogMessage">
                    <Condition Enabled="true" Grouping="Or">
                      <ConditionSingle Enabled="true" ExpressionL="${zoneid}" ExpressionTypeL="String" ExpressionR="${_ffxivzoneid}" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                    </Condition>
                  </Action>
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Sequential="True" Name="[F] 检查或播报    PartyList:MyIdxCheck:..." Id="048572fa-78be-45ec-b48d-dcd26ab3d985" RegularExpression="^PartyList:MyIdxCheck:(?&lt;successTTS&gt;[01]):(?&lt;failTTS&gt;[01]):(?&lt;successEcho&gt;[01]):(?&lt;failEcho&gt;[01]):(?&lt;successHintTime&gt;[^:]+):(?&lt;failHintTime&gt;[^:]+):(?&lt;successSound&gt;[^:]*):(?&lt;failSound&gt;[^:]*)">
                <Actions>
                  <Action OrderNumber="1" VariableOp="SetNumeric" VariableName="tmp_success" VariableExpression="(0${v:myIdx} &gt; 0) &amp;&amp; (0${v:myIdx} &lt;= 8) &amp;&amp; (0${v:myIdx} % 1 = 0)" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="2" ActionType="Placeholder" Asynchronous="False" Description="fail" DescriptionOverride="True"/>
                  <Action OrderNumber="3" VariableOp="SetString" VariableName="tmp_hint" VariableExpression="尚未设置自身职能。&#13;&#10;可输入文本指令设置，大小写不限。&#13;&#10;如：　/e mt　　/e h1　　/e d4" ActionType="Variable" Asynchronous="False">
                    <Condition Enabled="true" Grouping="And">
                      <ConditionSingle Enabled="true" ExpressionL="${f:contain(&quot; &quot;):${_me.name}}" ExpressionTypeL="String" ExpressionR="0" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="4" VariableOp="SetString" VariableName="tmp_hint" VariableExpression="尚未設置自身職能。&#13;&#10;可輸入文本指令設置，大小写不限。&#13;&#10;如：　/e mt　　/e h1　　/e d4" ActionType="Variable" Asynchronous="False">
                    <Condition Enabled="true" Grouping="And">
                      <ConditionSingle Enabled="true" ExpressionL="${f:contain(&quot; &quot;):${_me.name}}" ExpressionTypeL="String" ExpressionR="1" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="5" UseTTSTextExpression="尚未设置职能，请查看聊天栏默语提示。" ActionType="UseTTS" Asynchronous="False">
                    <Condition Enabled="true" Grouping="And">
                      <ConditionSingle Enabled="true" ExpressionL="${v:tmp_success}" ExpressionTypeL="String" ExpressionR="0" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                      <ConditionSingle Enabled="true" ExpressionL="${failTTS}" ExpressionTypeL="String" ExpressionR="1" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="6" NamedCallbackName="command" NamedCallbackParam="/e ${failSound}&#13;&#10;${v:tmp_hint}" ActionType="NamedCallback" Asynchronous="False">
                    <Condition Enabled="true" Grouping="And">
                      <ConditionSingle Enabled="true" ExpressionL="${failEcho}" ExpressionTypeL="String" ExpressionR="1" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                      <ConditionSingle Enabled="true" ExpressionL="${v:tmp_success}" ExpressionTypeL="String" ExpressionR="0" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="7" NamedCallbackName="warn" NamedCallbackParam="${failHintTime}&#13;&#10;${v:tmp_hint}" ActionType="NamedCallback" Asynchronous="False">
                    <Condition Enabled="true" Grouping="And">
                      <ConditionSingle Enabled="true" ExpressionL="0${failHintTime}" ExpressionTypeL="String" ExpressionR="0" ExpressionTypeR="String" ConditionType="NumericGreater"/>
                      <ConditionSingle Enabled="true" ExpressionL="${v:tmp_success}" ExpressionTypeL="String" ExpressionR="0" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="8" ActionType="Placeholder" Asynchronous="False" Description="success" DescriptionOverride="True"/>
                  <Action OrderNumber="9" VariableOp="SetString" VariableName="tmp_hint" VariableExpression="已设置自身职能：${?l: MT, ST, H1, H2, D1, D2, D3, D4 [0${v:myIdx}]}&#13;&#10;如有误，可输入文本指令设置，大小写不限。&#13;&#10;如：　/e mt　　/e h1　　/e d4" ActionType="Variable" Asynchronous="False">
                    <Condition Enabled="true" Grouping="And">
                      <ConditionSingle Enabled="true" ExpressionL="${f:contain(&quot; &quot;):${_me.name}}" ExpressionTypeL="String" ExpressionR="0" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="10" VariableOp="SetString" VariableName="tmp_hint" VariableExpression="已設置自身職能：${?l: MT, ST, H1, H2, D1, D2, D3, D4 [0${v:myIdx}]}&#13;&#10;如有誤，可輸入文本指令設置，大小写不限。&#13;&#10;如：　/e mt　　/e h1　　/e d4" ActionType="Variable" Asynchronous="False">
                    <Condition Enabled="true" Grouping="And">
                      <ConditionSingle Enabled="true" ExpressionL="${f:contain(&quot; &quot;):${_me.name}}" ExpressionTypeL="String" ExpressionR="1" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="11" UseTTSTextExpression="已设置职能：${?l: MT, ST, H1, H2, D1, D2, D3, D4 [${v:myIdx}]}" ActionType="UseTTS" Asynchronous="False">
                    <Condition Enabled="true" Grouping="And">
                      <ConditionSingle Enabled="true" ExpressionL="${v:tmp_success}" ExpressionTypeL="String" ExpressionR="1" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                      <ConditionSingle Enabled="true" ExpressionL="${successTTS}" ExpressionTypeL="String" ExpressionR="1" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="12" NamedCallbackName="command" NamedCallbackParam="/e ${successSound}&#13;&#10;${v:tmp_hint}" ActionType="NamedCallback" Asynchronous="False">
                    <Condition Enabled="true" Grouping="And">
                      <ConditionSingle Enabled="true" ExpressionL="${successEcho}" ExpressionTypeL="String" ExpressionR="1" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                      <ConditionSingle Enabled="true" ExpressionL="${v:tmp_success}" ExpressionTypeL="String" ExpressionR="1" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="13" NamedCallbackName="hint" NamedCallbackParam="${successHintTime}&#13;&#10;${v:tmp_hint}" ActionType="NamedCallback" Asynchronous="False">
                    <Condition Enabled="true" Grouping="And">
                      <ConditionSingle Enabled="true" ExpressionL="0${successHintTime}" ExpressionTypeL="String" ExpressionR="0" ExpressionTypeR="String" ConditionType="NumericGreater"/>
                      <ConditionSingle Enabled="true" ExpressionL="${v:tmp_success}" ExpressionTypeL="String" ExpressionR="1" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="14" VariableName="tmp_hint" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="15" VariableName="tmp_success" ActionType="Variable" Asynchronous="False"/>
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Name="接收：倒计时" Id="73514acd-de69-4d09-aac8-240afd508bad" RegularExpression="^.{15}\S+ 10C:">
                <Actions>
                  <Action OrderNumber="1" ActionType="Placeholder" Asynchronous="False" Description="条件：已注册 zoneId =&gt; Self" DescriptionOverride="True"/>
                  <Action OrderNumber="2" LogMessageText="PartyList:MyIdxCheck:0:1:0:1:0:10::&lt;se.11&gt;" LogProcess="True" ActionType="LogMessage"/>
                </Actions>
                <Condition Enabled="true" Grouping="Or">
                  <ConditionSingle Enabled="true" ExpressionL="${d:PartyListPlayerDescs[${_ffxivzoneid}]}" ExpressionTypeL="String" ExpressionR="Self" ExpressionTypeR="String" ConditionType="StringEqualNocase"/>
                </Condition>
              </Trigger>
              <Trigger Enabled="true" Sequential="True" Name="接收：文本指令　　/e MT 　  （全队模式下提示错误）" Id="824c6d6d-6a67-4c47-bea6-02c448a065df" RegularExpression="^.{15}\S+ 00:0038:: *([MmSs][Tt]|[TtHhDd][1-4]) *$">
                <Actions>
                  <Action OrderNumber="1" ActionType="Placeholder" Description="条件：当前地图注册为全队模式" DescriptionOverride="True"/>
                  <Action OrderNumber="2" VariableOp="SetString" VariableName="tmp_hint" VariableExpression="当前地图需要设置全队顺序，而非自身职能顺序。&#13;&#10;请使用 /e party（应该会自动弹出窗口）。" ActionType="Variable">
                    <Condition Enabled="true" Grouping="And">
                      <ConditionSingle Enabled="true" ExpressionL="${f:contain(&quot; &quot;):${_me.name}}" ExpressionTypeL="String" ExpressionR="0" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="3" VariableOp="SetString" VariableName="tmp_hint" VariableExpression="当前地圖需要設置全隊順序，而非自身職能順序。&#13;&#10;請使用 /e party（應該会自動彈出窗口）。" ActionType="Variable">
                    <Condition Enabled="true" Grouping="And">
                      <ConditionSingle Enabled="true" ExpressionL="${f:contain(&quot; &quot;):${_me.name}}" ExpressionTypeL="String" ExpressionR="1" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="4" NamedCallbackName="command" NamedCallbackParam="/e &lt;se.11&gt;&#13;&#10;${v:tmp_hint}" ActionType="NamedCallback"/>
                  <Action OrderNumber="5" NamedCallbackName="warn" NamedCallbackParam="10&#13;&#10;${v:tmp_hint}" ActionType="NamedCallback"/>
                </Actions>
                <Condition Enabled="true" Grouping="And">
                  <ConditionSingle Enabled="true" ExpressionL="${d:PartyListPlayerDescs[${_ffxivzoneid}]}" ExpressionTypeL="String" ExpressionR="Self" ExpressionTypeR="String" ConditionType="StringNotEqualNocase"/>
                  <ConditionSingle Enabled="true" ExpressionL="${d:PartyListPlayerDescs[${_ffxivzoneid}]}" ExpressionTypeL="String" ExpressionR="" ExpressionTypeR="String" ConditionType="StringNotEqualNocase"/>
                </Condition>
              </Trigger>
            </Triggers>
          </Folder>
          <Folder FFXIVZoneFilterEnabled="True" FfxivZoneFilterRegularExpression="^997$" Id="e5093644-63ea-4665-9d39-86bb6f38c70a" Name="测试（真小鸟）" Enabled="false">
            <Folders/>
            <Triggers>
              <Trigger Enabled="true" Name="小队列表注册区域" Id="91055331-efde-46d9-8da4-32956e188039" RegularExpression="^.{15}\S+ 01:(?&lt;zoneId&gt;[^:]*):">
                <Actions>
                  <Action OrderNumber="1" LogMessageText="PartyList:Register:${n: 0x${zoneId} }:MT, ST, H1, H2, D1, D2, D3, D4" LogProcess="True" ActionType="LogMessage"/>
                </Actions>
              </Trigger>
            </Triggers>
          </Folder>
        </Folders>
        <Triggers>
          <Trigger Enabled="false" Name="使用说明（面向开发）" Id="cd4fd5b6-771b-43e7-bade-270e895303d5" RegularExpression="">
            <Actions>
              <Action OrderNumber="1" ActionType="Placeholder" Asynchronous="False" Description="首先通过触发器注册某副本的地图 ID" DescriptionOverride="True"/>
              <Action OrderNumber="2" ActionType="Placeholder" Asynchronous="False" Description="注册后可在进本、团灭、倒计时时自动触发提示" DescriptionOverride="True"/>
              <Action OrderNumber="3" ActionType="Placeholder" Asynchronous="False" Description="根据不同模式，用户可按提示设置自身或全队的职能顺序" DescriptionOverride="True"/>
              <Action OrderNumber="4" ActionType="Placeholder" Asynchronous="False" Description="支持两种模式：" DescriptionOverride="True"/>
              <Action OrderNumber="5" ActionType="Placeholder" Asynchronous="False" Description="1. 完整版" DescriptionOverride="True"/>
              <Action OrderNumber="6" ActionType="Placeholder" Asynchronous="False" Description="    将 PartyList:Register:[要注册的地图 ID]:[逗号分隔的自定义的全员描述] 发送为待解析的 ACT 日志行，即可注册。" DescriptionOverride="True"/>
              <Action OrderNumber="7" ActionType="Placeholder" Asynchronous="False" Description="    如你可以使用 M4s 副本的 01 行（ZoneChanged）触发，并发送：PartyList:Register:1132:MT, ST, H1, H2, D1, D2, D3, D4" DescriptionOverride="True"/>
              <Action OrderNumber="8" ActionType="Placeholder" Asynchronous="False" Description="    用户也可以使用 /e party 手动调用此 UI" DescriptionOverride="True"/>
              <Action OrderNumber="9" ActionType="Placeholder" Asynchronous="False" Description="  可使用的变量：" DescriptionOverride="True"/>
              <Action OrderNumber="10" ActionType="Placeholder" Asynchronous="False" Description="  · 列表 party：包含按顺序的八个 ID" DescriptionOverride="True"/>
              <Action OrderNumber="11" ActionType="Placeholder" Asynchronous="False" Description="  · 列表 pname：包含按顺序的八个名字（不建议在能使用 ID 的情况下使用）" DescriptionOverride="True"/>
              <Action OrderNumber="12" ActionType="Placeholder" Asynchronous="False" Description="  · 标量 myIdx：自身顺序，相当于 ${list:party.indexof(${_me.id})}" DescriptionOverride="True"/>
              <Action OrderNumber="13" ActionType="Placeholder" Asynchronous="False" Description="2. 单人版" DescriptionOverride="True"/>
              <Action OrderNumber="14" ActionType="Placeholder" Asynchronous="False" Description="    将 PartyList:Register:[要注册的地图 ID]:Self 发送为待解析的 ACT 日志行，即可注册。" DescriptionOverride="True"/>
              <Action OrderNumber="15" ActionType="Placeholder" Asynchronous="False" Description="    如你可以使用 M4s 副本的 01 行（ZoneChanged）触发，并发送：PartyList:Register:1132:Self" DescriptionOverride="True"/>
              <Action OrderNumber="16" ActionType="Placeholder" Asynchronous="False" Description="    用户需要使用 /e MT 等文本指令设置自身职能顺序" DescriptionOverride="True"/>
              <Action OrderNumber="17" ActionType="Placeholder" Asynchronous="False" Description="  可使用的变量：" DescriptionOverride="True"/>
              <Action OrderNumber="18" ActionType="Placeholder" Asynchronous="False" Description="   · 标量 myIdx：自身顺序" DescriptionOverride="True"/>
            </Actions>
          </Trigger>
          <Trigger Enabled="true" Name="[Debug] 模拟小队：/e setparty [自身idx] [总人数]" Id="fba6f66c-ecbe-4ed4-a27b-0b97da485cc1" RegularExpression="^.{15}\S+ 00:0038:: *(?i:setparty) +(?&lt;idx&gt;[1-8]) +(?&lt;all&gt;[1-8])$">
            <Actions>
              <Action OrderNumber="1" ListVariableOp="SetAll" ListVariableName="party" ListVariableExpression="10${n: ${_idx}*111111}" ListVariableIndex="${all}" ActionType="ListVariable" Asynchronous="False"/>
              <Action OrderNumber="2" ListVariableOp="Set" ListVariableName="party" ListVariableExpression="${_me.id}" ListVariableIndex="${idx}" ActionType="ListVariable" Asynchronous="False"/>
              <Action OrderNumber="3" VariableOp="SetString" VariableName="myIdx" VariableExpression="${idx}" ActionType="Variable" Asynchronous="False"/>
              <Action OrderNumber="4" LogMessageText="PartyList:MyIdx8:${idx}" LogProcess="True" ActionType="LogMessage" Asynchronous="False">
                <Condition Enabled="true" Grouping="Or">
                  <ConditionSingle Enabled="true" ExpressionL="${all}" ExpressionTypeL="String" ExpressionR="8" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                </Condition>
              </Action>
              <Action OrderNumber="5" UseTTSTextExpression="已设置调试小队" ActionType="UseTTS" Asynchronous="False"/>
            </Actions>
            <Condition Enabled="true" Grouping="Or">
              <ConditionSingle Enabled="true" ExpressionL="${idx}" ExpressionTypeL="String" ExpressionR="${all}" ExpressionTypeR="String" ConditionType="NumericLessEqual"/>
            </Condition>
          </Trigger>
        </Triggers>
      </Folder>
      <Folder Id="7dfe0658-c8f4-4da3-be3f-554ab1600b34" Name="延时咏唱" Enabled="true">
        <Folders>
          <Folder Id="0521ebd0-6564-46ee-bff6-4a89bfbe57b1" Name="BeepTimer" Enabled="true">
            <Folders/>
            <Triggers>
              <Trigger Enabled="true" Name="CountDown5" Id="46eeb4b1-4ed0-4eb1-ae43-9a0c8af32f93" RegularExpression="^(?i)cd5:(?&lt;delay&gt;[\d.]+)(?::(?&lt;duration&gt;[\d.]+))?">
                <Actions>
                  <Action OrderNumber="1" LogMessageText="CountDown5 的延迟至少应为 4 s，实际提供了 ${delay} s。" ActionType="LogMessage">
                    <Condition Enabled="true" Grouping="Or">
                      <ConditionSingle Enabled="true" ExpressionL="${delay}" ExpressionTypeL="String" ExpressionR="4" ExpressionTypeR="String" ConditionType="NumericLess"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="2" SystemBeepFreqExpression="freq(C6)" SystemBeepLengthExpression="(${duration} ?? 0.2) * 1000" ExecutionDelayExpression="1000 * ${delay} - 4000"/>
                  <Action OrderNumber="3" SystemBeepFreqExpression="freq(D6)" SystemBeepLengthExpression="(${duration} ?? 0.2) * 1000" ExecutionDelayExpression="1000"/>
                  <Action OrderNumber="4" SystemBeepFreqExpression="freq(E6)" SystemBeepLengthExpression="(${duration} ?? 0.2) * 1000" ExecutionDelayExpression="1000"/>
                  <Action OrderNumber="5" SystemBeepFreqExpression="freq(G6)" SystemBeepLengthExpression="(${duration} ?? 0.2) * 1000" ExecutionDelayExpression="1000"/>
                  <Action OrderNumber="6" SystemBeepFreqExpression="freq(C7)" SystemBeepLengthExpression="(${duration} ?? 0.2) * 1500" ExecutionDelayExpression="1000"/>
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Name="CountDown4" Id="c0303324-3324-474a-a779-b7e84f10966e" RegularExpression="^(?i)cd4:(?&lt;delay&gt;[\d.]+)(?::(?&lt;duration&gt;[\d.]+))?">
                <Actions>
                  <Action OrderNumber="1" LogMessageText="CountDown4 的延迟至少应为 3 s，实际提供了 ${delay} s。" ActionType="LogMessage">
                    <Condition Enabled="true" Grouping="Or">
                      <ConditionSingle Enabled="true" ExpressionL="${delay}" ExpressionTypeL="String" ExpressionR="3" ExpressionTypeR="String" ConditionType="NumericLess"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="2" SystemBeepFreqExpression="freq(C6)" SystemBeepLengthExpression="(${duration} ?? 0.2) * 1000" ExecutionDelayExpression="1000 * ${delay} - 3000"/>
                  <Action OrderNumber="3" SystemBeepFreqExpression="freq(E6)" SystemBeepLengthExpression="(${duration} ?? 0.2) * 1000" ExecutionDelayExpression="1000"/>
                  <Action OrderNumber="4" SystemBeepFreqExpression="freq(G6)" SystemBeepLengthExpression="(${duration} ?? 0.2) * 1000" ExecutionDelayExpression="1000"/>
                  <Action OrderNumber="5" SystemBeepFreqExpression="freq(C7)" SystemBeepLengthExpression="(${duration} ?? 0.2) * 1500" ExecutionDelayExpression="1000"/>
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Name="CountDown8" Id="c6976841-9692-4edb-a1fc-5fcbbc80edbd" RegularExpression="^(?i)cd8:(?&lt;delay&gt;[\d.]+)(?::(?&lt;duration&gt;[\d.]+))?">
                <Actions>
                  <Action OrderNumber="1" LogMessageText="CountDown8 的延迟至少应为 7 s，实际提供了 ${delay} s。" ActionType="LogMessage">
                    <Condition Enabled="true" Grouping="Or">
                      <ConditionSingle Enabled="true" ExpressionL="${delay}" ExpressionTypeL="String" ExpressionR="7" ExpressionTypeR="String" ConditionType="NumericLess"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="2" SystemBeepFreqExpression="freq(C6)" SystemBeepLengthExpression="(${duration} ?? 0.2) * 1000" ExecutionDelayExpression="1000 * ${delay} - 7000"/>
                  <Action OrderNumber="3" SystemBeepFreqExpression="freq(D6)" SystemBeepLengthExpression="(${duration} ?? 0.2) * 1000" ExecutionDelayExpression="1000"/>
                  <Action OrderNumber="4" SystemBeepFreqExpression="freq(E6)" SystemBeepLengthExpression="(${duration} ?? 0.2) * 1000" ExecutionDelayExpression="1000"/>
                  <Action OrderNumber="5" SystemBeepFreqExpression="freq(F6)" SystemBeepLengthExpression="(${duration} ?? 0.2) * 1000" ExecutionDelayExpression="1000"/>
                  <Action OrderNumber="6" SystemBeepFreqExpression="freq(G6)" SystemBeepLengthExpression="(${duration} ?? 0.2) * 1000" ExecutionDelayExpression="1000"/>
                  <Action OrderNumber="7" SystemBeepFreqExpression="freq(A6)" SystemBeepLengthExpression="(${duration} ?? 0.2) * 1000" ExecutionDelayExpression="1000"/>
                  <Action OrderNumber="8" SystemBeepFreqExpression="freq(B6)" SystemBeepLengthExpression="(${duration} ?? 0.2) * 1000" ExecutionDelayExpression="1000"/>
                  <Action OrderNumber="9" SystemBeepFreqExpression="freq(C7)" SystemBeepLengthExpression="(${duration} ?? 0.2) * 1500" ExecutionDelayExpression="1000"/>
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Name="DelayBeep" Id="74047707-e927-4753-95f6-746559d83cf0" RegularExpression="^(?i)Beep:(?&lt;delay&gt;[\d.]+)(?::(?&lt;freq&gt;[^:]*))?(?::(?&lt;duration&gt;[^:]*))?">
                <Actions>
                  <Action OrderNumber="1" SystemBeepFreqExpression="(${freq} ?? freq(C6))" SystemBeepLengthExpression="(${duration} ?? 200)" ExecutionDelayExpression="1000 * ${delay}"/>
                </Actions>
              </Trigger>
            </Triggers>
          </Folder>
        </Folders>
        <Triggers>
          <Trigger Enabled="true" Name="command" Id="e7129d16-a74a-463e-9c6d-07c39ace847a" RegularExpression="^(?i)cmd:(?&lt;sec&gt;[^:]+):(?&lt;value&gt;.+)$">
            <Actions>
              <Action OrderNumber="1" NamedCallbackName="command" NamedCallbackParam="${value}" UseTTSExclusive="False" ActionType="NamedCallback" ExecutionDelayExpression="(${sec}) * 1000"/>
            </Actions>
          </Trigger>
          <Trigger Enabled="true" Name="TTS" Id="186fb481-3ee0-4983-a4b1-a47d0fee2f94" RegularExpression="^(?i)tts:(?&lt;sec&gt;[^:]+):(?&lt;value&gt;.+)$">
            <Actions>
              <Action OrderNumber="1" UseTTSTextExpression="${value}" UseTTSExclusive="False" ActionType="UseTTS" ExecutionDelayExpression="(${sec}) * 1000"/>
            </Actions>
          </Trigger>
        </Triggers>
      </Folder>
      <Folder Id="2c835874-658c-4c2a-974a-f2d8b77a0f37" Name="鲶鱼精邮差扩展 v4.0.3" Enabled="true" RawEnvironmentVariables="version = 4.0.1&#13;&#10;trigversion = 1.2.0.739">
        <Folders>
          <Folder Id="e3dc5665-906e-49db-9327-cd135cad2122" Name="core" Enabled="true">
            <Folders>
              <Folder Id="ddab0f9c-6d37-46ca-a274-fe0614b53dc9" Name="接收日志" Enabled="true">
                <Folders/>
                <Triggers>
                  <Trigger Enabled="true" Sequential="True" Name="[F] 初始化日志" Id="34b75511-00cb-4a46-92db-dbcfeaf6de3f" RegularExpression="^PNE_Init:force:(?&lt;force&gt;0|1)">
                    <Actions>
                      <Action OrderNumber="1" LogMessageText="PNEBasic_Init" LogProcess="True" ActionType="LogMessage">
                        <Condition Enabled="true" Grouping="Or">
                          <ConditionSingle Enabled="true" ExpressionL="${ecallback:Hint}" ExpressionTypeL="String" ExpressionR="0" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                          <ConditionSingle Enabled="true" ExpressionL="${force}" ExpressionTypeL="String" ExpressionR="1" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                        </Condition>
                      </Action>
                      <Action OrderNumber="2" LogMessageText="Kairos_Init" LogProcess="True" ActionType="LogMessage" ExecutionDelayExpression="500">
                        <Condition Enabled="true" Grouping="Or">
                          <ConditionSingle Enabled="true" ExpressionL="${ecallback:SetPos}" ExpressionTypeL="String" ExpressionR="0" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                          <ConditionSingle Enabled="true" ExpressionL="${force}" ExpressionTypeL="String" ExpressionR="1" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                        </Condition>
                      </Action>
                      <Action OrderNumber="3" LogMessageText="KairosPro_Init" LogProcess="True" ActionType="LogMessage" ExecutionDelayExpression="500">
                        <Condition Enabled="true" Grouping="Or">
                          <ConditionSingle Enabled="true" ExpressionL="${ecallback:Exec}" ExpressionTypeL="String" ExpressionR="0" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                          <ConditionSingle Enabled="true" ExpressionL="${force}" ExpressionTypeL="String" ExpressionR="1" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                        </Condition>
                      </Action>
                    </Actions>
                  </Trigger>
                  <Trigger Enabled="true" Sequential="True" Name="鲶鱼精邮差注入成功" Id="f4ed6467-9bb8-480d-9ae4-cd3be3ec96e3" RegularExpression="^.{15}\S+ 00:FFFF:PostNamazu:Attached" PrevActionsRefire="Deny" PeriodRefire="Deny" RefirePeriodExpression="5000">
                    <Actions>
                      <Action OrderNumber="1" LogMessageText="PNE_Init:force:1" LogProcess="True" ActionType="LogMessage"/>
                      <Action OrderNumber="2" LogMessageText="PNE_Init:force:0" LogProcess="True" ActionType="LogMessage" ExecutionDelayExpression="10000"/>
                      <Action OrderNumber="3" LogMessageText="PNE_Init:force:0" LogProcess="True" ActionType="LogMessage" ExecutionDelayExpression="20000"/>
                      <Action OrderNumber="4" LogMessageText="PNE_Init:force:0" LogProcess="True" ActionType="LogMessage" ExecutionDelayExpression="30000"/>
                    </Actions>
                  </Trigger>
                </Triggers>
              </Folder>
              <Folder Id="2919b81d-dc7f-40eb-9631-fabc4d5b47e2" Name="接收文本指令" Enabled="true">
                <Folders/>
                <Triggers>
                  <Trigger Enabled="true" Name="Scaling" Id="e92df3c8-ac4d-4161-be59-a83ca842bdc4" RegularExpression="^.{15}\S+ 00:0038::scale +(?&lt;scales&gt;.+)$">
                    <Actions>
                      <Action OrderNumber="1" VariableOp="SetString" VariableName="tmp_address" VariableExpression="${_entity[${_me.targetid}].address}" ActionType="Variable" Asynchronous="False"/>
                      <Action OrderNumber="2" VariableOp="SetString" VariableName="tmp_address" VariableExpression="${_me.address}" ActionType="Variable" Asynchronous="False">
                        <Condition Enabled="true" Grouping="Or">
                          <ConditionSingle Enabled="true" ExpressionL="0${v:tmp_address}" ExpressionTypeL="Numeric" ExpressionR="0" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                        </Condition>
                      </Action>
                      <Action OrderNumber="3" NamedCallbackName="ObjectScaling" NamedCallbackParam="${v:tmp_address}, ${f:replace(&quot; &quot;, &quot;,&quot;):${scales}}" ActionType="NamedCallback" Asynchronous="False"/>
                      <Action OrderNumber="4" VariableName="tmp_address" ActionType="Variable" Asynchronous="False"/>
                    </Actions>
                  </Trigger>
                  <Trigger Enabled="true" Name="SetHighlightColor" Id="47368516-eaf5-403e-ae04-553676b54555" RegularExpression="^.{15}\S+ 00:0038::highlight (?&lt;color&gt;\d+)$">
                    <Actions>
                      <Action OrderNumber="1" VariableOp="SetString" VariableName="tmp_address" VariableExpression="${_entity[${_me.targetid}].address}" ActionType="Variable" Asynchronous="False"/>
                      <Action OrderNumber="2" VariableOp="SetString" VariableName="tmp_address" VariableExpression="${_me.address}" ActionType="Variable" Asynchronous="False">
                        <Condition Enabled="true" Grouping="Or">
                          <ConditionSingle Enabled="true" ExpressionL="0${v:tmp_address}" ExpressionTypeL="Numeric" ExpressionR="0" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                        </Condition>
                      </Action>
                      <Action OrderNumber="3" NamedCallbackName="SetHighlightColor" NamedCallbackParam="${v:tmp_address}, ${color}" ActionType="NamedCallback" Asynchronous="False"/>
                      <Action OrderNumber="4" VariableName="tmp_address" ActionType="Variable" Asynchronous="False"/>
                    </Actions>
                  </Trigger>
                  <Trigger Enabled="true" Name="SetStatusLoopVfx" Id="e542486d-58fc-44ae-86a9-1fb860841249" RegularExpression="^.{15}\S+ 00:0038::vfx (?&lt;vfxid&gt;.+)$">
                    <Actions>
                      <Action OrderNumber="1" VariableOp="SetString" VariableName="tmp_address" VariableExpression="${_entity[${_me.targetid}].address}" ActionType="Variable" Asynchronous="False"/>
                      <Action OrderNumber="2" VariableOp="SetString" VariableName="tmp_address" VariableExpression="${_me.address}" ActionType="Variable" Asynchronous="False">
                        <Condition Enabled="true" Grouping="Or">
                          <ConditionSingle Enabled="true" ExpressionL="0${v:tmp_address}" ExpressionTypeL="Numeric" ExpressionR="0" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                        </Condition>
                      </Action>
                      <Action OrderNumber="3" NamedCallbackName="SetStatusLoopVfx" NamedCallbackParam="${v:tmp_address}, ${vfxid}" ActionType="NamedCallback" Asynchronous="False"/>
                      <Action OrderNumber="4" VariableName="tmp_address" ActionType="Variable" Asynchronous="False"/>
                    </Actions>
                  </Trigger>
                  <Trigger Enabled="true" Name="Redraw" Id="97c50022-361f-4248-806a-9371d591b90b" RegularExpression="^.{15}\S+ 00:0038::redraw$">
                    <Actions>
                      <Action OrderNumber="1" VariableOp="SetString" VariableName="tmp_address" VariableExpression="${_entity[${_me.targetid}].address}" ActionType="Variable" Asynchronous="False"/>
                      <Action OrderNumber="2" VariableOp="SetString" VariableName="tmp_address" VariableExpression="${_me.address}" ActionType="Variable" Asynchronous="False">
                        <Condition Enabled="true" Grouping="Or">
                          <ConditionSingle Enabled="true" ExpressionL="0${v:tmp_address}" ExpressionTypeL="Numeric" ExpressionR="0" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                        </Condition>
                      </Action>
                      <Action OrderNumber="3" NamedCallbackName="Redraw" NamedCallbackParam="${v:tmp_address}" ActionType="NamedCallback" Asynchronous="False"/>
                      <Action OrderNumber="4" VariableName="tmp_address" ActionType="Variable" Asynchronous="False"/>
                    </Actions>
                  </Trigger>
                  <Trigger Enabled="true" Name="LockOn" Id="287ea735-7fa5-4124-b24f-87d7efd383da" RegularExpression="^.{15}\S+ 00:0038::lockon (?&lt;vfxname&gt;.+)$">
                    <Actions>
                      <Action OrderNumber="1" VariableOp="SetString" VariableName="tmp_address" VariableExpression="${_entity[${_me.targetid}].address}" ActionType="Variable" Asynchronous="False"/>
                      <Action OrderNumber="2" VariableOp="SetString" VariableName="tmp_address" VariableExpression="${_me.address}" ActionType="Variable" Asynchronous="False">
                        <Condition Enabled="true" Grouping="Or">
                          <ConditionSingle Enabled="true" ExpressionL="0${v:tmp_address}" ExpressionTypeL="Numeric" ExpressionR="0" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                        </Condition>
                      </Action>
                      <Action OrderNumber="3" NamedCallbackName="LockOn" NamedCallbackParam="${v:tmp_address}, ${vfxname}" ActionType="NamedCallback" Asynchronous="False"/>
                      <Action OrderNumber="4" VariableName="tmp_address" ActionType="Variable" Asynchronous="False"/>
                    </Actions>
                  </Trigger>
                  <Trigger Enabled="true" Name="Hint / Warn" Id="11524911-3213-43c4-aaaa-99581c23ba8b" RegularExpression="^.{15}\S+ 00:0038::(?i) *(?&lt;type&gt;hint|warn) +(?&lt;t&gt;[\d.]+) (?&lt;data&gt;.+)">
                    <Actions>
                      <Action OrderNumber="1" NamedCallbackName="${f:tolower:${type}}" NamedCallbackParam="${n:${t}}&#13;&#10;${data}" ActionType="NamedCallback" Asynchronous="False"/>
                    </Actions>
                  </Trigger>
                  <Trigger Enabled="true" Name="Quit" Id="c5b9e372-cd66-4a0b-8e36-68b0e2c75f67" RegularExpression="^.{15}\S+ 00:0038::(?i) *quit *$">
                    <Actions>
                      <Action OrderNumber="1" NamedCallbackName="QuitInstance" NamedCallbackParam="0" ActionType="NamedCallback" Asynchronous="False"/>
                      <Action OrderNumber="2" NamedCallbackName="QuitInstance" NamedCallbackParam="1" ActionType="NamedCallback" Asynchronous="False"/>
                    </Actions>
                  </Trigger>
                  <Trigger Enabled="true" Name="Channeling" Id="8b76d969-6b93-41c9-9feb-4da88179ddaa" RegularExpression="^.{15}\S+ 00:0038::channeling +(?&lt;vfxname&gt;.+?) *$">
                    <Actions>
                      <Action OrderNumber="1" NamedCallbackName="Channeling" NamedCallbackParam="${_me.address}, ${_entity[${_me.targetid}].address}, ${f:replace(&quot; &quot;, &quot;,&quot;):${vfxname}}" ActionType="NamedCallback">
                        <Condition Enabled="true" Grouping="And">
                          <ConditionSingle Enabled="true" ExpressionL="0${_entity[${_me.targetid}].address}" ExpressionTypeL="Numeric" ExpressionR="0" ExpressionTypeR="String" ConditionType="StringNotEqualCase"/>
                        </Condition>
                      </Action>
                    </Actions>
                  </Trigger>
                  <Trigger Enabled="true" Name="FoV" Id="fba28a99-9065-41e2-8fbd-513a183b03f6" RegularExpression="^.{15}\S+ 00:0038::(?i) *fov +(?&lt;fov&gt;.+)*$">
                    <Actions>
                      <Action OrderNumber="1" NamedCallbackName="SetCameraParams" NamedCallbackParam="FoV = ${n: ${fov}}" ActionType="NamedCallback"/>
                    </Actions>
                  </Trigger>
                  <Trigger Enabled="true" Name="Sight" Id="7222b674-e64e-4f5d-96d7-b89c8ed26e5e" RegularExpression="^.{15}\S+ 00:0038::(?i) *sight +(?&lt;h&gt;[^ ]*) +(?&lt;v&gt;[^ ]*) *$">
                    <Actions>
                      <Action OrderNumber="1" NamedCallbackName="SetCameraParams" NamedCallbackParam="AngleH = ${n: ${h}}&#13;&#10;AngleV = ${n: ${v}}&#13;&#10;MinAngleV = -π/2 + 0.002&#13;&#10;MaxAngleV = π/2 - 0.002" ActionType="NamedCallback"/>
                    </Actions>
                  </Trigger>
                  <Trigger Enabled="true" Name="MapEffect /e map 00020001:00" Id="1f93e876-6524-45fd-bb15-3b9fc8bd5d97" RegularExpression="^.{15}\S+ 00:0038::(?i)map(?:effect)? (.{8}:.{2})">
                    <Actions>
                      <Action OrderNumber="1" NamedCallbackName="MapEffect" NamedCallbackParam="$1" ActionType="NamedCallback"/>
                      <Action OrderNumber="2"/>
                    </Actions>
                  </Trigger>
                  <Trigger Enabled="true" Name="MapEffect /e map 0100 1F" Id="cccfa10a-1c92-41d0-ad0e-45519aa53a6e" RegularExpression="^.{15}\S+ 00:0038::(?i)map(?:effect)? +([01248]{1,4}) +([0-9A-F]{1,2})">
                    <Actions>
                      <Action OrderNumber="1" NamedCallbackName="MapEffect" NamedCallbackParam="${n: 0x$2}, 1, ${n: 0x$1}" ActionType="NamedCallback"/>
                      <Action OrderNumber="2"/>
                    </Actions>
                  </Trigger>
                  <Trigger Enabled="true" Name="CastVfx" Id="f6b67755-d32b-4ac0-95b4-ccb794b6f870" RegularExpression="^.{15}\S+ 00:0038::castvfx +(?&lt;vfxname&gt;.+?) *$">
                    <Actions>
                      <Action OrderNumber="1" NamedCallbackName="CastVfx" NamedCallbackParam="${_me.address}, ${_entity[${_me.targetid}].address}, ${f:replace(&quot; &quot;, &quot;,&quot;):${vfxname}}" ActionType="NamedCallback">
                        <Condition Enabled="true" Grouping="And">
                          <ConditionSingle Enabled="true" ExpressionL="0${_entity[${_me.targetid}].address}" ExpressionTypeL="Numeric" ExpressionR="0" ExpressionTypeR="String" ConditionType="StringNotEqualCase"/>
                        </Condition>
                      </Action>
                      <Action OrderNumber="2" NamedCallbackName="CastVfx" NamedCallbackParam="${_me.address}, ${_me.address}, ${f:replace(&quot; &quot;, &quot;,&quot;):${vfxname}}" ActionType="NamedCallback">
                        <Condition Enabled="true" Grouping="And">
                          <ConditionSingle Enabled="true" ExpressionL="0${_entity[${_me.targetid}].address}" ExpressionTypeL="Numeric" ExpressionR="0" ExpressionTypeR="String" ConditionType="NumericEqual"/>
                        </Condition>
                      </Action>
                    </Actions>
                  </Trigger>
                  <Trigger Enabled="true" Name="Omen" Id="ea9f816c-eaac-4f6d-9234-8ff529945686" RegularExpression="^.{15}\S+ 00:0038::(?i) *omen +(?&lt;vfxname&gt;.+?) *$">
                    <Actions>
                      <Action OrderNumber="1" NamedCallbackName="Omen" NamedCallbackParam="${?l:${f:replace(&quot; &quot;, &quot;,&quot;):${vfxname}}[1]}, ${n: ${?l:${f:replace(&quot; &quot;, &quot;,&quot;):${vfxname}}[2]} ?? 3}, ${_me.pos, h}, 5" ActionType="NamedCallback">
                        <Condition Enabled="true" Grouping="Or">
                          <ConditionSingle Enabled="true" ExpressionL="${vfxname} ?? -1" ExpressionTypeL="Numeric" ExpressionR="0" ExpressionTypeR="String" ConditionType="NumericLess"/>
                        </Condition>
                      </Action>
                    </Actions>
                  </Trigger>
                  <Trigger Enabled="true" Name="/e SB 10" Id="fd8a66e9-3746-4d1a-bfac-e461f7c3f285" RegularExpression="^.{15}\S+ 00:0038::(?i) *sb(?: +(?&lt;scale&gt;[\d.]+))? *$" PrevActions="Interrupt">
                    <Actions>
                      <Action OrderNumber="1" VariableOp="SetString" VariableName="x" VariableExpression="${_me.x}" ActionType="Variable" Asynchronous="False"/>
                      <Action OrderNumber="2" VariableOp="SetString" VariableName="y" VariableExpression="${_me.y}" ActionType="Variable" Asynchronous="False"/>
                      <Action OrderNumber="3" VariableOp="SetString" VariableName="z" VariableExpression="${_me.z}" ActionType="Variable" Asynchronous="False"/>
                      <Action OrderNumber="4" VariableOp="SetString" VariableName="h" VariableExpression="${_me.h}" ActionType="Variable" Asynchronous="False"/>
                      <Action OrderNumber="5" VariableOp="SetNumeric" VariableName="k" VariableExpression="(${scale} ?? 1) * 0.6" ActionType="Variable" Asynchronous="False"/>
                      <Action OrderNumber="6" VariableOp="SetNumeric" VariableName="t" VariableExpression="10" ActionType="Variable" Asynchronous="False"/>
                      <Action OrderNumber="7" NamedCallbackName="Omen" NamedCallbackParam="gl_fan270_1005af, ${v:t}, ${n: ${v:x} - (-5) * ${v:k} * cos(${v:h}) - (-10) * ${v:k} * sin(${v:h})}, ${n:${v:y} + (-5) * ${v:k} * sin(${v:h}) - (-10) * ${v:k} * cos(${v:h})}, ${v:z}, ${v:h} + π/4, ${v:k} * 4" ActionType="NamedCallback"/>
                      <Action OrderNumber="8" NamedCallbackName="Omen" NamedCallbackParam="gl_fan270_1005af, ${v:t}, ${n: ${v:x} - (-5) * ${v:k} * cos(${v:h}) - (-4) * ${v:k} * sin(${v:h})}, ${n:${v:y} + (-5) * ${v:k} * sin(${v:h}) - (-4) * ${v:k} * cos(${v:h})}, ${v:z}, ${v:h} + 5 * π/4, ${v:k} * 4" ActionType="NamedCallback"/>
                      <Action OrderNumber="9" NamedCallbackName="Omen" NamedCallbackParam="er_general02f, ${v:t}, ${n: ${v:x} - (1) * ${v:k} * cos(${v:h}) - (-7) * ${v:k} * sin(${v:h})}, ${n:${v:y} + (1) * ${v:k} * sin(${v:h}) - (-7) * ${v:k} * cos(${v:h})}, ${v:z}, ${v:h} - π/2, ${v:k} * 7, ${v:k} * 2" ActionType="NamedCallback"/>
                      <Action OrderNumber="10" NamedCallbackName="Omen" NamedCallbackParam="er_general02f, ${v:t}, ${n: ${v:x} - (3) * ${v:k} * cos(${v:h}) - (-7) * ${v:k} * sin(${v:h})}, ${n:${v:y} + (3) * ${v:k} * sin(${v:h}) - (-7) * ${v:k} * cos(${v:h})}, ${v:z}, ${v:h} - π/2, ${v:k} * 1, ${v:k} * 2" ActionType="NamedCallback"/>
                      <Action OrderNumber="11" NamedCallbackName="Omen" NamedCallbackParam="er_general02f, ${v:t}, ${n: ${v:x} - (3) * ${v:k} * cos(${v:h}) - (-1) * ${v:k} * sin(${v:h})}, ${n:${v:y} + (3) * ${v:k} * sin(${v:h}) - (-1) * ${v:k} * cos(${v:h})}, ${v:z}, ${v:h} - π/2, ${v:k} * 1, ${v:k} * 2" ActionType="NamedCallback"/>
                      <Action OrderNumber="12" NamedCallbackName="Omen" NamedCallbackParam="er_general02f, ${v:t}, ${n: ${v:x} - (3) * ${v:k} * cos(${v:h}) - (-13) * ${v:k} * sin(${v:h})}, ${n:${v:y} + (3) * ${v:k} * sin(${v:h}) - (-13) * ${v:k} * cos(${v:h})}, ${v:z}, ${v:h} - π/2, ${v:k} * 1, ${v:k} * 2" ActionType="NamedCallback"/>
                      <Action OrderNumber="13" NamedCallbackName="Omen" NamedCallbackParam="er_gl_fan100_o1v, ${v:t}, ${n: ${v:x} - (5) * ${v:k} * cos(${v:h}) - (-4) * ${v:k} * sin(${v:h})}, ${n:${v:y} + (5) * ${v:k} * sin(${v:h}) - (-4) * ${v:k} * cos(${v:h})}, ${v:z}, ${v:h} - 50°, ${v:k} * 4" ActionType="NamedCallback"/>
                      <Action OrderNumber="14" NamedCallbackName="Omen" NamedCallbackParam="er_gl_fan100_o1v, ${v:t}, ${n: ${v:x} - (5) * ${v:k} * cos(${v:h}) - (-4) * ${v:k} * sin(${v:h})}, ${n:${v:y} + (5) * ${v:k} * sin(${v:h}) - (-4) * ${v:k} * cos(${v:h})}, ${v:z}, ${v:h} - 130°, ${v:k} * 4" ActionType="NamedCallback"/>
                      <Action OrderNumber="15" NamedCallbackName="Omen" NamedCallbackParam="er_gl_fan100_o1v, ${v:t}, ${n: ${v:x} - (5) * ${v:k} * cos(${v:h}) - (-10) * ${v:k} * sin(${v:h})}, ${n:${v:y} + (5) * ${v:k} * sin(${v:h}) - (-10) * ${v:k} * cos(${v:h})}, ${v:z}, ${v:h} - 50°, ${v:k} * 4" ActionType="NamedCallback"/>
                      <Action OrderNumber="16" NamedCallbackName="Omen" NamedCallbackParam="er_gl_fan100_o1v, ${v:t}, ${n: ${v:x} - (5) * ${v:k} * cos(${v:h}) - (-10) * ${v:k} * sin(${v:h})}, ${n:${v:y} + (5) * ${v:k} * sin(${v:h}) - (-10) * ${v:k} * cos(${v:h})}, ${v:z}, ${v:h} - 130°, ${v:k} * 4" ActionType="NamedCallback"/>
                      <Action OrderNumber="17" VariableOp="UnsetRegex" VariableName="^[xyzhkt]$" ActionType="Variable" ExecutionDelayExpression="1000"/>
                    </Actions>
                  </Trigger>
                  <Trigger Enabled="true" Name="Polygon" Id="49d41e3d-4828-4b90-b95f-f5719baad197" RegularExpression="^.{15}\S+ 00:0038::(?i)polygon +(\d+)">
                    <Actions>
                      <Action OrderNumber="1" VariableOp="SetNumeric" VariableName="dθ" VariableExpression="random(0, 60) / 180 * π" ActionType="Variable" Asynchronous="False"/>
                      <Action OrderNumber="2" ListVariableOp="SetAll" ListVariableName="test" ListVariableExpression="${n: 15 * sin(${_idx} * 2 * π / $1 + ${v:dθ}) + random(-15, 15) / $1}, ${n: 15 * cos(${_idx} * 2 * π / $1 + ${v:dθ})+ random(-15, 15) / $1}" ListVariableIndex="$1" ActionType="ListVariable" Asynchronous="False"/>
                      <Action OrderNumber="3" NamedCallbackName="PictoACT" NamedCallbackParam="Action: Triangulate&#13;&#10;Tag: test&#13;&#10;Points: 0,0; ${l:test.join(&quot;;&quot;)}; ${l:test[1]}+0.01&#13;&#10;t: sqrt($1)" ActionType="NamedCallback"/>
                    </Actions>
                  </Trigger>
                </Triggers>
              </Folder>
              <Folder Id="35e45d3b-416b-4aa9-a3d3-9da58c0279c1" Name="自动刷新" Enabled="true">
                <Folders/>
                <Triggers>
                  <Trigger Enabled="true" Name="Camera" Id="ac2f9b78-cdee-4e24-8742-e638eadf6034" RegularExpression="^.{15}\S+ 01:">
                    <Actions>
                      <Action OrderNumber="1" NamedCallbackName="SetCameraParams" NamedCallbackParam="Apply" ActionType="NamedCallback">
                        <Condition Enabled="true" Grouping="Or">
                          <ConditionSingle Enabled="true" ExpressionL="${pd:PNE_cfg[camera_enabled]}" ExpressionTypeL="String" ExpressionR="1" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                        </Condition>
                      </Action>
                    </Actions>
                  </Trigger>
                  <Trigger Enabled="true" Name="InstanceAfkTimer" Id="c847c59f-9ab6-4cb6-892c-d92bef5bd527" RegularExpression="^.{15}\S+ 01:|(?&lt;update&gt;PNE_cfgUpdate)">
                    <Actions>
                      <Action OrderNumber="1" NamedCallbackName="DisableInstanceAfkTimer" NamedCallbackParam="${pd:PNE_cfg[InstanceAfkTimer]}" ActionType="NamedCallback"/>
                    </Actions>
                    <Condition Enabled="true" Grouping="Or">
                      <ConditionSingle Enabled="true" ExpressionL="${pd:PNE_cfg[InstanceAfkTimer]}" ExpressionTypeL="String" ExpressionR="1" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                      <ConditionSingle Enabled="true" ExpressionL="${update}" ExpressionTypeL="String" ExpressionR="1" ExpressionTypeR="String" ConditionType="StringEqualNocase"/>
                    </Condition>
                  </Trigger>
                </Triggers>
              </Folder>
            </Folders>
            <Triggers>
              <Trigger Enabled="true" Sequential="True" Name="注册回调" Id="96a97c24-58e5-4b38-8a56-c727b9deb604" RegularExpression="^PNE_Init">
                <Actions>
                  <Action OrderNumber="1" ExecScriptExpression="using System.Windows.Forms;&#13;&#10;using System.Threading;&#13;&#10;using Triggernometry;&#13;&#10;&#13;&#10;void Log(string msg) =&gt; Triggernometry.Interpreter.StaticHelpers.Log(RealPlugin.DebugLevelEnum.Warning, msg);&#13;&#10;void Error(string msg) =&gt; Triggernometry.Interpreter.StaticHelpers.Log(RealPlugin.DebugLevelEnum.Error, msg);&#13;&#10;&#13;&#10;if (new Version(&quot;${_pluginversion}&quot;) &lt; new Version(&quot;${env:trigversion}&quot;))&#13;&#10;{&#13;&#10;    Error(&quot;[高级标点工具箱] 当前触发器版本 ${_pluginversion}，需要更新至 ${env:trigversion}&quot;);&#13;&#10;}" ActionType="ExecuteScript" Asynchronous="False" Description="检测鲶鱼精版本" DescriptionOverride="True"/>
                  <Action OrderNumber="2" ExecScriptExpression="using System;&#13;&#10;using Triggernometry;&#13;&#10;using Triggernometry.PluginBridges;&#13;&#10;using Triggernometry.PluginBridges.BridgeNamazu;&#13;&#10;&#13;&#10;/* Sideload example 版本更新后可覆写偏移或扫描方法等&#13;&#10;var module = BridgeNamazu.GetModule&lt;EntityModule&gt;();&#13;&#10;module.PosOffset = () =&gt; BridgeNamazu.NamazuPlugin.IsCN ? 0x74 : 0x70;&#13;&#10;module.ScanMethod = () =&gt; { module.GetStatusIndexPtr = ModuleBase.Scanner.ScanText(&quot;xxx&quot;); };&#13;&#10;*/&#13;&#10;&#13;&#10;BridgeNamazu.InitializeModules();&#13;&#10;Interpreter.StaticHelpers.Log(RealPlugin.DebugLevelEnum.Custom, $&quot;[鲶鱼精邮差扩展] 初始化成功。&quot;);" ActionType="ExecuteScript" Description="鲶鱼精邮差扩展【注册回调】" DescriptionOverride="True">
                    <Condition Enabled="true" Grouping="Or">
                      <ConditionSingle Enabled="true" ExpressionL="${ecallback:hint}" ExpressionTypeL="String" ExpressionR="0" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                    </Condition>
                  </Action>
                </Actions>
              </Trigger>
              <Trigger Enabled="false" Name="更新提示 4.0.0" Id="3308bd3f-262d-4b2a-9c80-31b981557495" RegularExpression="^." PrevActionsRefire="Deny" PeriodRefire="Deny" RefirePeriodExpression="30000">
                <Actions>
                  <Action OrderNumber="1" MessageBoxIconType="Information" MessageBoxText="[鲶鱼精邮差扩展]&#13;&#10;&#13;&#10;已更新至 v4.0。&#13;&#10;&#13;&#10;需配合最新版触发器及鲶鱼精邮差使用，&#13;&#10;正常情况下可自动更新。&#13;&#10;&#13;&#10;使用说明详见 [远程触发器] - 运行支持库 - 鲶鱼精邮差扩展。&#13;&#10;&#13;&#10;更新内容：&#13;&#10;· 整体重构，现已支持 CafeACT。&#13;&#10;· 增加了静态特效绘制功能（如 AoE 范围特效）。&#13;&#10;· 增加了相机参数调整的配置 UI。&#13;&#10;&#13;&#10;（以下面向开发者）&#13;&#10;· 快捷退本的 Quit 回调现改名为 QuitInstance。&#13;&#10;· 绝大多数回调现支持智能解析数值：&#13;&#10;  - 数值类参数可使用数学表达式，无需套一层数值解析。&#13;&#10;  - ID 参数可使用十六进制或十进制。&#13;&#10;· 添加了类似于高级标点工具箱的特效绘制回调 PictoACT（开发中）&#13;&#10;· 可能会用到的相关方法均位于命名空间 Triggernometry.PluginBridges.BridgeNamazu，可在脚本中调用。" ActionType="MessageBox"/>
                  <Action OrderNumber="2" TriggerOp="DisableTrigger" TriggerId="3308bd3f-262d-4b2a-9c80-31b981557495" ActionType="Trigger"/>
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Name="倒数自检" Id="555f32d7-bc96-4dc9-beca-515612875b01" RegularExpression="^.{15}\S+ 104:.:1:.:1|^.{15}\S+ 10C:[^:]*:[^:]*:(?&lt;cd&gt;[^:]*):00?:" PrevActionsRefire="Deny" PeriodRefire="Deny" RefirePeriodExpression="31000">
                <Actions>
                  <Action OrderNumber="1" NamedCallbackName="PictoACT" NamedCallbackParam="Omen: Circle&#13;&#10;t: 0.1&#13;&#10;Scale: 0.01&#13;&#10;Pos: ${_me.Pos}" ActionType="NamedCallback"/>
                  <Action OrderNumber="2" NamedCallbackName="Channeling" NamedCallbackParam="${_me.Address}, ${_me.Address}, chn_dark001f, 0.1" ActionType="NamedCallback"/>
                </Actions>
              </Trigger>
            </Triggers>
          </Folder>
        </Folders>
        <Triggers>
          <Trigger Enabled="true" Sequential="True" Name="配置界面（特效类选项暂时只是摆设）" Id="98fbb5d2-fda7-4703-aff6-bb7b54e56abd" RegularExpression="^.{15}\S+ 00:0038::(?i) *cfg +pne *$">
            <Actions>
              <Action OrderNumber="1" ExecScriptExpression="using Triggernometry.PluginBridges.BridgeNamazu;&#13;&#10;BridgeNamazu.ShowConfig();" ActionType="ExecuteScript">
                <Condition Enabled="true" Grouping="Or">
                  <ConditionSingle Enabled="true" ExpressionL="${ecallback:hint}" ExpressionTypeL="String" ExpressionR="0" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                </Condition>
              </Action>
            </Actions>
          </Trigger>
          <Trigger Enabled="false" Source="None" Name="鲶鱼精邮差扩展 说明/自检" Id="3678943a-d463-48db-8f4e-7664bd61bff6" RegularExpression="">
            <Actions>
              <Action OrderNumber="1" Enabled="False" ActionType="Placeholder" Description="现已支持任意版本 ACT。" DescBgColor="f0f8ff" DescTextColor="800" DescriptionOverride="True"/>
              <Action OrderNumber="2" Enabled="False" ActionType="Placeholder" Description="鲶鱼精邮差扩展" DescBgColor="acf" DescTextColor="248" DescriptionOverride="True"/>
              <Action OrderNumber="3" Enabled="False" ActionType="Placeholder" Description="　利用鲶鱼精邮差的内存相关工具，向触发器注册以下回调。" DescBgColor="f0f8ff" DescTextColor="234" DescriptionOverride="True"/>
              <Action OrderNumber="4" Enabled="False" ActionType="Placeholder" Description="　注：这些功能与鲶鱼精邮差本身无关。不要去鲶鱼精邮差的频道或 GitHub 提问相关问题。" DescBgColor="f0f8ff" DescTextColor="800" DescriptionOverride="True"/>
              <Action OrderNumber="5" Enabled="False" ActionType="Placeholder" Description="　如果你开了卫月不知名插件导致炸游戏，建议结合自检排查问题。" DescBgColor="f0f8ff" DescTextColor="234" DescriptionOverride="True"/>
              <Action OrderNumber="6" LaunchProcessPathExpression="https://github.com/MnFeN/ACT_Tech_Guide/blob/main/PostNamazuExtension" Enabled="False" ActionType="LaunchProcess" Description="　【右键此行测试可打开 GitHub 查看详细说明】" DescBgColor="f0f8ff" DescTextColor="26f" DescriptionOverride="True"/>
              <Action OrderNumber="7" Enabled="False" ActionType="Placeholder" Description="　【右键点击下方绿色文本行可以测试动作】" DescBgColor="f0f8ff" DescTextColor="234" DescriptionOverride="True"/>
              <Action OrderNumber="8" NamedCallbackName="Warn" NamedCallbackParam="3&#13;&#10;我是 Honey Bee 小姐的狗！" Enabled="False" ActionType="NamedCallback" Description="· [Hint/Warn] 提示文本" DescBgColor="f0f8ff" DescTextColor="2a8" DescriptionOverride="True"/>
              <Action OrderNumber="9" NamedCallbackName="QuitInstance" Enabled="False" ActionType="NamedCallback" Description="· [QuitInstance] 退出副本" DescBgColor="f0f8ff" DescTextColor="2a8" DescriptionOverride="True"/>
              <Action OrderNumber="10" NamedCallbackName="Target" NamedCallbackParam="${_entity[Distance &gt; 15 &amp;&amp; Distance &lt; 50].id}" Enabled="False" ActionType="NamedCallback" Description="· [Target] 选择实体" DescBgColor="f0f8ff" DescTextColor="2a8" DescriptionOverride="True"/>
              <Action OrderNumber="11" NamedCallbackName="SetObjectScale" NamedCallbackParam="${_me.address}, 3" Enabled="False" ActionType="NamedCallback" Description="· [SetObjectScale] 实体缩放" DescBgColor="f0f8ff" DescTextColor="2a8" DescriptionOverride="True"/>
              <Action OrderNumber="12" NamedCallbackName="SetOpacity" NamedCallbackParam="${_me.address}, 0.2" Enabled="False" ActionType="NamedCallback" Description="· [SetOpacity] 透明度" DescBgColor="f0f8ff" DescTextColor="2a8" DescriptionOverride="True"/>
              <Action OrderNumber="13" NamedCallbackName="SetStatusLoopVfx" NamedCallbackParam="${_me.address}, 683" Enabled="False" ActionType="NamedCallback" Description="· [SetStatusLoopVfx] 状态特效" DescBgColor="f0f8ff" DescTextColor="2a8" DescriptionOverride="True"/>
              <Action OrderNumber="14" NamedCallbackName="LockOn" NamedCallbackParam="${_me.address}, m0857_stop_s5t1" Enabled="False" ActionType="NamedCallback" Description="· [LockOn] 点名特效" DescBgColor="f0f8ff" DescTextColor="2a8" DescriptionOverride="True"/>
              <Action OrderNumber="15" NamedCallbackName="Channeling" NamedCallbackParam="${_me.address}, ${_me.address}, chn_m0906_ht02k2, 5" Enabled="False" ActionType="NamedCallback" Description="· [Channeling] 连线特效 （注：测试时会自己连到自己）" DescBgColor="f0f8ff" DescTextColor="2a8" DescriptionOverride="True"/>
              <Action OrderNumber="16" NamedCallbackName="Omen" NamedCallbackParam="m0071_fan180_01k2, 5, ${_me.Pos}, ${_me.h}, 5, 5" Enabled="False" ActionType="NamedCallback" Description="· [Omen] 固定位置的预兆类特效" DescBgColor="f0f8ff" DescTextColor="2a8" DescriptionOverride="True"/>
              <Action OrderNumber="17" NamedCallbackName="PictoACT" NamedCallbackParam="Omen: general02f&#13;&#10;t: 5&#13;&#10;Pos: ${_me.Pos}&#13;&#10;Angle: ${_me.h}&#13;&#10;Scale: 1, 50" Enabled="False" ActionType="NamedCallback" Description="· [PictoACT] 新版特效绘制" DescBgColor="f0f8ff" DescTextColor="2a8" DescriptionOverride="True"/>
              <Action OrderNumber="18" Enabled="False" ActionType="NamedCallback" Description="· [SetCameraParams] 调整视距、视场、相机角度范围等参数" DescBgColor="f0f8ff" DescTextColor="000" DescriptionOverride="True"/>
              <Action OrderNumber="19" Enabled="False" ActionType="NamedCallback" Description="    如需修改默认相机参数，可在配置界面直接修改。" DescBgColor="f0f8ff" DescTextColor="000" DescriptionOverride="True"/>
              <Action OrderNumber="20" NamedCallbackName="SetCameraParams" NamedCallbackParam="initconfig" Enabled="False" ActionType="NamedCallback" Description="  - 解锁视距及俯仰视角范围限制（此后将保持生效）" DescBgColor="f0f8ff" DescTextColor="2a8" DescriptionOverride="True"/>
              <Action OrderNumber="21" NamedCallbackName="SetCameraParams" NamedCallbackParam="clearconfig" Enabled="False" ActionType="NamedCallback" Description="  - 关闭此功能并还原为游戏默认设置" DescBgColor="f0f8ff" DescTextColor="2a8" DescriptionOverride="True"/>
              <Action OrderNumber="22" NamedCallbackName="SetCameraParams" NamedCallbackParam="FoV = 1.1&#13;&#10;AngleH = π" Enabled="False" ActionType="NamedCallback" Description="  - 自定义设置（单次有效，仅供参考写法，想改的话复制这个动作到本地触发器里改）" DescBgColor="f0f8ff" DescTextColor="2a8" DescriptionOverride="True"/>
              <Action OrderNumber="23" NamedCallbackName="MapEffect" NamedCallbackParam="00020001:00" Enabled="False" ActionType="NamedCallback" Description="· [MapEffect] 场地特效 【注：解限进入极火天王副本测试 地图错误可能无效甚至炸游戏】" DescBgColor="f0f8ff" DescTextColor="2a8" DescriptionOverride="True"/>
              <Action OrderNumber="24" NamedCallbackName="ChangeWeather" NamedCallbackParam="187" Enabled="False" ActionType="NamedCallback" Description="· [ChangeWeather] 切换天气 【注：在 7.0 最后一张地图测试可恢复原本的天气】" DescBgColor="f0f8ff" DescTextColor="2a8" DescriptionOverride="True"/>
              <Action OrderNumber="25" NamedCallbackName="RemoveStatus" NamedCallbackParam="${_me.address}, 0x32" Enabled="False" ActionType="NamedCallback" Description="· [RemoveStatus] 本地取消状态   使用冲刺后测试动作" DescBgColor="f0f8ff" DescTextColor="2a8" DescriptionOverride="True"/>
              <Action OrderNumber="26" NamedCallbackName="StatusOff" NamedCallbackParam="0x32 " Enabled="False" ActionType="NamedCallback" Description="· [StatusOff] 取消状态   使用冲刺后测试动作" DescBgColor="f0f8ff" DescTextColor="2a8" DescriptionOverride="True"/>
              <Action OrderNumber="27" NamedCallbackName="UseActionLocation" NamedCallbackParam="Action, 0xdf1, ${_me.x}, ${_me.y} - 15, ${_me.z}" Enabled="False" ActionType="NamedCallback" Description="· [UseAction] [UseActionLocation] 使用技能  切换白魔，以自己为南侧边缘放置庇护所" DescBgColor="f0f8ff" DescTextColor="2a8" DescriptionOverride="True"/>
            </Actions>
          </Trigger>
        </Triggers>
      </Folder>
    </Folders>
    <Triggers>
      <Trigger Enabled="false" Source="None" Name="使用说明" Id="e78deb64-81b4-4df2-a8fb-f1e40c7af632" RegularExpression="">
        <Actions>
          <Action OrderNumber="1" ActionType="Placeholder" Asynchronous="False" Description="　用户不需要、也不应改变或执行任何触发器，仅需要保持分组开启即可。" DescBgColor="f0f8ff" DescTextColor="234" DescriptionOverride="True"/>
          <Action OrderNumber="2" ActionType="Placeholder" Asynchronous="False" Description="　如果你是普通用户，无需阅读下面的内容。" DescBgColor="f0f8ff" DescTextColor="234" DescriptionOverride="True"/>
          <Action OrderNumber="3" ActionType="Placeholder" Asynchronous="False" Description="　本工具箱包含以下内容：" DescBgColor="f0f8ff" DescTextColor="234" DescriptionOverride="True"/>
          <Action OrderNumber="4" ActionType="Placeholder" Asynchronous="False" Description="高级标点工具箱（新版）" DescBgColor="acf" DescTextColor="248" DescriptionOverride="True"/>
          <Action OrderNumber="5" ActionType="Placeholder" Asynchronous="False" Description="  在切换区域（包括 ACT 与游戏之一运行时开启另一个）时向触发器程序注册回调" DescBgColor="f0f8ff" DescTextColor="234" DescriptionOverride="True"/>
          <Action OrderNumber="6" ActionType="Placeholder" Asynchronous="False" Description="  用户可以直接使用具名回调操作 “AdvWm” 触发。" DescBgColor="f0f8ff" DescTextColor="234" DescriptionOverride="True"/>
          <Action OrderNumber="7" LaunchProcessPathExpression="https://github.com/MnFeN/ACT_Tech_Guide" ActionType="LaunchProcess" Description="· 右键 - 测试动作 打开说明文档链接（GitHub）" DescBgColor="f0f8ff" DescTextColor="2a8" DescriptionOverride="True"/>
          <Action OrderNumber="8" NamedCallbackName="AdvWm" NamedCallbackParam="// 左侧箭头可以展开为多行模式&#13;&#10;// 双斜线开始的行会当做为注释行，和空行一起被忽略&#13;&#10;// 所有参数的顺序不重要，每行提供一个参数&#13;&#10;&#13;&#10;// 采用日志中的坐标系，即正东 x+，正南 y+，正上 z+&#13;&#10;// 角度从正北开始逆时针递增，如 北 西 南 东 分别为： ±π, -π/2, 0, π/2&#13;&#10;&#13;&#10;// 必须参数：action，代表标点模式&#13;&#10;// place 模式下允许你输入一组相对坐标&#13;&#10;action: place&#13;&#10;&#13;&#10;// 可选参数：scaleX scaleY scaleZ：坐标在各个方向上的缩放尺度，负数即为反向&#13;&#10;// 未提供时的默认值：均为 1&#13;&#10;scaleX: 2&#13;&#10;scaleY: -2&#13;&#10;// 如果尺度相同，可以使用 scale: 2 简化&#13;&#10;&#13;&#10;// 可选参数 θ：旋转角度，可以理解为将这个相对坐标系的正北旋转至哪个绝对方向&#13;&#10;// 未提供时的默认值：-π （将正北旋转至正北，即未旋转）&#13;&#10;θ: π/2&#13;&#10;// 也可以写作角度，如 θ: 90°&#13;&#10;&#13;&#10;// 可选参数 center：中心坐标&#13;&#10;// 下方演示的是使用触发器的实体查询功能获取并填入自身坐标&#13;&#10;// 未提供时的默认值：0, 0, 0&#13;&#10;center: ${_me.x}, ${_me.y}, ${_me.z}&#13;&#10;&#13;&#10;// 提供的坐标首先经过缩放变换，其次经过平面旋转，最后平移至中心坐标&#13;&#10;&#13;&#10;// 下方给出所有相对坐标：&#13;&#10;A: 0, -4, 0&#13;&#10;// z = 0 可以省略：&#13;&#10;B: 4, -4&#13;&#10;// 也可以使用极坐标模式：polar [r], [θ]：&#13;&#10;C: polar 4, 90°&#13;&#10;// 也可以结合两种模式，以平面直角坐标系下的坐标为中心进一步添加一个极坐标系的偏移：&#13;&#10;D: 0, 4 polar 2, 30°&#13;&#10;// 清除一个标点：&#13;&#10;1: clear&#13;&#10;// “清除”一个标点，实为移动到看不见的位置，使之下次出现时没有淡入动画：&#13;&#10;2: fakeclear&#13;&#10;// 没有提供的标点会被忽略，保持标点的原状态&#13;&#10;// 3:... 4:...&#13;&#10;&#13;&#10;// 三条 hyphen 连字符为分隔线，代表另起一条指令，所有指令依次执行&#13;&#10;---&#13;&#10;&#13;&#10;// circle 模式下通过给定的圆心和半径将所有点标记在圆周的等分位置&#13;&#10;action: circle&#13;&#10;&#13;&#10;// 必须参数：waymarks，从正北开始所有的标点&#13;&#10;// 可以使用 _ 表示这个位置依旧需要等分，但是并不放置一个标点，如下面代表八等分圆但正南不标点&#13;&#10;waymarks: ABCD_234&#13;&#10;&#13;&#10;// 必须参数：r，半径&#13;&#10;r: 5&#13;&#10;&#13;&#10;// 必须参数：center 圆心坐标&#13;&#10;center: ${_me.x}, ${_me.y}, ${_me.z}&#13;&#10;&#13;&#10;// 可选参数：θ，与 place 中类似&#13;&#10;θ: -π&#13;&#10;&#13;&#10;// linear（连接两个点）和 arc（朝某个方向标记圆弧）指令还没写介绍，有兴趣可以看代码&#13;&#10;" ActionType="NamedCallback" Description="· 也可双击这行查看一小段简短说明" DescBgColor="f0f8ff" DescTextColor="2a8" DescriptionOverride="True"/>
          <Action OrderNumber="9" ActionType="Placeholder" Asynchronous="False" Description="  此外，你可以使用指令：/e pl/place A/B/C/D/1/2/3/4 [x] [y] [z] 放置标点。" DescBgColor="f0f8ff" DescTextColor="234" DescriptionOverride="True"/>
          <Action OrderNumber="10" ActionType="Placeholder" Asynchronous="False" Description="  坐标参数均为可选，不提供时用自身坐标，如 /e pl A 将 A 点放在自己脚下。" DescBgColor="f0f8ff" DescTextColor="234" DescriptionOverride="True"/>
          <Action OrderNumber="11" ActionType="Placeholder" Asynchronous="False" Description="高级标点工具箱（旧版）" DescBgColor="acf" DescTextColor="248" DescriptionOverride="True"/>
          <Action OrderNumber="12" ActionType="Placeholder" Asynchronous="False" Description="　旧版本，使用固定格式的日志触发标点，已弃用，但触发器依然保留以兼容旧版科技。" DescBgColor="f0f8ff" DescTextColor="234" DescriptionOverride="True"/>
          <Action OrderNumber="13" ActionType="Placeholder" Asynchronous="False" Description="鲶鱼精邮差扩展" DescBgColor="acf" DescTextColor="248" DescriptionOverride="True"/>
          <Action OrderNumber="14" ActionType="Placeholder" Asynchronous="False" Description="　详见【鲶鱼精邮差扩展】文件夹。" DescBgColor="f0f8ff" DescTextColor="234" DescriptionOverride="True"/>
          <Action OrderNumber="15" ActionType="Placeholder" Asynchronous="False" Description="　CafeACT 无法使用。建议更换呆萌。" DescBgColor="f0f8ff" DescTextColor="234" DescriptionOverride="True"/>
          <Action OrderNumber="16" ActionType="Placeholder" Asynchronous="False" Description="关于" DescBgColor="acf" DescTextColor="248" DescriptionOverride="True"/>
          <Action OrderNumber="17" ActionType="Placeholder" Asynchronous="False" Description="　作者：MnFeN 阿洛" DescBgColor="f0f8ff" DescTextColor="234" DescriptionOverride="True"/>
          <Action OrderNumber="18" ActionType="Placeholder" Asynchronous="False" Description="　致谢：AtmoOmen　　Fragile　　Latihas　　Natsukage　　Small-Miao" DescBgColor="f0f8ff" DescTextColor="234" DescriptionOverride="True"/>
        </Actions>
      </Trigger>
    </Triggers>
  </ExportedFolder>
</TriggernometryExport>
