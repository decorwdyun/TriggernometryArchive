<?xml version="1.0" encoding="utf-8"?>
<TriggernometryExport PluginVersion="1.2.0.717">
  <ExportedFolder Id="8554d082-c56a-4bc2-b03d-dff300a933f0" Name="[工具] 运行支持库" Enabled="true">
    <Folders>
      <Folder Id="6f77e5e1-c8cb-4522-80e4-aa4cfe4b1790" Name="BeepTimer" Enabled="true">
        <Folders/>
        <Triggers>
          <Trigger Enabled="true" Name="CountDown5" Id="4e28ba15-3753-47fa-9349-ce7f9294656f" RegularExpression="^[Cc][Dd]5:(?&lt;delay&gt;[\d.]+)(?::(?&lt;duration&gt;[\d.]+))?">
            <Actions>
              <Action OrderNumber="1" LogMessageText="CountDown5 的延迟至少应为 4 s，实际提供了 ${delay} s。" ActionType="LogMessage">
                <Condition Enabled="true" Grouping="Or">
                  <ConditionSingle Enabled="true" ExpressionL="${delay}" ExpressionTypeL="String" ExpressionR="4" ExpressionTypeR="String" ConditionType="NumericLess"/>
                </Condition>
              </Action>
              <Action OrderNumber="2" SystemBeepFreqExpression="freq(C6)" SystemBeepLengthExpression="(${duration} ?? 0.2) * 1000" ExecutionDelayExpression="1000 * ${delay} - 4000"/>
              <Action OrderNumber="3" SystemBeepFreqExpression="freq(D6)" SystemBeepLengthExpression="(${duration} ?? 0.2) * 1000" ExecutionDelayExpression="1000"/>
              <Action OrderNumber="4" SystemBeepFreqExpression="freq(E6)" SystemBeepLengthExpression="(${duration} ?? 0.2) * 1000" ExecutionDelayExpression="1000"/>
              <Action OrderNumber="5" SystemBeepFreqExpression="freq(G6)" SystemBeepLengthExpression="(${duration} ?? 0.2) * 1000" ExecutionDelayExpression="1000"/>
              <Action OrderNumber="6" SystemBeepFreqExpression="freq(C7)" SystemBeepLengthExpression="(${duration} ?? 0.2) * 1500" ExecutionDelayExpression="1000"/>
            </Actions>
          </Trigger>
          <Trigger Enabled="true" Name="CountDown4" Id="dacb9330-b84d-464a-88d2-38ce962164da" RegularExpression="^[Cc][Dd]4:(?&lt;delay&gt;[\d.]+)(?::(?&lt;duration&gt;[\d.]+))?">
            <Actions>
              <Action OrderNumber="1" LogMessageText="CountDown4 的延迟至少应为 3 s，实际提供了 ${delay} s。" ActionType="LogMessage">
                <Condition Enabled="true" Grouping="Or">
                  <ConditionSingle Enabled="true" ExpressionL="${delay}" ExpressionTypeL="String" ExpressionR="3" ExpressionTypeR="String" ConditionType="NumericLess"/>
                </Condition>
              </Action>
              <Action OrderNumber="2" SystemBeepFreqExpression="freq(C6)" SystemBeepLengthExpression="(${duration} ?? 0.2) * 1000" ExecutionDelayExpression="1000 * ${delay} - 3000"/>
              <Action OrderNumber="3" SystemBeepFreqExpression="freq(E6)" SystemBeepLengthExpression="(${duration} ?? 0.2) * 1000" ExecutionDelayExpression="1000"/>
              <Action OrderNumber="4" SystemBeepFreqExpression="freq(G6)" SystemBeepLengthExpression="(${duration} ?? 0.2) * 1000" ExecutionDelayExpression="1000"/>
              <Action OrderNumber="5" SystemBeepFreqExpression="freq(C7)" SystemBeepLengthExpression="(${duration} ?? 0.2) * 1500" ExecutionDelayExpression="1000"/>
            </Actions>
          </Trigger>
          <Trigger Enabled="true" Name="CountDown8" Id="ca338a48-c87b-47e6-98d1-ce3258b08a91" RegularExpression="^[Cc][Dd]8:(?&lt;delay&gt;[\d.]+)(?::(?&lt;duration&gt;[\d.]+))?">
            <Actions>
              <Action OrderNumber="1" LogMessageText="CountDown8 的延迟至少应为 7 s，实际提供了 ${delay} s。" ActionType="LogMessage">
                <Condition Enabled="true" Grouping="Or">
                  <ConditionSingle Enabled="true" ExpressionL="${delay}" ExpressionTypeL="String" ExpressionR="7" ExpressionTypeR="String" ConditionType="NumericLess"/>
                </Condition>
              </Action>
              <Action OrderNumber="2" SystemBeepFreqExpression="freq(C6)" SystemBeepLengthExpression="(${duration} ?? 0.2) * 1000" ExecutionDelayExpression="1000 * ${delay} - 7000"/>
              <Action OrderNumber="3" SystemBeepFreqExpression="freq(D6)" SystemBeepLengthExpression="(${duration} ?? 0.2) * 1000" ExecutionDelayExpression="1000"/>
              <Action OrderNumber="4" SystemBeepFreqExpression="freq(E6)" SystemBeepLengthExpression="(${duration} ?? 0.2) * 1000" ExecutionDelayExpression="1000"/>
              <Action OrderNumber="5" SystemBeepFreqExpression="freq(F6)" SystemBeepLengthExpression="(${duration} ?? 0.2) * 1000" ExecutionDelayExpression="1000"/>
              <Action OrderNumber="6" SystemBeepFreqExpression="freq(G6)" SystemBeepLengthExpression="(${duration} ?? 0.2) * 1000" ExecutionDelayExpression="1000"/>
              <Action OrderNumber="7" SystemBeepFreqExpression="freq(A6)" SystemBeepLengthExpression="(${duration} ?? 0.2) * 1000" ExecutionDelayExpression="1000"/>
              <Action OrderNumber="8" SystemBeepFreqExpression="freq(B6)" SystemBeepLengthExpression="(${duration} ?? 0.2) * 1000" ExecutionDelayExpression="1000"/>
              <Action OrderNumber="9" SystemBeepFreqExpression="freq(C7)" SystemBeepLengthExpression="(${duration} ?? 0.2) * 1500" ExecutionDelayExpression="1000"/>
            </Actions>
          </Trigger>
        </Triggers>
      </Folder>
      <Folder Id="91c06775-cc8d-4b48-9910-a3bee1c6b1a1" Name="高级标点工具箱 AdvWm v4.7" Enabled="true" RawEnvironmentVariables="version = 4.7">
        <Folders>
          <Folder Id="1f85881f-8c62-4317-9358-0d60cb95869d" Name="WaymarkEncoder" Enabled="true">
            <Folders>
              <Folder Id="338ca70c-8038-4c4e-af98-1b668c34aaed" Name="user" Enabled="true">
                <Folders/>
                <Triggers>
                  <Trigger Enabled="true" Sequential="True" Name="2. 应答 + 播报" Id="87fd5f27-949b-4fe2-a74b-bbf6e6006d3e" RegularExpression="^.{15}\S+ 1C:Add:0:.{8}:[^:]*:(?&lt;x&gt;[^:]+):(?&lt;y&gt;[^:]+):(?&lt;z&gt;[^:]+)">
                    <Actions>
                      <Action OrderNumber="1" NamedCallbackName="AdvWm" NamedCallbackParam="Action: Answer" ActionType="NamedCallback"/>
                      <Action OrderNumber="2" NamedCallbackName="AdvWm" NamedCallbackParam="Action: GetUsers" ActionType="NamedCallback" ExecutionDelayExpression="2000"/>
                      <Action OrderNumber="3" ListVariableName="AdvWm_users" ActionType="ListVariable"/>
                      <Action OrderNumber="4" NamedCallbackName="AdvWm" NamedCallbackParam="A: ${v:AdvWm_A}&#13;&#10;public: true" ActionType="NamedCallback">
                        <Condition Enabled="true" Grouping="Or">
                          <ConditionSingle Enabled="true" ExpressionL="${ev:AdvWm_A}" ExpressionTypeL="String" ExpressionR="1" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                        </Condition>
                      </Action>
                      <Action OrderNumber="5" VariableName="AdvWm_A" ActionType="Variable"/>
                    </Actions>
                    <Condition Enabled="true" Grouping="Or">
                      <ConditionSingle Enabled="true" ExpressionL="abs(${z})" ExpressionTypeL="Numeric" ExpressionR="0xff14 / 1000" ExpressionTypeR="Numeric" ConditionType="StringEqualCase"/>
                    </Condition>
                  </Trigger>
                  <Trigger Enabled="true" Name="3. 接收" Id="b682627d-2bc3-4491-96f2-ccf7c24db304" RegularExpression="^.{15}\S+ 1C:Add:0:.{8}:[^:]*:(?&lt;x&gt;[^:]+):(?&lt;y&gt;[^:]+):(?&lt;z&gt;[^:]+)">
                    <Actions>
                      <Action OrderNumber="1" ListVariableOp="Push" ListVariableName="AdvWm_users" ListVariableExpression="${f:dec2hex8:${n: (round(${x} * 100) - 8000) * 0x1000 + (round(${y} * 100) - 8000) + 0x10000000}}, ${n: round(${z}, 2)}" ActionType="ListVariable"/>
                    </Actions>
                    <Condition Enabled="true" Grouping="Or">
                      <ConditionSingle Enabled="true" ExpressionL="abs(${z})" ExpressionTypeL="Numeric" ExpressionR="0xff14 / 1000" ExpressionTypeR="Numeric" ConditionType="StringEqualCase"/>
                      <ConditionSingle Enabled="true" ExpressionL="abs(${z})" ExpressionTypeL="Numeric" ExpressionR="0.14" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                    </Condition>
                  </Trigger>
                  <Trigger Enabled="true" Sequential="True" Name="1. 询问" Id="8fe11c44-a769-4d56-b68f-da541ee8041a" RegularExpression="^.{15}\S+ 00:0038::(?&lt;user&gt;[!?！？]user)$">
                    <Actions>
                      <Action OrderNumber="1" TriggerOp="EnableTrigger" TriggerId="87fd5f27-949b-4fe2-a74b-bbf6e6006d3e" ActionType="Trigger" Description="? 是匿名" DescriptionOverride="True"/>
                      <Action OrderNumber="2" TriggerOp="EnableTrigger" TriggerId="b682627d-2bc3-4491-96f2-ccf7c24db304" ActionType="Trigger" Description="! 是实名" DescriptionOverride="True"/>
                      <Action OrderNumber="3" VariableOp="SetString" VariableName="AdvWm_A" VariableExpression="${if: ${_wm[A].active} ? ${_wm[A].pos} : clear}" ActionType="Variable"/>
                      <Action OrderNumber="4" NamedCallbackName="AdvWm" NamedCallbackParam="Action: ${if: ${f:startwith(?):${f:tohalfwidth:${user}}} ? AskAnonymous : Ask }" ActionType="NamedCallback"/>
                    </Actions>
                  </Trigger>
                </Triggers>
              </Folder>
              <Folder Id="c650049e-1770-43d6-a8bd-07526d611548" Name="tell" Enabled="true">
                <Folders/>
                <Triggers>
                  <Trigger Enabled="true" Name="2. 接收" Id="0fc6087d-2a18-4454-9fc0-7bcd1c3ac04c" RegularExpression="^.{15}\S+ 1C:Add:0:(?&lt;id&gt;.{8}):(?&lt;name&gt;[^:]*):(?&lt;x&gt;[^:]+):(?&lt;y&gt;[^:]+)">
                    <Actions>
                      <Action OrderNumber="1" NamedCallbackName="AdvWm" NamedCallbackParam="Action: Decode&#13;&#10;Sender: ${name} (${_entity[${id}].jobEN3})" ActionType="NamedCallback" ExecutionDelayExpression="500"/>
                    </Actions>
                    <Condition Enabled="true" Grouping="And">
                      <ConditionSingle Enabled="true" ExpressionL="${x}" ExpressionTypeL="Numeric" ExpressionR="0xff14 / 1000" ExpressionTypeR="Numeric" ConditionType="StringEqualCase"/>
                      <ConditionSingle Enabled="true" ExpressionL="${y}" ExpressionTypeL="Numeric" ExpressionR="0xff14 / 1000" ExpressionTypeR="Numeric" ConditionType="StringEqualCase"/>
                    </Condition>
                  </Trigger>
                  <Trigger Enabled="true" Name="1. 发送" Id="fcc68b43-59ae-499a-9cc0-5de92da92082" RegularExpression="^.{15}\S+ 00:0038::(?&lt;tell&gt;[!?！？]tell) (?&lt;msg&gt;.+)">
                    <Actions>
                      <Action OrderNumber="1" NamedCallbackName="AdvWm" NamedCallbackParam="Action: ${if: ${f:startwith(?):${f:tohalfwidth:${tell}}} ? EncodeAnonymous : Encode }&#13;&#10;Data: ${msg}" ActionType="NamedCallback"/>
                      <Action OrderNumber="2" Asynchronous="False"/>
                    </Actions>
                  </Trigger>
                </Triggers>
              </Folder>
            </Folders>
            <Triggers/>
          </Folder>
        </Folders>
        <Triggers>
          <Trigger Enabled="true" Name="版本" Id="6dcbbe95-3761-4e0c-947f-3a28ae02a278" RegularExpression="^AdvWm_getVersion">
            <Actions>
              <Action OrderNumber="1" ListVariableOp="Push" ListVariableName="AdvWm_version" ListVariableExpression="${env:version}" ActionType="ListVariable"/>
            </Actions>
          </Trigger>
          <Trigger Enabled="false" Name="导入提示" Id="d2256cf5-d6ed-476c-a021-28ef7286b7d3" RegularExpression="^." PrevActionsRefire="Deny" PeriodRefire="Deny" RefirePeriodExpression="30000">
            <Actions>
              <Action OrderNumber="1" MessageBoxIconType="Information" MessageBoxText="高级标点工具箱已更新 v${env:version}。&#13;&#10;如果你有本地版本，请删除本地版本，以免冲突。&#13;&#10;如果你是开发者，可以查看使用说明中的新功能介绍。&#13;&#10;&#13;&#10;本条消息只会提示一次。" ActionType="MessageBox"/>
              <Action OrderNumber="2" TriggerOp="DisableTrigger" TriggerId="d2256cf5-d6ed-476c-a021-28ef7286b7d3" ActionType="Trigger"/>
            </Actions>
          </Trigger>
          <Trigger Enabled="true" Name="手动标点： /e pl/place A/B/C/D/1/2/3/4 (x) (y) (z)" Id="8bc11f06-ead4-4300-830d-7fac142a300e" RegularExpression="^.{15}\S+ 00:0038:: *[Pp][Ll]([Aa][Cc][Ee])? +(?&lt;wm&gt;[A-Da-d1-4])(?&lt;x&gt; +[^ ]+)?(?&lt;y&gt; +[^ ]+)?(?&lt;z&gt; +[^ ]+)? *$">
            <Actions>
              <Action OrderNumber="1" NamedCallbackName="AdvWm" NamedCallbackParam="action: place&#13;&#10;${wm}: (${x} ?? ${_me.x}), (${y} ?? ${_me.y}), (${z} ?? ${_me.z})" ActionType="NamedCallback"/>
            </Actions>
          </Trigger>
          <Trigger Enabled="true" Sequential="True" Name="1. 注册回调" Id="fd8a5978-c631-40a6-976b-32566806e303" RegularExpression="^.{15}\S+ 01:">
            <Actions>
              <Action OrderNumber="1" ExecScriptExpression="using System;&#13;&#10;using System.Collections;&#13;&#10;using System.Collections.Generic;&#13;&#10;using System.Linq;&#13;&#10;using System.Text;&#13;&#10;using System.Text.RegularExpressions;&#13;&#10;using Triggernometry;&#13;&#10;using static System.Math;&#13;&#10;using Triggernometry.PluginBridges;&#13;&#10;using System.Windows.Forms;&#13;&#10;&#13;&#10;public struct Info&#13;&#10;{&#13;&#10;    public const string Name = &quot;AdvWm&quot;;&#13;&#10;    public const string NameCN = &quot;高级标点工具箱&quot;;&#13;&#10;    public const string Version = &quot;${env:version}&quot;;&#13;&#10;    public const string Author = &quot;阿洛 MnFeN&quot;;&#13;&#10;&#13;&#10;    public static string InitInfo =&gt; $&quot;{Name}：{NameCN} v{Version} by {Author} 已成功初始化。&quot;;&#13;&#10;}&#13;&#10;&#13;&#10;RealPlugin.plug.RegisterNamedCallback(&quot;AdvWm&quot;, new Action&lt;object, string&gt;(AdvWm.NamedCallback), null, registrant: $&quot;{Info.NameCN} v{Info.Version}&quot;);&#13;&#10;RealPlugin.plug.InvokeNamedCallback(&quot;NamazuLog&quot;, Info.InitInfo);&#13;&#10;Interpreter.StaticHelpers.Log(RealPlugin.DebugLevelEnum.Custom, Info.InitInfo);&#13;&#10;&#13;&#10;public class AdvWm&#13;&#10;{&#13;&#10;    string _command;&#13;&#10;    /// &lt;summary&gt; All keys are in lowercase. &lt;/summary&gt;&#13;&#10;    Dictionary&lt;string, string&gt; _argsDict;&#13;&#10;    string _action = &quot;&quot;;&#13;&#10;    bool _log = true;&#13;&#10;    bool _local = true;&#13;&#10;&#13;&#10;    public AdvWm(string command)&#13;&#10;    {&#13;&#10;        _command = command;&#13;&#10;    }&#13;&#10;&#13;&#10;    public static void Log(string message) =&gt; RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, $&quot;/e {message}&quot;);&#13;&#10;&#13;&#10;    public static void NamedCallback(object _, string input)&#13;&#10;    {&#13;&#10;        var commands = input.Split(new string[] { &quot;---&quot; }, StringSplitOptions.None);&#13;&#10;        foreach (var command in commands)&#13;&#10;        {&#13;&#10;            new AdvWm(command).Execute();&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    static readonly HashSet&lt;string&gt; postNamazuWaymarkKeywords = new HashSet&lt;string&gt; {&#13;&#10;        &quot;save&quot;, &quot;backup&quot;, &quot;load&quot;, &quot;restore&quot;, &quot;reset&quot;, &quot;clear&quot;, &quot;public&quot;&#13;&#10;    };&#13;&#10;&#13;&#10;    private void Execute()&#13;&#10;    {&#13;&#10;        string simpleCmd = _command.ToLower().Trim();&#13;&#10;        if (postNamazuWaymarkKeywords.Contains(simpleCmd))&#13;&#10;        {&#13;&#10;            RealPlugin.plug.InvokeNamedCallback(&quot;place&quot;, simpleCmd);&#13;&#10;            return;&#13;&#10;        }&#13;&#10;&#13;&#10;        _argsDict = _command.Split('\n')&#13;&#10;            .Where(line =&gt; line.Contains(&quot;:&quot;) &amp;&amp; !line.StartsWith(&quot;//&quot;))&#13;&#10;            .ToDictionary(&#13;&#10;                line =&gt; line.Substring(0, line.IndexOf(':')).Trim().ToLower(),&#13;&#10;                line =&gt; line.Substring(line.IndexOf(':') + 1).Trim()&#13;&#10;            );&#13;&#10;&#13;&#10;        // 解析共通参数&#13;&#10;        TryGetArg(&quot;Action&quot;, out _action);&#13;&#10;        _log = !TryGetArg(&quot;Log&quot;, out string log) || bool.Parse(log.ToLower());&#13;&#10;        _local = !TryGetArg(&quot;Local&quot;, &quot;LocalOnly&quot;, out string local) || bool.Parse(local.ToLower());&#13;&#10;&#13;&#10;        Waymarks waymarks;&#13;&#10;        switch (_action?.ToLower() ?? &quot;&quot;)&#13;&#10;        {&#13;&#10;            case &quot;getversion&quot;:&#13;&#10;                Interpreter.StaticHelpers.SetScalarVariable(isPersistent: false, $&quot;{Info.Name}_version&quot;, Info.Version); return;&#13;&#10;            case &quot;encode&quot;:&#13;&#10;                WaymarksEncoder.EncodeAndSendWaymarks(GetArg(&quot;data&quot;), false); return;&#13;&#10;            case &quot;encodeanonymous&quot;:&#13;&#10;                WaymarksEncoder.EncodeAndSendWaymarks(GetArg(&quot;data&quot;), true); return;&#13;&#10;            case &quot;decode&quot;:&#13;&#10;                string sender = GetArg(&quot;sender&quot;);&#13;&#10;                WaymarksEncoder.DecodeFromWaymarksAndShow(); return;&#13;&#10;            case &quot;ask&quot;:&#13;&#10;                WaymarksEncoder.Ask(false); return;&#13;&#10;            case &quot;askanonymous&quot;:&#13;&#10;                WaymarksEncoder.Ask(true); return;&#13;&#10;            case &quot;answer&quot;:&#13;&#10;                WaymarksEncoder.Answer(); return;&#13;&#10;            case &quot;getusers&quot;:&#13;&#10;                WaymarksEncoder.GetUsersResult(); return;&#13;&#10;            case &quot;polar&quot;: // 不推荐使用，仅为兼容旧版本，可被 default 模式完全替代&#13;&#10;                waymarks = ParseWaymarksPolar(); break;&#13;&#10;            case &quot;circle&quot;:&#13;&#10;                waymarks = ParseWaymarksCircle(); break;&#13;&#10;            case &quot;arc&quot;:&#13;&#10;                waymarks = ParseWaymarksArc(); break;&#13;&#10;            case &quot;linear&quot;:&#13;&#10;            case &quot;connect&quot;:&#13;&#10;            case &quot;linearconnect&quot;:&#13;&#10;                waymarks = ParseWaymarksLinearConnect(); break;&#13;&#10;            // case &quot;absolute&quot;:  case &quot;relative&quot;:  case &quot;place&quot;: 旧版本的指令全部整合为默认的标点模式&#13;&#10;            default:&#13;&#10;                waymarks = ParseWaymarksDefault(); break;&#13;&#10;        }&#13;&#10;        // Log($&quot;初始：\n{waymarks}&quot;);&#13;&#10;        TryApplyScales(waymarks);&#13;&#10;        // Log($&quot;伸缩：\n{waymarks}&quot;);&#13;&#10;        TryApplyRotation(waymarks);&#13;&#10;        // Log($&quot;旋转：\n{waymarks}&quot;);&#13;&#10;        TryApplyCenter(waymarks);&#13;&#10;        // Log($&quot;平移：\n{waymarks}&quot;);&#13;&#10;        waymarks.LocalOnly = _local;&#13;&#10;        waymarks.Log = _log;&#13;&#10;        waymarks.Mark();&#13;&#10;    }&#13;&#10;&#13;&#10;    /// &lt;summary&gt; 根据提供的所有坐标，生成一组初始标点。 &lt;/summary&gt;&#13;&#10;    private Waymarks ParseWaymarksDefault()&#13;&#10;    {&#13;&#10;        Waymarks waymarks = new Waymarks();&#13;&#10;        foreach (string name in Waymark.WaymarkNames)  // a b c d 1 2 3 4&#13;&#10;        {&#13;&#10;            if (TryGetArg(name, out string rawCoord))&#13;&#10;            {&#13;&#10;                waymarks.Add(Waymark.Parse(name, rawCoord));&#13;&#10;            }&#13;&#10;        }&#13;&#10;        return waymarks;&#13;&#10;    }&#13;&#10;&#13;&#10;    /// &lt;summary&gt; 根据提供的所有极坐标，生成一组初始标点。建议使用 Default 替代。 &lt;/summary&gt;&#13;&#10;    private Waymarks ParseWaymarksPolar()&#13;&#10;    {&#13;&#10;        Waymarks waymarks = new Waymarks();&#13;&#10;        foreach (string name in Waymark.WaymarkNames)  // a b c d 1 2 3 4&#13;&#10;        {&#13;&#10;            if (TryGetArg(name, out string rawPolarCoord))&#13;&#10;            {   // 已重构为接近正常方法的处理逻辑&#13;&#10;                XIVCoord polarCoord = XIVCoord.ParseRawData(rawPolarCoord.StartsWith(&quot;polar &quot;) ? rawPolarCoord : $&quot;polar {rawPolarCoord}&quot;);&#13;&#10;                waymarks.Add(new Waymark(name, polarCoord.ToCartesian()));&#13;&#10;            }&#13;&#10;        }&#13;&#10;        return waymarks;&#13;&#10;    }&#13;&#10;&#13;&#10;    /// &lt;summary&gt; 根据提供的半径和标点名，生成一组排列成圆周的初始标点。 &lt;/summary&gt;&#13;&#10;    private Waymarks ParseWaymarksCircle()&#13;&#10;    {&#13;&#10;        Waymarks waymarks = new Waymarks();&#13;&#10;        double rCardinal = MathParser.Parse(GetArg(&quot;R&quot;));&#13;&#10;        double rIntercard = TryGetArg(&quot;R2&quot;, out string rawR2) ? MathParser.Parse(rawR2) : rCardinal;&#13;&#10;        string[] usedWaymarkNames = GetArg(&quot;Waymarks&quot;).Select(c =&gt; char.ToLower(c).ToString()).ToArray(); // 用哪些点 相对正北逆时针 如 A4D3C2B1&#13;&#10;        double step = 2 * PI / usedWaymarkNames.Length; // 相邻标点的角度差&#13;&#10;        int count = 0;&#13;&#10;        foreach (string name in usedWaymarkNames)  // a b c d 1 2 3 4&#13;&#10;        {&#13;&#10;            if (Waymark.WaymarkNames.Contains(name))&#13;&#10;            {&#13;&#10;                var r = (count &amp; 1) == 0 ? rCardinal : rIntercard;&#13;&#10;                var θ = count * step - PI;&#13;&#10;                waymarks.Add(new Waymark(name, new PolarCoord(r, θ, 0)));&#13;&#10;            }&#13;&#10;            count++;&#13;&#10;        }&#13;&#10;        return waymarks;&#13;&#10;    }&#13;&#10;&#13;&#10;    /// &lt;summary&gt; 根据提供的半径、标点名、圆心角，生成一组排列成弧线的初始标点。 &lt;/summary&gt;&#13;&#10;    private Waymarks ParseWaymarksArc()&#13;&#10;    {&#13;&#10;        Waymarks waymarks = new Waymarks();&#13;&#10;        double r = MathParser.Parse(GetArg(&quot;R&quot;));   // 半径&#13;&#10;        string[] usedWaymarkNames = GetArg(&quot;Waymarks&quot;).Select(c =&gt; char.ToLower(c).ToString()).ToArray(); // 用哪些点 相对正北逆时针 如 A4D3C2B1&#13;&#10;        int stepCount = usedWaymarkNames.Length - 1;&#13;&#10;&#13;&#10;        // 圆弧的圆心角，不提供的时候默认为使标点紧邻的角度（弧长约 2.6）&#13;&#10;        double dθ = TryGetArg(&quot;dθ&quot;, &quot;dTheta&quot;, out string rawdθ) ? MathParser.Parse(rawdθ) : (stepCount &gt;= 1) ? 2.6 / r * stepCount : 0;&#13;&#10;        double θStep = (stepCount &gt;= 1) ? dθ / stepCount : 0; // 相邻标点的角度差&#13;&#10;        int count = 0;&#13;&#10;        foreach (string name in usedWaymarkNames)  // a b c d 1 2 3 4&#13;&#10;        {&#13;&#10;            if (Waymark.WaymarkNames.Contains(name)) // 允许使用非标点名的字符占位等分点，不会生成标点&#13;&#10;            {&#13;&#10;                PolarCoord polarCoord = new PolarCoord(r, (count - stepCount / 2.0) * θStep - PI, 0);&#13;&#10;                waymarks.Add(new Waymark(name, polarCoord));&#13;&#10;            }&#13;&#10;            count++;&#13;&#10;        }&#13;&#10;        return waymarks;&#13;&#10;    }&#13;&#10;&#13;&#10;    /// &lt;summary&gt; 根据提供的起点、终点、标点名，生成线性插值的初始标点。 &lt;/summary&gt;&#13;&#10;    private Waymarks ParseWaymarksLinearConnect()&#13;&#10;    {&#13;&#10;        Waymarks waymarks = new Waymarks();&#13;&#10;        string[] usedWaymarkNames = GetArg(&quot;Waymarks&quot;).Select(c =&gt; char.ToLower(c).ToString()).ToArray(); // 用哪些点 起点到终点 如 A4D3C2B1&#13;&#10;        if (usedWaymarkNames.Length &lt; 2)&#13;&#10;        {&#13;&#10;            throw new Exception(&quot;AdvWm: LinearConnect 模式下，提供的标点数量不足 2&quot;);&#13;&#10;        }&#13;&#10;        XIVCoord startCoord = XIVCoord.ParseRawData(GetArg(&quot;start&quot;));&#13;&#10;        XIVCoord endCoord = XIVCoord.ParseRawData(GetArg(&quot;end&quot;));&#13;&#10;        XIVCoord vector = endCoord - startCoord;&#13;&#10;        double totalDistance = vector.Length;&#13;&#10;        // Log($&quot;{vector}&quot;);&#13;&#10;        int count = 0;&#13;&#10;        foreach (string name in usedWaymarkNames)  // A B C D 1 2 3 4&#13;&#10;        {&#13;&#10;            if (Waymark.WaymarkNames.Contains(name))&#13;&#10;            {&#13;&#10;                double percentage = (double)count / (usedWaymarkNames.Length - 1);  // 标点默认等分&#13;&#10;                if (TryGetArg(name, out string rawDistance))   // 也可以不等分，自定义标点位置&#13;&#10;                {&#13;&#10;                    if (rawDistance.EndsWith(&quot; m&quot;))      // 以 A: 5 m 形式提供的距离&#13;&#10;                    {&#13;&#10;                        // @d 代表总长度，如 A: @d - 5 m 意为终点前 5 m&#13;&#10;                        string strTotalDistance = totalDistance.ToString(MathParser.CultureInfo);&#13;&#10;                        rawDistance = rawDistance.Replace(&quot;@d&quot;, strTotalDistance);&#13;&#10;                        double distance = MathParser.Parse(rawDistance.Substring(0, rawDistance.Length - 2));&#13;&#10;                        percentage = distance / totalDistance;&#13;&#10;                    }&#13;&#10;                    else                                // 以 A: 0.125 形式提供的百分比&#13;&#10;                    {&#13;&#10;                        percentage = MathParser.Parse(rawDistance);&#13;&#10;                    }&#13;&#10;                }&#13;&#10;&#13;&#10;                XIVCoord coord = startCoord + percentage * vector;&#13;&#10;                waymarks.Add(new Waymark(name, coord));&#13;&#10;            }&#13;&#10;            count++;&#13;&#10;        }&#13;&#10;        return waymarks;&#13;&#10;    }&#13;&#10;&#13;&#10;    /// &lt;summary&gt; 如果当前指令提供了任何伸缩，将伸缩变换应用到给定的一组标点坐标。 &lt;/summary&gt;&#13;&#10;    /// &lt;returns&gt;&lt;/returns&gt;&#13;&#10;    private void TryApplyScales(Waymarks waymarks)&#13;&#10;    {&#13;&#10;        // 首先尝试解析 Scale 和具体的 ScaleX, ScaleY, ScaleZ 参数&#13;&#10;        bool hasScale = TryGetArg(&quot;Scale&quot;, out string rawScale);&#13;&#10;        bool hasScaleX = TryGetArg(&quot;ScaleX&quot;, out string rawScaleX);&#13;&#10;        bool hasScaleY = TryGetArg(&quot;ScaleY&quot;, out string rawScaleY);&#13;&#10;        bool hasScaleZ = TryGetArg(&quot;ScaleZ&quot;, out string rawScaleZ);&#13;&#10;&#13;&#10;        // 未给定参数则免去解析直接返回&#13;&#10;        if (!hasScale &amp;&amp; !hasScaleX &amp;&amp; !hasScaleY &amp;&amp; !hasScaleZ) return;&#13;&#10;&#13;&#10;        // 如果存在 scale 参数，按照 scaleX ?? scale ?? 1 的优先级解析&#13;&#10;        double defaultScale = hasScale ? MathParser.Parse(rawScale) : 1;&#13;&#10;&#13;&#10;        double scaleX = hasScaleX ? MathParser.Parse(rawScaleX) : defaultScale;&#13;&#10;        double scaleY = hasScaleY ? MathParser.Parse(rawScaleY) : defaultScale;&#13;&#10;        double scaleZ = hasScaleZ ? MathParser.Parse(rawScaleZ) : defaultScale;&#13;&#10;&#13;&#10;        // 如果任一缩放倍率不是 1，则缩放&#13;&#10;        if (Abs(scaleX - 1) &gt; 1e-5 || Abs(scaleY - 1) &gt; 1e-5 || Abs(scaleZ - 1) &gt; 1e-5)&#13;&#10;        {&#13;&#10;            foreach (Waymark wm in waymarks)&#13;&#10;            {&#13;&#10;                wm.Coord = wm.Coord.ScaleBy(scaleX, scaleY, scaleZ);&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /// &lt;summary&gt; 如果当前指令提供了旋转，将伸缩变换应用到给定的一组标点坐标。 &lt;/summary&gt;&#13;&#10;    /// &lt;returns&gt;&lt;/returns&gt;&#13;&#10;    private void TryApplyRotation(Waymarks waymarks)&#13;&#10;    {&#13;&#10;        if (TryGetArg(&quot;θ&quot;, &quot;Theta&quot;, out string rawθ))&#13;&#10;        {&#13;&#10;            double θ = MathParser.Parse(rawθ);&#13;&#10;            foreach (Waymark wm in waymarks)&#13;&#10;            {&#13;&#10;                wm.Coord = wm.Coord.RotateTo(θ);&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /// &lt;summary&gt; 如果当前指令提供了场地中心，将场地中心应用到给定的一组标点坐标。 &lt;/summary&gt;&#13;&#10;    void TryApplyCenter(Waymarks waymarks)&#13;&#10;    {&#13;&#10;        if (TryGetArg(&quot;O&quot;, &quot;Center&quot;, out string rawCenter))&#13;&#10;        {&#13;&#10;            XIVCoord centerCoord = XIVCoord.ParseRawData(rawCenter);&#13;&#10;            foreach (Waymark wm in waymarks)&#13;&#10;            {&#13;&#10;                wm.Coord = wm.Coord.MoveTo(centerCoord);&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    string GetArg(params string[] keys)&#13;&#10;    {&#13;&#10;        string key = keys.Select(k =&gt; k.ToLower()).FirstOrDefault(k =&gt; _argsDict.ContainsKey(k))&#13;&#10;            ?? throw new ArgumentException($&quot;AdvWm: 未提供指定的必需参数 {string.Join(&quot; / &quot;, keys)}。&quot;);&#13;&#10;        return _argsDict[key];&#13;&#10;    }&#13;&#10;&#13;&#10;    bool TryGetArg(string key, out string value)&#13;&#10;    {&#13;&#10;        key = key.ToLower();&#13;&#10;        return _argsDict.TryGetValue(key, out value);&#13;&#10;    }&#13;&#10;&#13;&#10;    bool TryGetArg(string key, string alternativeKey, out string value)&#13;&#10;    {&#13;&#10;        if (TryGetArg(key, out value))&#13;&#10;        {&#13;&#10;            return true;&#13;&#10;        }&#13;&#10;        return TryGetArg(alternativeKey, out value);&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;#region XIVCoord&#13;&#10;&#13;&#10;public abstract class XIVCoord&#13;&#10;{&#13;&#10;    //public abstract XIVCoord Copy();&#13;&#10;&#13;&#10;    /// &lt;summary&gt;&#13;&#10;    /// 将初始坐标视为相对坐标。&lt;br/&gt;&#13;&#10;    /// 将相对坐标系的正北（θ = ±pi）在平面内旋转至给定方向 &lt;paramref str=&quot;θ&quot;/&gt;。&lt;br/&gt;&lt;br/&gt;&#13;&#10;    /// 方向角度 &lt;paramref str=&quot;θ&quot;/&gt; 为游戏内标准，如：&lt;br/&gt;&#13;&#10;    /// · 正北（不旋转）= ±pi；&lt;br/&gt;&#13;&#10;    /// · 正南（旋转 180 度）= 0；&lt;br/&gt;&#13;&#10;    /// · 正东（顺时针旋转 90 度）= pi/2。&#13;&#10;    /// &lt;/summary&gt;&#13;&#10;    /// &lt;param str=&quot;theta&quot;&gt;将初始相对坐标系的正北（-pi）旋转到的方向角度。&lt;/param&gt;&#13;&#10;    public abstract XIVCoord RotateTo(double θ);&#13;&#10;    public abstract XIVCoord MoveTo(double dx, double dy, double dz);&#13;&#10;    public XIVCoord MoveTo(XIVCoord center) =&gt; this + center;&#13;&#10;    public abstract XIVCoord ScaleBy(double scaleX, double scaleY, double scaleZ);&#13;&#10;    public abstract CartesianCoord ToCartesian();&#13;&#10;    public abstract PolarCoord ToPolar();&#13;&#10;    public abstract double Length { get; }&#13;&#10;    public abstract string Jsonify();&#13;&#10;    public abstract override string ToString();&#13;&#10;&#13;&#10;    public static CartesianCoord operator +(XIVCoord a, XIVCoord b)&#13;&#10;    {&#13;&#10;        CartesianCoord cartesianA = a.ToCartesian();&#13;&#10;        CartesianCoord cartesianB = b.ToCartesian();&#13;&#10;&#13;&#10;        return new CartesianCoord(&#13;&#10;            cartesianA.X + cartesianB.X,&#13;&#10;            cartesianA.Y + cartesianB.Y,&#13;&#10;            cartesianA.Z + cartesianB.Z);&#13;&#10;    }&#13;&#10;&#13;&#10;    public static CartesianCoord operator -(XIVCoord a, XIVCoord b)&#13;&#10;    {&#13;&#10;        CartesianCoord cartesianA = a.ToCartesian();&#13;&#10;        CartesianCoord cartesianB = b.ToCartesian();&#13;&#10;&#13;&#10;        return new CartesianCoord(&#13;&#10;            cartesianA.X - cartesianB.X,&#13;&#10;            cartesianA.Y - cartesianB.Y,&#13;&#10;            cartesianA.Z - cartesianB.Z);&#13;&#10;    }&#13;&#10;&#13;&#10;    public static XIVCoord operator -(XIVCoord a)&#13;&#10;    {&#13;&#10;        if (a is CartesianCoord cartesianA)&#13;&#10;        {&#13;&#10;            return new CartesianCoord(-cartesianA.X, -cartesianA.Y, -cartesianA.Z);&#13;&#10;        }&#13;&#10;        else&#13;&#10;        {&#13;&#10;            PolarCoord polarA = (PolarCoord)a;&#13;&#10;            return new PolarCoord(polarA.R, polarA.θ + PI, polarA.Z);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    public static XIVCoord operator *(XIVCoord a, double n)&#13;&#10;    {&#13;&#10;        if (a is CartesianCoord cartesianA)&#13;&#10;        {&#13;&#10;            return new CartesianCoord(cartesianA.X * n, cartesianA.Y * n, cartesianA.Z * n);&#13;&#10;        }&#13;&#10;        else&#13;&#10;        {&#13;&#10;            PolarCoord polarA = (PolarCoord)a;&#13;&#10;            return new PolarCoord(polarA.R * n, polarA.θ, polarA.Z);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    public static XIVCoord operator *(double n, XIVCoord a) =&gt; a * n;&#13;&#10;&#13;&#10;    public static XIVCoord operator /(XIVCoord a, double n) =&gt; a * (1.0 / n);&#13;&#10;&#13;&#10;    private static Regex rexOpKeywords = new Regex(@&quot;\b(plus|minus|polar|minuspolar)\b&quot;, RegexOptions.IgnoreCase | RegexOptions.Compiled);&#13;&#10;&#13;&#10;    /// &lt;summary&gt;&#13;&#10;    /// 将一串直角坐标、极坐标、或混合方式指定的坐标解析并叠加，如：&lt;br /&gt;&lt;br /&gt;&#13;&#10;    /// &lt;paramref str=&quot;A&quot;/&gt;: 10, -10, 0 &lt;br /&gt;&#13;&#10;    /// &lt;paramref str=&quot;A&quot;/&gt;: &lt;paramref str=&quot;polar&quot;/&gt; 20, -45°, 0&lt;br /&gt;&#13;&#10;    /// &lt;paramref str=&quot;A&quot;/&gt;: 10, -10, 0 &lt;paramref str=&quot;polar&quot;/&gt; 20, -45°（在直角坐标基础上叠加极坐标结果）&lt;br /&gt;&lt;br /&gt;&#13;&#10;    /// 字符串格式详见 &lt;paramref str=&quot;rawCoords&quot;/&gt;。&#13;&#10;    /// &lt;/summary&gt;&#13;&#10;    /// &lt;param str=&quot;rawCoords&quot;&gt;&#13;&#10;    /// 一串坐标字符串，可包含多组坐标。&lt;br /&gt;&#13;&#10;    /// 每组坐标之间以关键字连接，坐标分量之间以逗号连接。如：&lt;br /&gt;&lt;br /&gt;&#13;&#10;    /// &lt;paramref str=&quot;A&quot;/&gt;:     x, y, z  &#13;&#10;    /// &lt;paramref str=&quot;plus&quot;/&gt;   x2, y2  &#13;&#10;    /// &lt;paramref str=&quot;minus&quot;/&gt;  x3, y3, z3  &#13;&#10;    /// &lt;paramref str=&quot;polar&quot;/&gt;  r1, θ1&#13;&#10;    /// &lt;paramref str=&quot;minuspolar&quot;/&gt; r2, θ2, z2&lt;br /&gt;&#13;&#10;    /// &lt;/param&gt;&#13;&#10;    public static XIVCoord ParseRawData(string rawCoords)&#13;&#10;    {&#13;&#10;        // 例：x, y, z plus x2, y2 minus x3, y3, z3 polar r1, θ1 minuspolar r2, θ2, z2&#13;&#10;&#13;&#10;        List&lt;string&gt; parts = new List&lt;string&gt;();&#13;&#10;        string currentPart = &quot;&quot;;&#13;&#10;        int depth = 0;&#13;&#10;        foreach (char c in rawCoords)&#13;&#10;        {&#13;&#10;            switch (c)&#13;&#10;            {&#13;&#10;                case ',':&#13;&#10;                    if (depth == 0)&#13;&#10;                    {&#13;&#10;                        parts.Add(currentPart);&#13;&#10;                        currentPart = &quot;&quot;;&#13;&#10;                        continue;&#13;&#10;                    }&#13;&#10;                    break;&#13;&#10;                case '(': depth++; break;&#13;&#10;                case ')': depth--; break;&#13;&#10;            }&#13;&#10;            currentPart += c;&#13;&#10;        }&#13;&#10;        parts.Add(currentPart);&#13;&#10;&#13;&#10;        if (depth != 0)&#13;&#10;        {&#13;&#10;            throw new Exception($&quot;AdvWm: 标点参数存在 {Abs(depth)} 个未闭合的{(depth &gt; 0 ? &quot;左&quot; : &quot;右&quot;)}括号。表达式：{rawCoords}&quot;);&#13;&#10;        }&#13;&#10;&#13;&#10;        // 此时：[x] [y] [z plus x2] [y2 minus x3] [y3] [z3 polar r] [θ] [z]&#13;&#10;&#13;&#10;        List&lt;XIVCoord&gt; coords = new List&lt;XIVCoord&gt;();&#13;&#10;        bool isCurrentPolar = false;&#13;&#10;        bool isCurrentPlus = true;&#13;&#10;        List&lt;string&gt; currentParams = new List&lt;string&gt;();&#13;&#10;&#13;&#10;        foreach (string part in parts)&#13;&#10;        {&#13;&#10;            string[] splitParts = rexOpKeywords.Split(part);&#13;&#10;&#13;&#10;            if (splitParts.Length == 3) // 找到操作符，拆分解析&#13;&#10;            {&#13;&#10;                string beforeOp = splitParts[0].Trim();&#13;&#10;                string operation = splitParts[1].Trim();&#13;&#10;                string afterOp = splitParts[2].Trim();&#13;&#10;&#13;&#10;                // 处理前部分&#13;&#10;                if (currentParams.Count != 0 || !string.IsNullOrEmpty(beforeOp)) // 不是形如 &quot;polar ...&quot; 的字符串开始位置&#13;&#10;                {&#13;&#10;                    currentParams.Add(beforeOp);&#13;&#10;                    XIVCoord coord = isCurrentPolar&#13;&#10;                        ? (XIVCoord)PolarCoord.Parse(currentParams.ToArray())&#13;&#10;                        : (XIVCoord)CartesianCoord.Parse(currentParams.ToArray());&#13;&#10;                    coords.Add(isCurrentPlus ? coord : -coord);&#13;&#10;                    currentParams.Clear();&#13;&#10;                }&#13;&#10;&#13;&#10;                // 处理操作符：是否是加法/极坐标操作&#13;&#10;                isCurrentPlus = !operation.StartsWith(&quot;minus&quot;);&#13;&#10;                isCurrentPolar = operation.EndsWith(&quot;polar&quot;);&#13;&#10;&#13;&#10;                // 处理后部分&#13;&#10;                currentParams.Add(afterOp);&#13;&#10;            }&#13;&#10;            else if (splitParts.Length == 1) // 未找到操作符，直接添加&#13;&#10;            {&#13;&#10;                currentParams.Add(splitParts[0].Trim());&#13;&#10;            }&#13;&#10;            else // 偷个懒，坐标最少两个参数，而只要有两个就会被逗号预先拆分，所以正常不会出现 1 3 以外的情况&#13;&#10;            {&#13;&#10;                throw new Exception($&quot;AdvWm: 标点参数解析时，关键字之间参数过少。\n表达式：{rawCoords}；\n出错位置：{part}&quot;);&#13;&#10;            }&#13;&#10;        }&#13;&#10;        XIVCoord finalCoord = isCurrentPolar&#13;&#10;            ? (XIVCoord)PolarCoord.Parse(currentParams.ToArray())&#13;&#10;            : (XIVCoord)CartesianCoord.Parse(currentParams.ToArray());&#13;&#10;        coords.Add(isCurrentPlus ? finalCoord : -finalCoord);&#13;&#10;&#13;&#10;        // 此时：[Cartesian1] [Cartesian2] [Cartesian3] [Polar1]&#13;&#10;        return coords.Aggregate((c1, c2) =&gt; c1 + c2);&#13;&#10;    }&#13;&#10;&#13;&#10;}&#13;&#10;&#13;&#10;public class CartesianCoord : XIVCoord&#13;&#10;{&#13;&#10;    public double X;&#13;&#10;    public double Y;&#13;&#10;    public double Z;&#13;&#10;&#13;&#10;    public string X_3 =&gt; X.ToString(&quot;0.###&quot;, System.Globalization.CultureInfo.InvariantCulture);&#13;&#10;    public string Y_3 =&gt; Y.ToString(&quot;0.###&quot;, System.Globalization.CultureInfo.InvariantCulture);&#13;&#10;    public string Z_3 =&gt; Z.ToString(&quot;0.###&quot;, System.Globalization.CultureInfo.InvariantCulture);&#13;&#10;&#13;&#10;    public CartesianCoord(double x, double y, double z)&#13;&#10;    {&#13;&#10;        X = x; Y = y; Z = z;&#13;&#10;    }&#13;&#10;&#13;&#10;    public override XIVCoord RotateTo(double θ)&#13;&#10;    {&#13;&#10;        var sin = Sin(θ);&#13;&#10;        var cos = Cos(θ);&#13;&#10;        (X, Y) = (-X * cos - Y * sin, X * sin - Y * cos);&#13;&#10;        return this;&#13;&#10;    }&#13;&#10;&#13;&#10;    public override XIVCoord MoveTo(double dx, double dy, double dz)&#13;&#10;    {&#13;&#10;        X += dx;&#13;&#10;        Y += dy;&#13;&#10;        Z += dz;&#13;&#10;        return this;&#13;&#10;    }&#13;&#10;&#13;&#10;    public override XIVCoord ScaleBy(double scaleX, double scaleY, double scaleZ)&#13;&#10;    {&#13;&#10;        X *= scaleX;&#13;&#10;        Y *= scaleY;&#13;&#10;        Z *= scaleZ;&#13;&#10;        return this;&#13;&#10;    }&#13;&#10;&#13;&#10;    public override CartesianCoord ToCartesian() =&gt; new CartesianCoord(X, Y, Z);&#13;&#10;&#13;&#10;    public override PolarCoord ToPolar()&#13;&#10;    {&#13;&#10;        double r = Sqrt(X * X + Y * Y);&#13;&#10;        double θ = Atan2(X, Y);&#13;&#10;        return new PolarCoord(r, θ, Z);&#13;&#10;    }&#13;&#10;&#13;&#10;    public override double Length =&gt; Sqrt(X * X + Y * Y + Z * Z);&#13;&#10;&#13;&#10;    public override string ToString() =&gt; $&quot;({X_3}, {Y_3}, {Z_3})&quot;;&#13;&#10;&#13;&#10;    public override string Jsonify() =&gt; $&quot;\&quot;X\&quot;: {X_3}, \&quot;Z\&quot;: {Y_3}, \&quot;Y\&quot;: {Z_3}, \&quot;Active\&quot;: true&quot;;&#13;&#10;&#13;&#10;    public static CartesianCoord Parse(params string[] coords)&#13;&#10;    {&#13;&#10;        switch (coords.Length)&#13;&#10;        {&#13;&#10;            case 2:&#13;&#10;                return ParseCoordsString(coords[0], coords[1]);&#13;&#10;            case 3:&#13;&#10;                return ParseCoordsString(coords[0], coords[1], coords[2]);&#13;&#10;            default:&#13;&#10;                throw Context.ArgCountError(&quot;CartesianCoord: 坐标构造函数&quot;, &quot;2-3&quot;, coords.Length, &quot;[&quot; + string.Join(&quot;], [&quot;, coords) + &quot;]&quot;);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private static CartesianCoord ParseCoordsString(string rawX, string rawY, string rawZ = null)&#13;&#10;    {&#13;&#10;        try&#13;&#10;        {&#13;&#10;            return new CartesianCoord(&#13;&#10;                MathParser.Parse(rawX),&#13;&#10;                MathParser.Parse(rawY),&#13;&#10;                rawZ == null ? 0 : MathParser.Parse(rawZ));&#13;&#10;        }&#13;&#10;        catch (Exception ex)&#13;&#10;        {&#13;&#10;            throw new ArgumentException($&quot;AdvWm: 直角坐标解析错误：{ex.Message}\n&quot; +&#13;&#10;                $&quot;原始数据：\nx = ({rawX}), \ny = ({rawY}), \nz = ({rawZ ?? &quot;null&quot;})&quot;);&#13;&#10;        }&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;public class PolarCoord : XIVCoord&#13;&#10;{&#13;&#10;    public double R;&#13;&#10;    public double θ;&#13;&#10;    public double Z;&#13;&#10;&#13;&#10;    public PolarCoord(double r, double θ, double z)&#13;&#10;    {&#13;&#10;        R = r; this.θ = θ; Z = z;&#13;&#10;    }&#13;&#10;&#13;&#10;    public override XIVCoord RotateTo(double θ)&#13;&#10;    {&#13;&#10;        this.θ += θ + PI;&#13;&#10;        return this;&#13;&#10;    }&#13;&#10;&#13;&#10;    public override XIVCoord MoveTo(double dx, double dy, double dz)&#13;&#10;        =&gt; ToCartesian().MoveTo(dx, dy, dz);&#13;&#10;&#13;&#10;    public override XIVCoord ScaleBy(double scaleX, double scaleY, double scaleZ)&#13;&#10;    {&#13;&#10;        if (Abs(scaleX - scaleY) &lt; 1e-5 &amp;&amp; scaleX &gt;= 1e-4)&#13;&#10;        {&#13;&#10;            R *= scaleX;&#13;&#10;            Z *= scaleZ;&#13;&#10;            return this;&#13;&#10;        }&#13;&#10;        else return ToCartesian().ScaleBy(scaleX, scaleY, scaleZ);&#13;&#10;    }&#13;&#10;&#13;&#10;    public override CartesianCoord ToCartesian()&#13;&#10;    {&#13;&#10;        double x = R * Sin(θ);&#13;&#10;        double y = R * Cos(θ);&#13;&#10;        return new CartesianCoord(x, y, Z);&#13;&#10;    }&#13;&#10;&#13;&#10;    public override PolarCoord ToPolar() =&gt; new PolarCoord(R, θ, Z);&#13;&#10;&#13;&#10;    public override double Length =&gt; Sqrt(R * R + Z * Z);&#13;&#10;&#13;&#10;    public override string ToString() =&gt; $&quot;(R={R}, θ={θ}, Z={Z})&quot;;&#13;&#10;&#13;&#10;    public override string Jsonify() =&gt; ToCartesian().Jsonify();&#13;&#10;&#13;&#10;    public static PolarCoord Parse(params string[] coords)&#13;&#10;    {&#13;&#10;        switch (coords.Length)&#13;&#10;        {&#13;&#10;            case 2:&#13;&#10;                return ParsePolarCoordsString(coords[0], coords[1]);&#13;&#10;            case 3:&#13;&#10;                return ParsePolarCoordsString(coords[0], coords[1], coords[2]);&#13;&#10;            default:&#13;&#10;                throw Context.ArgCountError(&quot;AdvWm: 极坐标构造函数&quot;, &quot;2-3&quot;, coords.Length, &quot;[&quot; + string.Join(&quot;], [&quot;, coords) + &quot;]&quot;);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private static PolarCoord ParsePolarCoordsString(string rawR, string rawθ, string rawZ = null)&#13;&#10;    {&#13;&#10;        try&#13;&#10;        {&#13;&#10;            return new PolarCoord(&#13;&#10;                MathParser.Parse(rawR),&#13;&#10;                MathParser.Parse(rawθ),&#13;&#10;                rawZ == null ? 0 : MathParser.Parse(rawZ));&#13;&#10;        }&#13;&#10;        catch (Exception ex)&#13;&#10;        {&#13;&#10;            throw new ArgumentException($&quot;AdvWm: 极坐标解析错误：{ex.Message}\n\n&quot; +&#13;&#10;                $&quot;原始数据：\nr = ({rawR}), \nθ = ({rawθ}), \nz = ({rawZ})&quot;);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;}&#13;&#10;&#13;&#10;#endregion XIVCoord&#13;&#10;&#13;&#10;#region Waymark(s)&#13;&#10;&#13;&#10;public enum WaymarkType { A, B, C, D, One, Two, Three, Four }&#13;&#10;public class Waymark&#13;&#10;{&#13;&#10;    public WaymarkType Type { get; set; }&#13;&#10;    public XIVCoord Coord { get; set; }&#13;&#10;    public bool Ignore { get; set; }&#13;&#10;    public bool Active { get; set; }&#13;&#10;&#13;&#10;    /// &lt;summary&gt;&#13;&#10;    /// 用于遍历时保证输出顺序&#13;&#10;    /// &lt;/summary&gt;&#13;&#10;    public static readonly string[] WaymarkNames = new string[] { &quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot; };&#13;&#10;    public static readonly WaymarkType[] WaymarkTypes = new WaymarkType[]&#13;&#10;    {&#13;&#10;        WaymarkType.A, WaymarkType.B, WaymarkType.C, WaymarkType.D,&#13;&#10;        WaymarkType.One, WaymarkType.Two, WaymarkType.Three, WaymarkType.Four&#13;&#10;    };&#13;&#10;&#13;&#10;    /// &lt;summary&gt;&#13;&#10;    /// 从用户输入的标点类型转化为实际 Type&#13;&#10;    /// &lt;/summary&gt;&#13;&#10;    public static readonly Dictionary&lt;string, WaymarkType&gt; TypeMap = Enumerable.Range(0, 8)&#13;&#10;        .ToDictionary(i =&gt; WaymarkNames[i], i =&gt; WaymarkTypes[i]);&#13;&#10;&#13;&#10;    public Waymark(WaymarkType type, XIVCoord coord = null, bool ignore = false)&#13;&#10;    {&#13;&#10;        Type = type;&#13;&#10;        Coord = coord ?? new CartesianCoord(0, 0, 0);&#13;&#10;        Active = coord != null;&#13;&#10;        Ignore = ignore;&#13;&#10;    }&#13;&#10;&#13;&#10;    public Waymark(string rawType, XIVCoord coord = null, bool ignore = false)&#13;&#10;    {&#13;&#10;        if (TypeMap.TryGetValue(rawType, out var mappedType))&#13;&#10;        {&#13;&#10;            Type = mappedType;&#13;&#10;        }&#13;&#10;        else&#13;&#10;        {&#13;&#10;            throw new Exception($&quot;AdvWm: {rawType} 不是合法的标点名之一（A B C D 1 2 3 4）。&quot;);&#13;&#10;        }&#13;&#10;        Coord = coord ?? new CartesianCoord(0, 0, 0);&#13;&#10;        Active = coord != null;&#13;&#10;        Ignore = ignore;&#13;&#10;    }&#13;&#10;&#13;&#10;    public static Waymark Parse(string rawType, string rawCoord, bool ignore = false)&#13;&#10;    {&#13;&#10;        Waymark wm = new Waymark(rawType, null, ignore);&#13;&#10;&#13;&#10;        switch (rawCoord.Trim().ToLower())&#13;&#10;        {&#13;&#10;            // 清除标点&#13;&#10;            case &quot;clear&quot;:&#13;&#10;                wm.Active = false;&#13;&#10;                wm.Coord = new CartesianCoord(0, 0, 0);&#13;&#10;                break;&#13;&#10;            // 变相地“清除”标点  不会有淡入淡出动画&#13;&#10;            case &quot;fakeclear&quot;:&#13;&#10;                wm.Active = true;&#13;&#10;                wm.Coord = new CartesianCoord(0, 0, 1000);&#13;&#10;                break;&#13;&#10;            default:&#13;&#10;                wm.Active = true;&#13;&#10;                wm.Coord = XIVCoord.ParseRawData(rawCoord);&#13;&#10;                break;&#13;&#10;        }&#13;&#10;&#13;&#10;        return wm;&#13;&#10;    }&#13;&#10;&#13;&#10;    public string Jsonify() // 脚本调用不了 Json 的方法。。？&#13;&#10;    {&#13;&#10;        if (Ignore)&#13;&#10;            return &quot;&quot;;&#13;&#10;        if (Active)&#13;&#10;            return $&quot;\&quot;{Type}\&quot;: {{ {Coord.Jsonify()}, \&quot;Active\&quot;: true }}&quot;;&#13;&#10;        else&#13;&#10;            return $&quot;\&quot;{Type}\&quot;: {{}}&quot;;&#13;&#10;    }&#13;&#10;&#13;&#10;    public override string ToString() =&gt; Jsonify();&#13;&#10;}&#13;&#10;&#13;&#10;public sealed class Waymarks : IEnumerable&lt;Waymark&gt;&#13;&#10;{&#13;&#10;    private readonly Dictionary&lt;WaymarkType, Waymark&gt; _waymarks;&#13;&#10;    public bool Log = true;&#13;&#10;    public bool LocalOnly = true;&#13;&#10;&#13;&#10;    public Waymarks()&#13;&#10;    {&#13;&#10;        _waymarks = new Dictionary&lt;WaymarkType, Waymark&gt;();&#13;&#10;        foreach (var type in Waymark.WaymarkTypes)&#13;&#10;        {&#13;&#10;            _waymarks[type] = new Waymark(type, ignore: true);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    public Waymark this[WaymarkType type]&#13;&#10;    {&#13;&#10;        get =&gt; _waymarks[type];&#13;&#10;        set =&gt; _waymarks[type] = value;&#13;&#10;    }&#13;&#10;&#13;&#10;    IEnumerator IEnumerable.GetEnumerator() =&gt; GetEnumerator();&#13;&#10;    public IEnumerator&lt;Waymark&gt; GetEnumerator()&#13;&#10;    {&#13;&#10;        foreach (var type in Waymark.WaymarkTypes)&#13;&#10;        {&#13;&#10;            if (_waymarks.TryGetValue(type, out Waymark waymark))&#13;&#10;            {&#13;&#10;                yield return waymark;&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    public void Add(Waymark wm)&#13;&#10;    {&#13;&#10;        if (wm == null || wm.Ignore) return;&#13;&#10;        else _waymarks[wm.Type] = wm;&#13;&#10;    }&#13;&#10;&#13;&#10;    public string Jsonify()&#13;&#10;    {&#13;&#10;        var jsonList = _waymarks.Values.Where(wm =&gt; wm?.Ignore == false)&#13;&#10;            .Select(wm =&gt; &quot;    &quot; + wm.Jsonify()).ToList();&#13;&#10;        if (!Log)&#13;&#10;            jsonList.Add($&quot;    \&quot;Log\&quot;: false&quot;);&#13;&#10;        if (!LocalOnly)&#13;&#10;            jsonList.Add($&quot;    \&quot;LocalOnly\&quot;: false&quot;);&#13;&#10;        string data = string.Join(&quot;,\n&quot;, jsonList);&#13;&#10;        return $&quot;{{\n{string.Join(&quot;,\n&quot;, jsonList)}\n}}&quot;;&#13;&#10;    }&#13;&#10;    public override string ToString() =&gt; Jsonify();&#13;&#10;&#13;&#10;    public void Mark()&#13;&#10;    {&#13;&#10;        RealPlugin.plug.InvokeNamedCallback(&quot;place&quot;, this.Jsonify());&#13;&#10;        //RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, $&quot;/e {this}&quot;);&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;#endregion Waymark(s)&#13;&#10;&#13;&#10;public static class WaymarksEncoder&#13;&#10;{&#13;&#10;    static bool IsSelfAnonymous =&gt; Interpreter.StaticHelpers.GetScalarVariable(true, &quot;AdvWm_Anonymous&quot;) != null;&#13;&#10;&#13;&#10;    private static int CoordToInt(float coord)&#13;&#10;    {&#13;&#10;        // 标点数据只有三位精度。&#13;&#10;        // float 在 ±16384 内时可保证第三位小数准确，小于这个阈值的最大 2^n / 1000 为 ±8388.608，恰好 24 bit&#13;&#10;        int encodedInt = (int)Round((double)coord * 1000);&#13;&#10;        if (encodedInt &lt; 0)            // -8388608 ~ -1&#13;&#10;            encodedInt += 0xFFFFFF;    // 转换为 8388608 (0x800000) ~ 16777215 (0xFFFFFF)&#13;&#10;        return encodedInt;&#13;&#10;    }&#13;&#10;&#13;&#10;    static float IntToCoord(int encodedInt) =&gt; (encodedInt &gt; 0x7FFFFF ? encodedInt - 0xFFFFFF : encodedInt) / 1000f;&#13;&#10;&#13;&#10;    /// &lt;summary&gt; 通过 6 字节 int 解码 10XXXXXX ID &lt;/summary&gt;&#13;&#10;    static uint? CoordToId(float coord) =&gt; coord == 0 ? null : (uint?)(CoordToInt(coord) + 0x10000000);&#13;&#10;&#13;&#10;    /// &lt;summary&gt; 将 id 编码为两个 3 字节精度的坐标：80.00 - 120.95 &lt;/summary&gt;&#13;&#10;    static (float, float) IdToCoords(uint id)&#13;&#10;    {&#13;&#10;        id -= 0x10000000;&#13;&#10;        return (80 + ((id &gt;&gt; 12) &amp; 0xFFF) / 100f, 80 + (id &amp; 0xFFF) / 100f);&#13;&#10;    }&#13;&#10;&#13;&#10;&#13;&#10;    /// &lt;summary&gt; 解码当前标点为文本，并检测发送者 &lt;/summary&gt;&#13;&#10;    public static void DecodeFromWaymarksAndShow()&#13;&#10;    {&#13;&#10;        List&lt;byte&gt; byteList = new List&lt;byte&gt;();&#13;&#10;        var waymarks = Triggernometry.Utilities.Memory.Waymarks.Read();&#13;&#10;        uint? senderId = CoordToId(waymarks.A.Z);&#13;&#10;        string senderDesc = &quot;Someone&quot;;&#13;&#10;        if (senderId != null)&#13;&#10;        {&#13;&#10;            var sender = BridgeFFXIV.GetIdEntity(senderId.Value.ToString(&quot;X&quot;));&#13;&#10;            senderDesc = $&quot;{sender.GetValue(&quot;name&quot;)} ({sender.GetValue(&quot;jobEN3&quot;)})&quot;;&#13;&#10;        }&#13;&#10;        foreach (var waymark in waymarks.Skip(1)) // 跳过用于表明密语消息的 A 点&#13;&#10;        {&#13;&#10;            if (!waymark.Active) break;&#13;&#10;            foreach (var coord in new[] { waymark.X, waymark.Y, waymark.Z })&#13;&#10;            {&#13;&#10;                int encodedInt = CoordToInt(coord);&#13;&#10;                // 从而将 ±8388.608 以内的 float 转换为 24 bit 数据，再分解为 3 字节&#13;&#10;                byteList.Add((byte)((encodedInt &gt;&gt; 16) &amp; 0xFF));   // 高8位&#13;&#10;                byteList.Add((byte)((encodedInt &gt;&gt; 8) &amp; 0xFF));    // 中8位&#13;&#10;                byteList.Add((byte)(encodedInt &amp; 0xFF));           // 低8位&#13;&#10;            }&#13;&#10;        }&#13;&#10;        string msg = Encoding.UTF8.GetString(byteList.ToArray());&#13;&#10;        AdvWm.Log($&quot;[AdvWm] Secret Message:\n{senderDesc} says:\n{msg}&quot;);&#13;&#10;    }&#13;&#10;&#13;&#10;    /// &lt;summary&gt; 编码一串文本，以标点形式发送 &lt;/summary&gt;&#13;&#10;    public static void EncodeAndSendWaymarks(string msg, bool anonymous)&#13;&#10;    {&#13;&#10;        bool waymarkChkEnabled = true;&#13;&#10;        try&#13;&#10;        {&#13;&#10;            waymarkChkEnabled = PostNamazuController.DetectAndEnableWaymarkChk();&#13;&#10;            byte[] byteArray = Encoding.UTF8.GetBytes(msg);&#13;&#10;            if (byteArray.Length &gt; 63)&#13;&#10;                throw new Exception(&quot;输入字符串过长，不能超过 63 字节。&quot;);&#13;&#10;&#13;&#10;            Array.Resize(ref byteArray, 63);&#13;&#10;&#13;&#10;            List&lt;int&gt; integers = new List&lt;int&gt;();&#13;&#10;            for (int i = 0; i &lt; 21; i++)&#13;&#10;            {&#13;&#10;                integers.Add((byteArray[i * 3] &lt;&lt; 16) | (byteArray[i * 3 + 1] &lt;&lt; 8) | (byteArray[i * 3 + 2]));&#13;&#10;            }&#13;&#10;            string advWm = $&quot;Local: false&quot;;&#13;&#10;            float az = anonymous ? 0 : IntToCoord((int)(BridgeFFXIV.PlayerId - 0x10000000));&#13;&#10;            advWm += $&quot;\nA: {0xFF14 / 1000f}, {0xFF14 / 1000f}, {az}&quot;;&#13;&#10;            string[] names = new string[] { &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;1&quot;, &quot;2&quot;, &quot;3&quot;, &quot;4&quot; };&#13;&#10;            for (int i = 0; i &lt; 7; i++)&#13;&#10;            {&#13;&#10;                if (integers[i * 3] == 0 &amp;&amp; integers[i * 3 + 1] == 0 &amp;&amp; integers[i * 3 + 2] == 0)&#13;&#10;                    advWm += $&quot;\n{names[i]}: clear&quot;;&#13;&#10;                else&#13;&#10;                {&#13;&#10;                    float x = IntToCoord(integers[i * 3]);&#13;&#10;                    float y = IntToCoord(integers[i * 3 + 1]);&#13;&#10;                    float z = IntToCoord(integers[i * 3 + 2]);&#13;&#10;                    advWm += $&quot;\n{names[i]}: {x}, {y}, {z}&quot;;&#13;&#10;                }&#13;&#10;            }&#13;&#10;            RealPlugin.plug.InvokeNamedCallback(&quot;AdvWm&quot;, advWm);&#13;&#10;        }&#13;&#10;        catch (Exception e) { AdvWm.Log($&quot;发送失败：{e.Message}&quot;); }&#13;&#10;        finally { PostNamazuController.ResetWaymarkChk(waymarkChkEnabled); }&#13;&#10;    }&#13;&#10;&#13;&#10;    public static void Ask(bool wantAnonymous)&#13;&#10;        =&gt; AskOrAnswerByWaymarkA(0xFF14 / 1000f * (wantAnonymous ? -1 : 1), true);&#13;&#10;&#13;&#10;    public static void Answer()&#13;&#10;        =&gt; AskOrAnswerByWaymarkA(0.14f, false);&#13;&#10;&#13;&#10;    /// &lt;summary&gt; &#13;&#10;    /// 通过改变标点 A，发起关于谁在使用此工具箱的询问或应答。&#13;&#10;    /// x, y 各三字节精度，用于存储 ID；&#13;&#10;    /// z = ±0xff14 / 1000 代表发起询问（负值代表希望匿名）；±0.14 代表应答（负值代表没开启标点）。&#13;&#10;    /// &lt;/summary&gt;&#13;&#10;    private static void AskOrAnswerByWaymarkA(float z, bool isAsk)&#13;&#10;    {&#13;&#10;        bool waymarkChkEnabled = true;&#13;&#10;        try&#13;&#10;        {&#13;&#10;            waymarkChkEnabled = PostNamazuController.DetectAndEnableWaymarkChk();&#13;&#10;            string advWm = $&quot;Local: false&quot;;&#13;&#10;            (float ax, float ay) = IdToCoords(BridgeFFXIV.PlayerId);&#13;&#10;            if (IsSelfAnonymous) // real anonymous&#13;&#10;                (ax, ay) = (80, 80);&#13;&#10;            if (!isAsk &amp;&amp; !waymarkChkEnabled)&#13;&#10;                z *= -1;&#13;&#10;            advWm += $&quot;\nA: {ax}, {ay}, {z}&quot;;&#13;&#10;            RealPlugin.plug.InvokeNamedCallback(&quot;AdvWm&quot;, advWm);&#13;&#10;        }&#13;&#10;        catch (Exception e) { AdvWm.Log($&quot;发送失败：{e.Message}&quot;); }&#13;&#10;        finally { PostNamazuController.ResetWaymarkChk(waymarkChkEnabled); }&#13;&#10;    }&#13;&#10;&#13;&#10;    public static void GetUsersResult()&#13;&#10;    {&#13;&#10;        var users = Interpreter.StaticHelpers.GetListVariable(false, &quot;AdvWm_users&quot;)?.Values?.Select(v =&gt; new UserEntry(v.ToString())).ToList();&#13;&#10;        if (users == null) return;&#13;&#10;        var ask = users?.FirstOrDefault(u =&gt; u.Asked);&#13;&#10;        // 查询者非自己且要求匿名时，不显示结果&#13;&#10;        if (ask?.Id != BridgeFFXIV.PlayerId &amp;&amp; (ask?.WantAnonymous ?? true) &amp;&amp; !IsSelfAnonymous) return;&#13;&#10;        var answers = users?.Where(u =&gt; !u.Asked).ToList();&#13;&#10;        string msg = $&quot;[AdvWm] 看看誰是挂友！&lt;se.10&gt;\nAsked by: \n  · {ask}\nUsers:\n  · {string.Join(&quot;\n  · &quot;, answers)}&quot;;&#13;&#10;        AdvWm.Log(msg);&#13;&#10;    }&#13;&#10;&#13;&#10;    public class UserEntry&#13;&#10;    {&#13;&#10;        public uint Id;&#13;&#10;        public float Z;&#13;&#10;        public bool Asked =&gt; Abs(Abs(Z) - 0xFF14 / 1000f) &lt; 0.001;&#13;&#10;        public bool EnabledWaymark =&gt; Asked || Z &gt; 0;&#13;&#10;        public bool WantAnonymous =&gt; Asked &amp;&amp; Z &lt; 0;&#13;&#10;        /// &lt;summary&gt; 接收如 10ABCDEF, -0.14 的输入，前面是 id，后面是标点的 z 坐标&lt;/summary&gt;&#13;&#10;        public UserEntry(string data)&#13;&#10;        {&#13;&#10;            var d = data.Split(',');&#13;&#10;            Id = uint.Parse(d[0], System.Globalization.NumberStyles.HexNumber);&#13;&#10;            Z = float.Parse(d[1], System.Globalization.CultureInfo.InvariantCulture);&#13;&#10;        }&#13;&#10;        public override string ToString()&#13;&#10;        {&#13;&#10;            bool anonymous = IsSelfAnonymous ? false : WantAnonymous;&#13;&#10;            var entity = BridgeFFXIV.GetIdEntity(Id.ToString(&quot;X&quot;));&#13;&#10;            string str = anonymous ? &quot;&quot; : entity.GetValue(&quot;name&quot;).ToString();&#13;&#10;            if (str == &quot;&quot;)&#13;&#10;                str = &quot;匿名&quot;;&#13;&#10;            else&#13;&#10;                str += $&quot; ({entity.GetValue(&quot;jobEN3&quot;)})&quot;;&#13;&#10;            if (!EnabledWaymark)&#13;&#10;                str += &quot; [未使用標点]&quot;;&#13;&#10;            return str;&#13;&#10;        }&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;public static class PostNamazuController&#13;&#10;{&#13;&#10;    private static CheckBox _waymarkCbx;&#13;&#10;    private static CheckBox WaymarkCbx =&gt; _waymarkCbx ?? GetWayMarkCbx();&#13;&#10;    private static TabPage TabPage =&gt; RealPlugin.InstanceHook(null, &quot;PostNamazu.PostNamazu&quot;).TabPage;&#13;&#10;    private static CheckBox GetWayMarkCbx() =&gt; SearchWayMarkCbxIn(TabPage);&#13;&#10;    private static CheckBox SearchWayMarkCbxIn(Control parent)&#13;&#10;    {&#13;&#10;        foreach (Control ctrl in parent.Controls)&#13;&#10;        {&#13;&#10;            if (ctrl is CheckBox checkBox &amp;&amp; checkBox.Text.ToLower() == &quot;waymark&quot;)&#13;&#10;            {&#13;&#10;                return checkBox;&#13;&#10;            }&#13;&#10;            else if (ctrl?.HasChildren == true)&#13;&#10;            {&#13;&#10;                CheckBox foundCbx = SearchWayMarkCbxIn(ctrl);&#13;&#10;                if (foundCbx != null) return foundCbx;&#13;&#10;            }&#13;&#10;        }&#13;&#10;        return null;&#13;&#10;    }&#13;&#10;&#13;&#10;    public static bool DetectAndEnableWaymarkChk()&#13;&#10;    {&#13;&#10;        if (WaymarkCbx.InvokeRequired)&#13;&#10;        {&#13;&#10;            return (bool)WaymarkCbx.Invoke(new Func&lt;bool&gt;(DetectAndEnableWaymarkChk));&#13;&#10;        }&#13;&#10;        bool current = WaymarkCbx.Checked;&#13;&#10;        if (WaymarkCbx.Checked == false)&#13;&#10;            WaymarkCbx.Checked = true;&#13;&#10;        return current;&#13;&#10;    }&#13;&#10;&#13;&#10;    public static void ResetWaymarkChk(bool previousChecked)&#13;&#10;    {&#13;&#10;        if (WaymarkCbx.InvokeRequired)&#13;&#10;        {&#13;&#10;            WaymarkCbx.Invoke(new Action&lt;bool&gt;(ResetWaymarkChk), previousChecked);&#13;&#10;            return;&#13;&#10;        }&#13;&#10;        if (!previousChecked) WaymarkCbx.Checked = false;&#13;&#10;    }&#13;&#10;}" ActionType="ExecuteScript" Description="【代码】" DescBgColor="acf" DescriptionOverride="True"/>
              <Action OrderNumber="2" LogMessageText="AdvWm_Init" LogProcess="True" ActionType="LogMessage">
                <Condition Enabled="true" Grouping="Or">
                  <ConditionSingle Enabled="true" ExpressionL="${ecallback:AdvWm}" ExpressionTypeL="String" ExpressionR="1" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                </Condition>
              </Action>
              <Action OrderNumber="3" FolderId="1f85881f-8c62-4317-9358-0d60cb95869d" TriggerOp="EnableTrigger" TriggerId="8fe11c44-a769-4d56-b68f-da541ee8041a" ActionType="Folder"/>
              <Action OrderNumber="4" FolderId="c650049e-1770-43d6-a8bd-07526d611548" TriggerOp="EnableTrigger" TriggerId="8fe11c44-a769-4d56-b68f-da541ee8041a" ActionType="Folder"/>
              <Action OrderNumber="5" FolderId="338ca70c-8038-4c4e-af98-1b668c34aaed" TriggerOp="EnableTrigger" TriggerId="8fe11c44-a769-4d56-b68f-da541ee8041a" ActionType="Folder"/>
              <Action OrderNumber="6" TriggerOp="EnableTrigger" TriggerId="8fe11c44-a769-4d56-b68f-da541ee8041a" ActionType="Trigger"/>
              <Action OrderNumber="7" TriggerOp="EnableTrigger" TriggerId="87fd5f27-949b-4fe2-a74b-bbf6e6006d3e" ActionType="Trigger"/>
              <Action OrderNumber="8" TriggerOp="EnableTrigger" TriggerId="b682627d-2bc3-4491-96f2-ccf7c24db304" ActionType="Trigger"/>
            </Actions>
            <Condition Enabled="true" Grouping="Or">
              <ConditionSingle Enabled="true" ExpressionL="${ecallback:AdvWm}" ExpressionTypeL="String" ExpressionR="0" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
            </Condition>
          </Trigger>
          <Trigger Enabled="true" Sequential="True" Name="2. 消息文本" Id="804bfcc2-e03b-4c88-98ca-5f8c15ef0ef0" RegularExpression="^AdvWm_Init">
            <Actions>
              <Action OrderNumber="1" NamedCallbackName="command" NamedCallbackParam="/e ${if: ${f:contain(&quot; &quot;):${_me.name}} ? &quot;已激活：高級標点工具箱&quot; : &quot;已启用：高级标点工具箱&quot; }&#13;&#10;AdvWm v${env:version} by 阿洛 MnFeN" ActionType="NamedCallback"/>
            </Actions>
          </Trigger>
          <Trigger Enabled="true" Name="场地标点：/e mk [正点半径] [斜点半径]?    如 &quot;/e mk 15&quot;  &quot;/e mk 18 10&quot;" Id="17288de7-16c1-44b9-b240-8cc48fb94269" RegularExpression="^.{15}\S+ 00:0038:: *mk +(?&lt;card&gt;[^ ]+)(?: +(?&lt;intercard&gt;[^ ]+))? *(?&lt;center&gt;@ *(?&lt;x0&gt;[^ ]+) +(?&lt;y0&gt;[^ ]+)(?: +(?&lt;z0&gt;[^ ]+))? *)?$">
            <Actions>
              <Action OrderNumber="1" ActionType="Placeholder" Asynchronous="False" Description="需求：高级标点工具箱，没有的在远程触发器 - 自检 里找" DescriptionOverride="True"/>
              <Action OrderNumber="2" NamedCallbackName="AdvWm" NamedCallbackParam="action: circle&#13;&#10;waymarks: ADCB&#13;&#10;r: ${card}&#13;&#10;center: ${n: ${x0} ?? 100}, ${n: ${y0} ?? 100}, ${n: ${z0} ?? ${_me.z}}" ActionType="NamedCallback" Asynchronous="False" Description="ABCD" DescriptionOverride="True"/>
              <Action OrderNumber="3" NamedCallbackName="AdvWm" NamedCallbackParam="action: circle&#13;&#10;waymarks: 4321&#13;&#10;θ: -3/4 * π&#13;&#10;r: (${intercard} ?? ${card})&#13;&#10;center: ${n: ${x0} ?? 100}, ${n: ${y0} ?? 100}, ${n: ${z0} ?? ${_me.z}}" Enabled="False" ActionType="NamedCallback" Asynchronous="False" Description="1234（北侧从左到右 4A1）" DescriptionOverride="True"/>
              <Action OrderNumber="4" NamedCallbackName="AdvWm" NamedCallbackParam="action: circle&#13;&#10;waymarks: 4321&#13;&#10;θ: -1/4 * π&#13;&#10;r: (${intercard} ?? ${card})&#13;&#10;center: ${n: ${x0} ?? 100}, ${n: ${y0} ?? 100}, ${n: ${z0} ?? ${_me.z}}" ActionType="NamedCallback" Asynchronous="False" Description="1234（北侧从左到右 1A2）" DescriptionOverride="True"/>
              <Action OrderNumber="5" ActionType="Placeholder" Asynchronous="False" Description="应用本地标点（使全队可见）： " DescriptionOverride="True"/>
              <Action OrderNumber="6" NamedCallbackName="command" NamedCallbackParam="/waymark save 30" ActionType="NamedCallback" Asynchronous="False"/>
              <Action OrderNumber="7" NamedCallbackName="command" NamedCallbackParam="/waymark preset 30" ActionType="NamedCallback" Asynchronous="False"/>
              <Action OrderNumber="8" LogMessageText="[00:00:00.000] 0 00:0038::mk 15 10" LogProcess="True" Enabled="False" ActionType="LogMessage" Description="如果解析插件真的完全不工作，双击这行在 mk 之后输入标点参数，右键测试这行（左面的对号不要点）" DescBgColor="fdd" DescTextColor="000" DescriptionOverride="True"/>
            </Actions>
          </Trigger>
        </Triggers>
      </Folder>
      <Folder Id="6419e403-5a96-405c-9339-63cebee042b3" Name="高级标点工具箱 AdvWm 旧版本 v2.x（仅兼容）" Enabled="true">
        <Folders>
          <Folder Id="caec37c6-bf4a-4d59-af50-786bc241adc1" Name="场地标点" Enabled="true">
            <Folders>
              <Folder Id="e5fb89be-f4a5-4110-940a-d5c230c15cdb" Name="debug" Enabled="false">
                <Folders/>
                <Triggers>
                  <Trigger Enabled="false" Name="测试循环标点     B：自己-B 线性    AC：自己-C 径向" Id="19ff6e25-1f86-45fb-95a2-93fb8e0236e2" RegularExpression="^.{15}\S+ 1C:Add:(?&lt;wmid&gt;\d+):.{8}:(?&lt;pn&gt;[^:]+):(?&lt;x&gt;[^:]+):(?&lt;y&gt;[^:]+):(?&lt;z&gt;[^:]+)">
                    <Actions>
                      <Action OrderNumber="1" VariableOp="SetNumeric" VariableName="1" VariableExpression="${v:1} + 1" ActionType="Variable"/>
                      <Action OrderNumber="2" VariableOp="SetString" VariableName="AdmWm_test_A" VariableExpression="${x}:${y}:${z}" ActionType="Variable" Asynchronous="False">
                        <Condition Enabled="true" Grouping="Or">
                          <ConditionSingle Enabled="true" ExpressionL="${wmid}" ExpressionTypeL="String" ExpressionR="0" ExpressionTypeR="String" ConditionType="NumericEqual"/>
                        </Condition>
                      </Action>
                      <Action OrderNumber="3" LogMessageText="AdvWm_linearConnect:start:${_me.x}:${_me.y}:${_me.z}:end:${x}:${y}:${z}:waymarkers:ABCD1234" LogProcess="True" VariableOp="SetString" ActionType="LogMessage" Asynchronous="False">
                        <Condition Enabled="true" Grouping="Or">
                          <ConditionSingle Enabled="true" ExpressionL="${wmid}" ExpressionTypeL="String" ExpressionR="1" ExpressionTypeR="String" ConditionType="NumericEqual"/>
                        </Condition>
                      </Action>
                      <Action OrderNumber="4" LogMessageText="AdvWm_polarConnect:center:${v:AdmWm_test_A}:start:${_me.x}:${_me.y}:${_me.z}:end:${x}:${y}:${z}:waymarkers:BCD1234" LogProcess="True" VariableOp="SetString" ActionType="LogMessage" Asynchronous="False">
                        <Condition Enabled="true" Grouping="Or">
                          <ConditionSingle Enabled="true" ExpressionL="${wmid}" ExpressionTypeL="String" ExpressionR="2" ExpressionTypeR="String" ConditionType="NumericEqual"/>
                        </Condition>
                      </Action>
                      <Action OrderNumber="5" LogMessageText="${_event}" LogProcess="True" ActionType="LogMessage" Asynchronous="False">
                        <Condition Enabled="true" Grouping="Or">
                          <ConditionSingle Enabled="true" ExpressionL="${wmid} = 1 || ${wmid} = 2" ExpressionTypeL="Numeric" ExpressionR="1" ExpressionTypeR="Numeric" ConditionType="NumericEqual"/>
                        </Condition>
                      </Action>
                    </Actions>
                    <Condition Enabled="true" Grouping="Or">
                      <ConditionSingle Enabled="true" ExpressionL="${pn}" ExpressionTypeL="String" ExpressionR="${_me}" ExpressionTypeR="String" ConditionType="StringEqualNocase"/>
                    </Condition>
                  </Trigger>
                  <Trigger Enabled="false" Name="测试   A-B：线性   A-C：径向" Id="0b41db36-4f48-4ac3-9c8f-acbed5777fa1" RegularExpression="^.{15}\S+ 1C:Add:(?&lt;wmid&gt;\d+):.{8}:(?&lt;pn&gt;[^:]+):(?&lt;x&gt;[^:]+):(?&lt;y&gt;[^:]+):(?&lt;z&gt;[^:]+)">
                    <Actions>
                      <Action OrderNumber="1" VariableOp="SetString" VariableName="AdmWm_test_start" VariableExpression="start:${x}:${y}:${z}" ActionType="Variable" Asynchronous="False">
                        <Condition Enabled="true" Grouping="Or">
                          <ConditionSingle Enabled="true" ExpressionL="${wmid}" ExpressionTypeL="String" ExpressionR="0" ExpressionTypeR="String" ConditionType="NumericEqual"/>
                        </Condition>
                      </Action>
                      <Action OrderNumber="2" LogMessageText="AdvWm:linear:${v:AdmWm_test_start}:end:${x}:${y}:${z}:waymarkers:ABCD1234" LogProcess="True" VariableOp="SetString" ActionType="LogMessage" Asynchronous="False">
                        <Condition Enabled="true" Grouping="Or">
                          <ConditionSingle Enabled="true" ExpressionL="${wmid}" ExpressionTypeL="String" ExpressionR="1" ExpressionTypeR="String" ConditionType="NumericEqual"/>
                        </Condition>
                      </Action>
                      <Action OrderNumber="3" LogMessageText="AdvWm:polar:center:${_me.x}:${_me.y}:${v:AdmWm_test_start}:end:${x}:${y}:${z}:waymarkers:ABCD1234" LogProcess="True" VariableOp="SetString" ActionType="LogMessage" Asynchronous="False">
                        <Condition Enabled="true" Grouping="Or">
                          <ConditionSingle Enabled="true" ExpressionL="${wmid}" ExpressionTypeL="String" ExpressionR="2" ExpressionTypeR="String" ConditionType="NumericEqual"/>
                        </Condition>
                      </Action>
                    </Actions>
                    <Condition Enabled="true" Grouping="Or">
                      <ConditionSingle Enabled="true" ExpressionL="${pn}" ExpressionTypeL="String" ExpressionR="${_me}" ExpressionTypeR="String" ConditionType="StringEqualNocase"/>
                    </Condition>
                  </Trigger>
                </Triggers>
              </Folder>
              <Folder Id="447f3d6e-b640-460c-b051-d69e8de91981" Name="恢复 / 清空标点" Enabled="true">
                <Folders/>
                <Triggers>
                  <Trigger Enabled="true" Name="Load 队列" Id="f6e98f6c-9923-4205-bffc-b2bd7d6a3ec4" RegularExpression="^AdvWm_loadQueue:(?&lt;t&gt;.+)$">
                    <Actions>
                      <Action OrderNumber="1" ActionType="Placeholder" Description="本触发器会被所有标点指令打断" DescriptionOverride="True"/>
                      <Action OrderNumber="2" NamedCallbackName="place" NamedCallbackParam="load" ActionType="NamedCallback" ExecutionDelayExpression="(${t}) * 1000"/>
                    </Actions>
                  </Trigger>
                  <Trigger Enabled="true" Name="Load" Id="6421d771-d512-467c-b3c7-86458077c5f3" RegularExpression="^AdvWm_load$">
                    <Actions>
                      <Action OrderNumber="1" NamedCallbackName="place" NamedCallbackParam="load" ActionType="NamedCallback"/>
                    </Actions>
                  </Trigger>
                  <Trigger Enabled="true" Name="Clear" Id="b9761adb-f83c-4990-92af-5993b48bfae1" RegularExpression="^AdvWm_clear$">
                    <Actions>
                      <Action OrderNumber="1" NamedCallbackName="place" NamedCallbackParam="{&#13;&#10;  &quot;A&quot;:{}, &#13;&#10;  &quot;B&quot;:{}, &#13;&#10;  &quot;C&quot;:{}, &#13;&#10;  &quot;D&quot;:{}, &#13;&#10;  &quot;One&quot;:{}, &#13;&#10;  &quot;Two&quot;:{}, &#13;&#10;  &quot;Three&quot;:{}, &#13;&#10;  &quot;Four&quot;:{}&#13;&#10;}" ActionType="NamedCallback"/>
                    </Actions>
                  </Trigger>
                  <Trigger Enabled="true" Name="Clear 队列" Id="abe85090-a54f-4da0-b1c2-bcac23461fa8" RegularExpression="^AdvWm_clearQueue:(?&lt;t&gt;.+)$">
                    <Actions>
                      <Action OrderNumber="1" ActionType="Placeholder" Description="本触发器会被所有标点指令打断" DescriptionOverride="True"/>
                      <Action OrderNumber="2" NamedCallbackName="place" NamedCallbackParam="{&#13;&#10;  &quot;A&quot;:{}, &#13;&#10;  &quot;B&quot;:{}, &#13;&#10;  &quot;C&quot;:{}, &#13;&#10;  &quot;D&quot;:{}, &#13;&#10;  &quot;One&quot;:{}, &#13;&#10;  &quot;Two&quot;:{}, &#13;&#10;  &quot;Three&quot;:{}, &#13;&#10;  &quot;Four&quot;:{}&#13;&#10;}" ActionType="NamedCallback" ExecutionDelayExpression="(${t}) * 1000"/>
                    </Actions>
                  </Trigger>
                  <Trigger Enabled="true" Name="转发排队" Id="4098f050-f1f4-4680-8459-b6a4c14c6c97" RegularExpression="^AdvWm_(?&lt;type&gt;clear|load):(?&lt;t&gt;.+)$">
                    <Actions>
                      <Action OrderNumber="1" ActionType="Placeholder" Asynchronous="False" Description="用这个转发，以免同时执行一条标点和一条排队取消时，后者立刻被前者打断" DescriptionOverride="True"/>
                      <Action OrderNumber="2" LogMessageText="AdvWm_${type}Queue:${n: max(0, ${t} - 0.5) }" LogProcess="True" ActionType="LogMessage" ExecutionDelayExpression="${t} &gt; 0.5 ? 0.5 : ${t}" Asynchronous="False"/>
                    </Actions>
                  </Trigger>
                </Triggers>
              </Folder>
              <Folder Id="1d176462-6deb-4b8f-8bd5-2834fd6d6110" Name="本地标点转为网络标点" Enabled="true">
                <Folders/>
                <Triggers>
                  <Trigger Enabled="true" Sequential="True" Name="本地标点转为网络标点" Id="37f3ed5d-7d34-468a-860a-e73290fb598c" RegularExpression="^AdvWm_public$">
                    <Actions>
                      <Action OrderNumber="1" NamedCallbackName="command" NamedCallbackParam="/waymark save 30" ActionType="NamedCallback"/>
                      <Action OrderNumber="2" NamedCallbackName="command" NamedCallbackParam="/waymark preset 30" ActionType="NamedCallback"/>
                      <Action OrderNumber="3" ActionType="Placeholder" Asynchronous="False" Description="如果你无论如何一定想在 30 号位置存自己的标点，把上面两个 30 换成你不用的槽位。" DescriptionOverride="True"/>
                    </Actions>
                  </Trigger>
                </Triggers>
              </Folder>
            </Folders>
            <Triggers>
              <Trigger Enabled="true" Name="径向插值标点 polarConnect" Id="b2de78a9-8088-43bf-8b3e-67a50bd08dac" RegularExpression="^AdvWm_polarConnect:[Cc]enter:(?&lt;xc&gt;[^:]+):(?&lt;yc&gt;[^:]+)(?::[^:]+)?:[Ss]tart:(?&lt;x0&gt;[^:]+):(?&lt;y0&gt;[^:]+):(?&lt;z0&gt;[^:]+):[Ee]nd:(?&lt;x1&gt;[^:]+):(?&lt;y1&gt;[^:]+):(?&lt;z1&gt;[^:]+):[Ww]aymarkers:(?&lt;wm&gt;[^:]+)">
                <Actions>
                  <Action OrderNumber="1" TriggerOp="CancelTrigger" TriggerId="f6e98f6c-9923-4205-bffc-b2bd7d6a3ec4" ActionType="Trigger" Asynchronous="False"/>
                  <Action OrderNumber="2" TriggerOp="CancelTrigger" TriggerId="abe85090-a54f-4da0-b1c2-bcac23461fa8" ActionType="Trigger" Asynchronous="False"/>
                  <Action OrderNumber="3" ActionType="Placeholder" Description="初始化" DescriptionOverride="True"/>
                  <Action OrderNumber="4" VariableOp="SetNumeric" VariableName="AdvWm_len" VariableExpression="${f:length:${wm}}" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="5" DictVariableOp="Build" DictVariableTarget="AdvWm_WmMapping" DictVariableValue="=,A=A,B=B,C=C,D=D,1=One,2=Two,3=Three,4=Four" DictTargetPersist="True" ActionType="DictVariable" Asynchronous="False">
                    <Condition Enabled="true" Grouping="Or">
                      <ConditionSingle Enabled="true" ExpressionL="${pd:AdvWm_WmMapping.size}" ExpressionTypeL="String" ExpressionR="8" ExpressionTypeR="String" ConditionType="NumericNotEqual"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="6" ActionType="Placeholder" Description="极坐标转换（注：实际为不考虑高度的柱坐标系）" DescriptionOverride="True"/>
                  <Action OrderNumber="7" VariableOp="SetNumeric" VariableName="AdvWm_r0" VariableExpression="d(${xc}, ${yc}, ${x0}, ${y0})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="8" VariableOp="SetNumeric" VariableName="AdvWm_r1" VariableExpression="d(${xc}, ${yc}, ${x1}, ${y1})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="9" VariableOp="SetNumeric" VariableName="AdvWm_θ0" VariableExpression="θ(${xc}, ${yc}, ${x0}, ${y0})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="10" VariableOp="SetNumeric" VariableName="AdvWm_θ1" VariableExpression="θ(${xc}, ${yc}, ${x1}, ${y1})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="11" VariableOp="SetNumeric" VariableName="AdvWm_θ1" VariableExpression="relθ(${v:AdvWm_θ0}, ${v:AdvWm_θ1}) + ${v:AdvWm_θ0}" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="12" ActionType="Placeholder" Description="wm 拆分为列表   转换为标点名" DescriptionOverride="True"/>
                  <Action OrderNumber="13" ListVariableOp="SetAll" ListVariableName="AdvWm_polar" ListVariableExpression="${pd:AdvWm_WmMapping[${f:slice(${n:${_idx}-1}):${wm}}]}" ListVariableIndex="${v:AdvWm_len}" ActionType="ListVariable" Asynchronous="False"/>
                  <Action OrderNumber="14" ActionType="Placeholder" Description="计算所有半径和角度" DescriptionOverride="True"/>
                  <Action OrderNumber="15" ListVariableOp="SetAll" ListVariableExpressionType="Numeric" ListVariableName="AdvWm_r" ListVariableExpression="((${v:AdvWm_len} - ${_idx}) * ${v:AdvWm_r0} + (${_idx} - 1) * ${v:AdvWm_r1}) / (${v:AdvWm_len} - 1)" ListVariableIndex="${v:AdvWm_len}" ActionType="ListVariable" Asynchronous="False"/>
                  <Action OrderNumber="16" ListVariableOp="SetAll" ListVariableExpressionType="Numeric" ListVariableName="AdvWm_θ" ListVariableExpression="((${v:AdvWm_len} - ${_idx}) * ${v:AdvWm_θ0} + (${_idx} - 1) * ${v:AdvWm_θ1}) / (${v:AdvWm_len} - 1)" ListVariableIndex="${v:AdvWm_len}" ActionType="ListVariable" Asynchronous="False"/>
                  <Action OrderNumber="17" ActionType="Placeholder" Description="加权计算坐标   转换为 JSON 格式" DescriptionOverride="True"/>
                  <Action OrderNumber="18" ListVariableOp="SetAll" ListVariableName="AdvWm_polar" ListVariableExpression="&quot;${_this}&quot;: {&#13;&#10;    &quot;X&quot;: ${n: ${xc} + ${l:AdvWm_r[${_idx}]} * sin(${l:AdvWm_θ[${_idx}]})}, &#13;&#10;    &quot;Z&quot;: ${n: ${yc} + ${l:AdvWm_r[${_idx}]} * cos(${l:AdvWm_θ[${_idx}]})}, &#13;&#10;    &quot;Y&quot;: ${n: ((${v:AdvWm_len} - ${_idx}) * ${z0} + (${_idx} - 1) * ${z1}) / (${v:AdvWm_len} - 1)}, &#13;&#10;    &quot;Active&quot;: true&#13;&#10;}" ActionType="ListVariable" Asynchronous="False"/>
                  <Action OrderNumber="19" ActionType="Placeholder" Description="输出" DescriptionOverride="True"/>
                  <Action OrderNumber="20" VariableOp="SetString" VariableName="AdvWm_json" VariableExpression="{&#13;&#10;${l:AdvWm_polar.join(&quot;,⏎&quot;)}&#13;&#10;}" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="21" VariableOp="Clipboard" VariableName="AdvWm_json" Enabled="False" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="22" NamedCallbackName="place" NamedCallbackParam="${v:AdvWm_json}" VariableOp="SetString" ActionType="NamedCallback" Asynchronous="False"/>
                  <Action OrderNumber="23" VariableOp="UnsetRegexUniversal" VariableName="^AdvWm" ActionType="Variable" Asynchronous="False"/>
                </Actions>
                <Condition Enabled="true" Grouping="Or">
                  <ConditionSingle Enabled="true" ExpressionL="${wm}" ExpressionTypeL="String" ExpressionR="[A-D1-4]{2,8}" ExpressionTypeR="String" ConditionType="RegexMatch"/>
                </Condition>
              </Trigger>
              <Trigger Enabled="true" Name="绝对坐标标点 abs" Id="41e827f1-9b1b-4be2-b504-a8cf625ae7f0" RegularExpression="^AdvWm_abs(?&lt;A&gt;:A:(?&lt;xa&gt;[^:]*):(?&lt;ya&gt;[^:]*):(?&lt;za&gt;[^:]*):(?&lt;aa&gt;[^:]*))?(?&lt;B&gt;:B:(?&lt;xb&gt;[^:]*):(?&lt;yb&gt;[^:]*):(?&lt;zb&gt;[^:]*):(?&lt;ab&gt;[^:]*))?(?&lt;C&gt;:C:(?&lt;xc&gt;[^:]*):(?&lt;yc&gt;[^:]*):(?&lt;zc&gt;[^:]*):(?&lt;ac&gt;[^:]*))?(?&lt;D&gt;:D:(?&lt;xd&gt;[^:]*):(?&lt;yd&gt;[^:]*):(?&lt;zd&gt;[^:]*):(?&lt;ad&gt;[^:]*))?(?&lt;One&gt;:One:(?&lt;x1&gt;[^:]*):(?&lt;y1&gt;[^:]*):(?&lt;z1&gt;[^:]*):(?&lt;a1&gt;[^:]*))?(?&lt;Two&gt;:Two:(?&lt;x2&gt;[^:]*):(?&lt;y2&gt;[^:]*):(?&lt;z2&gt;[^:]*):(?&lt;a2&gt;[^:]*))?(?&lt;Three&gt;:Three:(?&lt;x3&gt;[^:]*):(?&lt;y3&gt;[^:]*):(?&lt;z3&gt;[^:]*):(?&lt;a3&gt;[^:]*))?(?&lt;Four&gt;:Four:(?&lt;x4&gt;[^:]*):(?&lt;y4&gt;[^:]*):(?&lt;z4&gt;[^:]*):(?&lt;a4&gt;[^:]*))?$">
                <Actions>
                  <Action OrderNumber="1" TriggerOp="CancelTrigger" TriggerId="f6e98f6c-9923-4205-bffc-b2bd7d6a3ec4" ActionType="Trigger" Asynchronous="False"/>
                  <Action OrderNumber="2" TriggerOp="CancelTrigger" TriggerId="abe85090-a54f-4da0-b1c2-bcac23461fa8" ActionType="Trigger" Asynchronous="False"/>
                  <Action OrderNumber="3" VariableOp="SetNumeric" VariableName="AdvWm_x_A" VariableExpression="(${xa})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="4" VariableOp="SetNumeric" VariableName="AdvWm_y_A" VariableExpression="(${ya})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="5" VariableOp="SetNumeric" VariableName="AdvWm_z_A" VariableExpression="(${za})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="6" VariableOp="SetNumeric" VariableName="AdvWm_a_A" VariableExpression="(${aa})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="7" VariableOp="SetNumeric" VariableName="AdvWm_x_B" VariableExpression="(${xb})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="8" VariableOp="SetNumeric" VariableName="AdvWm_y_B" VariableExpression="(${yb})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="9" VariableOp="SetNumeric" VariableName="AdvWm_z_B" VariableExpression="(${zb})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="10" VariableOp="SetNumeric" VariableName="AdvWm_a_B" VariableExpression="(${ab})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="11" VariableOp="SetNumeric" VariableName="AdvWm_x_C" VariableExpression="(${xc})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="12" VariableOp="SetNumeric" VariableName="AdvWm_y_C" VariableExpression="(${yc})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="13" VariableOp="SetNumeric" VariableName="AdvWm_z_C" VariableExpression="(${zc})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="14" VariableOp="SetNumeric" VariableName="AdvWm_a_C" VariableExpression="(${ac})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="15" VariableOp="SetNumeric" VariableName="AdvWm_x_D" VariableExpression="(${xd})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="16" VariableOp="SetNumeric" VariableName="AdvWm_y_D" VariableExpression="(${yd})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="17" VariableOp="SetNumeric" VariableName="AdvWm_z_D" VariableExpression="(${zd})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="18" VariableOp="SetNumeric" VariableName="AdvWm_a_D" VariableExpression="(${ad})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="19" VariableOp="SetNumeric" VariableName="AdvWm_x_One" VariableExpression="(${x1})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="20" VariableOp="SetNumeric" VariableName="AdvWm_y_One" VariableExpression="(${y1})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="21" VariableOp="SetNumeric" VariableName="AdvWm_z_One" VariableExpression="(${z1})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="22" VariableOp="SetNumeric" VariableName="AdvWm_a_One" VariableExpression="(${a1})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="23" VariableOp="SetNumeric" VariableName="AdvWm_x_Two" VariableExpression="(${x2})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="24" VariableOp="SetNumeric" VariableName="AdvWm_y_Two" VariableExpression="(${y2})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="25" VariableOp="SetNumeric" VariableName="AdvWm_z_Two" VariableExpression="(${z2})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="26" VariableOp="SetNumeric" VariableName="AdvWm_a_Two" VariableExpression="(${a2})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="27" VariableOp="SetNumeric" VariableName="AdvWm_x_Three" VariableExpression="(${x3})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="28" VariableOp="SetNumeric" VariableName="AdvWm_y_Three" VariableExpression="(${y3})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="29" VariableOp="SetNumeric" VariableName="AdvWm_z_Three" VariableExpression="(${z3})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="30" VariableOp="SetNumeric" VariableName="AdvWm_a_Three" VariableExpression="(${a1})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="31" VariableOp="SetNumeric" VariableName="AdvWm_x_Four" VariableExpression="(${x4})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="32" VariableOp="SetNumeric" VariableName="AdvWm_y_Four" VariableExpression="(${y4})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="33" VariableOp="SetNumeric" VariableName="AdvWm_z_Four" VariableExpression="(${z4})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="34" VariableOp="SetNumeric" VariableName="AdvWm_a_Four" VariableExpression="(${a4})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="35" ActionType="Placeholder" Description="加权计算坐标   转换为 JSON 格式" DescriptionOverride="True"/>
                  <Action OrderNumber="36" ListVariableOp="Build" ListVariableExpression=",A,B,C,D,One,Two,Three,Four" ListVariableTarget="AdvWm_abs" ActionType="ListVariable" Asynchronous="False"/>
                  <Action OrderNumber="37" ListVariableOp="Filter" ListVariableExpressionType="Numeric" ListVariableName="AdvWm_abs" ListVariableExpression="${f:length:${${_this}}} != 0" ListVariableTarget="AdvWm_abs" ActionType="ListVariable" Asynchronous="False"/>
                  <Action OrderNumber="38" ListVariableOp="SetAll" ListVariableName="AdvWm_abs" ListVariableExpression="&quot;${_this}&quot;: {&#13;&#10;    &quot;X&quot;:${var:AdvWm_x_${_this}}, &#13;&#10;    &quot;Y&quot;:${var:AdvWm_z_${_this}}, &#13;&#10;    &quot;Z&quot;:${var:AdvWm_y_${_this}}, &#13;&#10;    &quot;Active&quot;:${var:AdvWm_a_${_this}}&#13;&#10;}" ActionType="ListVariable" Asynchronous="False"/>
                  <Action OrderNumber="39" ActionType="Placeholder" Description="输出" DescriptionOverride="True"/>
                  <Action OrderNumber="40" VariableOp="SetString" VariableName="AdvWm_json" VariableExpression="{&#13;&#10;${l:AdvWm_abs.join(&quot;,⏎&quot;)}&#13;&#10;}" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="41" VariableOp="Clipboard" VariableName="AdvWm_json" Enabled="False" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="42" NamedCallbackName="place" NamedCallbackParam="${v:AdvWm_json}" VariableOp="SetString" ActionType="NamedCallback" Asynchronous="False"/>
                  <Action OrderNumber="43" VariableOp="UnsetRegexUniversal" VariableName="^AdvWm" ActionType="Variable" Asynchronous="False"/>
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Name="线性插值标点 linearConnect" Id="78eaf23f-f371-42fa-8d9a-bff924e27f14" RegularExpression="^AdvWm_linearConnect:[Ss]tart:(?&lt;x0&gt;[^:]+):(?&lt;y0&gt;[^:]+):(?&lt;z0&gt;[^:]+):[Ee]nd:(?&lt;x1&gt;[^:]+):(?&lt;y1&gt;[^:]+):(?&lt;z1&gt;[^:]+):[Ww]aymarkers:(?&lt;wm&gt;[^:]+)">
                <Actions>
                  <Action OrderNumber="1" TriggerOp="CancelTrigger" TriggerId="f6e98f6c-9923-4205-bffc-b2bd7d6a3ec4" ActionType="Trigger" Asynchronous="False"/>
                  <Action OrderNumber="2" TriggerOp="CancelTrigger" TriggerId="abe85090-a54f-4da0-b1c2-bcac23461fa8" ActionType="Trigger" Asynchronous="False"/>
                  <Action OrderNumber="3" ActionType="Placeholder" Description="初始化" DescriptionOverride="True"/>
                  <Action OrderNumber="4" VariableOp="SetNumeric" VariableName="AdvWm_len" VariableExpression="${f:length:${wm}}" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="5" DictVariableOp="Build" DictVariableTarget="AdvWm_WmMapping" DictVariableValue="=,A=A,B=B,C=C,D=D,1=One,2=Two,3=Three,4=Four" DictTargetPersist="True" ActionType="DictVariable" Asynchronous="False">
                    <Condition Enabled="true" Grouping="Or">
                      <ConditionSingle Enabled="true" ExpressionL="${pd:AdvWm_WmMapping.size}" ExpressionTypeL="String" ExpressionR="8" ExpressionTypeR="String" ConditionType="NumericNotEqual"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="6" ActionType="Placeholder" Description="wm 拆分为列表   转换为标点名" DescriptionOverride="True"/>
                  <Action OrderNumber="7" ListVariableOp="SetAll" ListVariableName="AdvWm_linear" ListVariableExpression="${pd:AdvWm_WmMapping[${f:slice(${n:${_idx}-1}):${wm}}]}" ListVariableIndex="${v:AdvWm_len}" ActionType="ListVariable" Asynchronous="False"/>
                  <Action OrderNumber="8" ActionType="Placeholder" Description="加权计算坐标   转换为 JSON 格式" DescriptionOverride="True"/>
                  <Action OrderNumber="9" ListVariableOp="SetAll" ListVariableName="AdvWm_linear" ListVariableExpression="&quot;${_this}&quot;: {&#13;&#10;    &quot;X&quot;: ${n: ((${v:AdvWm_len} - ${_idx}) * ${x0} + (${_idx} - 1) * ${x1}) / (${v:AdvWm_len} - 1)}, &#13;&#10;    &quot;Z&quot;: ${n: ((${v:AdvWm_len} - ${_idx}) * ${y0} + (${_idx} - 1) * ${y1}) / (${v:AdvWm_len} - 1)}, &#13;&#10;    &quot;Y&quot;: ${n: ((${v:AdvWm_len} - ${_idx}) * ${z0} + (${_idx} - 1) * ${z1}) / (${v:AdvWm_len} - 1)}, &#13;&#10;    &quot;Active&quot;: true&#13;&#10;}" ActionType="ListVariable" Asynchronous="False"/>
                  <Action OrderNumber="10" ActionType="Placeholder" Description="输出" DescriptionOverride="True"/>
                  <Action OrderNumber="11" VariableOp="SetString" VariableName="AdvWm_json" VariableExpression="{&#13;&#10;${l:AdvWm_linear.join(&quot;,⏎&quot;)}&#13;&#10;}" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="12" VariableOp="Clipboard" VariableName="AdvWm_json" Enabled="False" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="13" NamedCallbackName="place" NamedCallbackParam="${v:AdvWm_json}" VariableOp="SetString" ActionType="NamedCallback" Asynchronous="False"/>
                  <Action OrderNumber="14" VariableOp="UnsetRegexUniversal" VariableName="^AdvWm" ActionType="Variable" Asynchronous="False"/>
                </Actions>
                <Condition Enabled="true" Grouping="Or">
                  <ConditionSingle Enabled="true" ExpressionL="${wm}" ExpressionTypeL="String" ExpressionR="[A-D1-4]{2,8}" ExpressionTypeR="String" ConditionType="RegexMatch"/>
                </Condition>
              </Trigger>
              <Trigger Enabled="true" Name="旋转矩阵标点 rotate" Id="ebf71e79-716a-40bd-9094-6611b25960cb" RegularExpression="^AdvWm_rotate(?::[Ss]cale:(?&lt;scale&gt;[^:]*))?(?::θ:(?&lt;theta&gt;[^:]*))?(?::[Cc]enter:(?&lt;x0&gt;[^:]*):(?&lt;y0&gt;[^:]*):(?&lt;z0&gt;[^:]*))?(?&lt;A&gt;:A:(?&lt;xa&gt;[^:]*):(?&lt;ya&gt;[^:]*):(?&lt;za&gt;[^:]*):(?&lt;aa&gt;[^:]*))?(?&lt;B&gt;:B:(?&lt;xb&gt;[^:]*):(?&lt;yb&gt;[^:]*):(?&lt;zb&gt;[^:]*):(?&lt;ab&gt;[^:]*))?(?&lt;C&gt;:C:(?&lt;xc&gt;[^:]*):(?&lt;yc&gt;[^:]*):(?&lt;zc&gt;[^:]*):(?&lt;ac&gt;[^:]*))?(?&lt;D&gt;:D:(?&lt;xd&gt;[^:]*):(?&lt;yd&gt;[^:]*):(?&lt;zd&gt;[^:]*):(?&lt;ad&gt;[^:]*))?(?&lt;One&gt;:One:(?&lt;x1&gt;[^:]*):(?&lt;y1&gt;[^:]*):(?&lt;z1&gt;[^:]*):(?&lt;a1&gt;[^:]*))?(?&lt;Two&gt;:Two:(?&lt;x2&gt;[^:]*):(?&lt;y2&gt;[^:]*):(?&lt;z2&gt;[^:]*):(?&lt;a2&gt;[^:]*))?(?&lt;Three&gt;:Three:(?&lt;x3&gt;[^:]*):(?&lt;y3&gt;[^:]*):(?&lt;z3&gt;[^:]*):(?&lt;a3&gt;[^:]*))?(?&lt;Four&gt;:Four:(?&lt;x4&gt;[^:]*):(?&lt;y4&gt;[^:]*):(?&lt;z4&gt;[^:]*):(?&lt;a4&gt;[^:]*))?$">
                <Actions>
                  <Action OrderNumber="1" TriggerOp="CancelTrigger" TriggerId="f6e98f6c-9923-4205-bffc-b2bd7d6a3ec4" ActionType="Trigger" Asynchronous="False"/>
                  <Action OrderNumber="2" TriggerOp="CancelTrigger" TriggerId="abe85090-a54f-4da0-b1c2-bcac23461fa8" ActionType="Trigger" Asynchronous="False"/>
                  <Action OrderNumber="3" ActionType="Placeholder" Description="本触发器为带有旋转角度的标点函数，以 给定的各组坐标偏移 与 给定角度对应的旋转矩阵 分别相乘得到各组实际坐标，并以计算结果调用鲶鱼精邮差场地标点。" DescriptionOverride="True"/>
                  <Action OrderNumber="4" ActionType="Placeholder" DescriptionOverride="True"/>
                  <Action OrderNumber="5" ActionType="Placeholder" Description="格式：AdvWm_rotate:θ:-3.14:Center:100:100:0:A:0:-10:0:1:B:10:0:0:1:C:...:D:...:One:...:Two:...:Three:...:Four:..." DescriptionOverride="True"/>
                  <Action OrderNumber="6" ActionType="Placeholder" DescriptionOverride="True"/>
                  <Action OrderNumber="7" ActionType="Placeholder" Description="θ: 作为相对北的参照物所处的坐标的 atan2(dx, dy) 值，即从绝对正北开始逆时针一周 -pi 至 pi" DescriptionOverride="True"/>
                  <Action OrderNumber="8" ActionType="Placeholder" Description="Center：场中心坐标，作为旋转中心。需要 (x0, y0, z0) 三个数值。" DescriptionOverride="True"/>
                  <Action OrderNumber="9" ActionType="Placeholder" Description="A/B/C/D/One/Two/Three/Four: 四个值：(dx, dy, dz, isActive)。其中坐标偏移以相对中心、相对方向为正北时的参考系计算。如以参照物为正北（正上）" DescriptionOverride="True"/>
                  <Action OrderNumber="10" ActionType="Placeholder" Description="如以参照物为正北（正上）时，位于场地中心左 5 下 2 的 A 点，可以记为 “A:-5:2:0:1”" DescriptionOverride="True"/>
                  <Action OrderNumber="11" ActionType="Placeholder" DescriptionOverride="True"/>
                  <Action OrderNumber="12" ActionType="Placeholder" Description="可以缺少整组数据（如 B:xB:yB:zB:isActiveB 整组省略），但剩余组要按顺序。" DescriptionOverride="True"/>
                  <Action OrderNumber="13" ActionType="Placeholder" Description="省略的θ、Center组将使用缺省值：-pi, (100, 100, 0), 省略某个标点组则不会修改该标点（与鲶鱼精邮差相同）。" DescriptionOverride="True"/>
                  <Action OrderNumber="14" ActionType="Placeholder" DescriptionOverride="True"/>
                  <Action OrderNumber="15" ActionType="Placeholder" Description="也可以缺少单个数据，但要保留冒号，如前文“A:-5:2:0:1”可以记做“A:-5:2::1”，场地中心的 3 点可记做“Three::::1”。" DescriptionOverride="True"/>
                  <Action OrderNumber="16" ActionType="Placeholder" Description="省略的参数将使用缺省值：x0 = 100, y0 = 100, z0 = 0, θ = -pi, 标点的四个参数均为 0" DescriptionOverride="True"/>
                  <Action OrderNumber="17" ActionType="Placeholder" DescriptionOverride="True"/>
                  <Action OrderNumber="18" VariableOp="SetNumeric" VariableName="AdvWm_θ" VariableExpression="${theta} ?? -pi" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="19" VariableOp="SetNumeric" VariableName="AdvWm_x0" VariableExpression="${x0} ?? 100" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="20" VariableOp="SetNumeric" VariableName="AdvWm_y0" VariableExpression="${y0} ?? 100" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="21" VariableOp="SetNumeric" VariableName="AdvWm_z0" VariableExpression="(${z0})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="22" VariableOp="SetNumeric" VariableName="AdvWm_x_A" VariableExpression="(${xa})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="23" VariableOp="SetNumeric" VariableName="AdvWm_y_A" VariableExpression="(${ya})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="24" VariableOp="SetNumeric" VariableName="AdvWm_z_A" VariableExpression="(${za})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="25" VariableOp="SetNumeric" VariableName="AdvWm_a_A" VariableExpression="(${aa})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="26" VariableOp="SetNumeric" VariableName="AdvWm_x_B" VariableExpression="(${xb})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="27" VariableOp="SetNumeric" VariableName="AdvWm_y_B" VariableExpression="(${yb})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="28" VariableOp="SetNumeric" VariableName="AdvWm_z_B" VariableExpression="(${zb})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="29" VariableOp="SetNumeric" VariableName="AdvWm_a_B" VariableExpression="(${ab})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="30" VariableOp="SetNumeric" VariableName="AdvWm_x_C" VariableExpression="(${xc})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="31" VariableOp="SetNumeric" VariableName="AdvWm_y_C" VariableExpression="(${yc})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="32" VariableOp="SetNumeric" VariableName="AdvWm_z_C" VariableExpression="(${zc})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="33" VariableOp="SetNumeric" VariableName="AdvWm_a_C" VariableExpression="(${ac})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="34" VariableOp="SetNumeric" VariableName="AdvWm_x_D" VariableExpression="(${xd})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="35" VariableOp="SetNumeric" VariableName="AdvWm_y_D" VariableExpression="(${yd})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="36" VariableOp="SetNumeric" VariableName="AdvWm_z_D" VariableExpression="(${zd})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="37" VariableOp="SetNumeric" VariableName="AdvWm_a_D" VariableExpression="(${ad})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="38" VariableOp="SetNumeric" VariableName="AdvWm_x_One" VariableExpression="(${x1})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="39" VariableOp="SetNumeric" VariableName="AdvWm_y_One" VariableExpression="(${y1})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="40" VariableOp="SetNumeric" VariableName="AdvWm_z_One" VariableExpression="(${z1})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="41" VariableOp="SetNumeric" VariableName="AdvWm_a_One" VariableExpression="(${a1})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="42" VariableOp="SetNumeric" VariableName="AdvWm_x_Two" VariableExpression="(${x2})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="43" VariableOp="SetNumeric" VariableName="AdvWm_y_Two" VariableExpression="(${y2})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="44" VariableOp="SetNumeric" VariableName="AdvWm_z_Two" VariableExpression="(${z2})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="45" VariableOp="SetNumeric" VariableName="AdvWm_a_Two" VariableExpression="(${a2})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="46" VariableOp="SetNumeric" VariableName="AdvWm_x_Three" VariableExpression="(${x3})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="47" VariableOp="SetNumeric" VariableName="AdvWm_y_Three" VariableExpression="(${y3})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="48" VariableOp="SetNumeric" VariableName="AdvWm_z_Three" VariableExpression="(${z3})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="49" VariableOp="SetNumeric" VariableName="AdvWm_a_Three" VariableExpression="(${a3})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="50" VariableOp="SetNumeric" VariableName="AdvWm_x_Four" VariableExpression="(${x4})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="51" VariableOp="SetNumeric" VariableName="AdvWm_y_Four" VariableExpression="(${y4})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="52" VariableOp="SetNumeric" VariableName="AdvWm_z_Four" VariableExpression="(${z4})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="53" VariableOp="SetNumeric" VariableName="AdvWm_a_Four" VariableExpression="(${a4})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="54" ActionType="Placeholder" Description="加权计算坐标   转换为 JSON 格式" DescriptionOverride="True"/>
                  <Action OrderNumber="55" ListVariableOp="Build" ListVariableExpression=",A,B,C,D,One,Two,Three,Four" ListVariableTarget="AdvWm_rotate" ActionType="ListVariable" Asynchronous="False"/>
                  <Action OrderNumber="56" ListVariableOp="Filter" ListVariableExpressionType="Numeric" ListVariableName="AdvWm_rotate" ListVariableExpression="${f:length:${${_this}}} != 0" ListVariableTarget="AdvWm_rotate" ActionType="ListVariable" Asynchronous="False"/>
                  <Action OrderNumber="57" ListVariableOp="SetAll" ListVariableName="AdvWm_rotate" ListVariableExpression="&quot;${_this}&quot;: {&#13;&#10;    &quot;X&quot;:${n: ${var:AdvWm_x0} + (${scale} ?? 1) * (- ${var:AdvWm_x_${_this}}*cos(${var:AdvWm_θ}) - ${var:AdvWm_y_${_this}}*sin(${var:AdvWm_θ}))}, &#13;&#10;    &quot;Y&quot;:${n: ${var:AdvWm_z0} + (${scale} ?? 1) * ${var:AdvWm_z_${_this}}}, &#13;&#10;    &quot;Z&quot;:${n: ${var:AdvWm_y0} + (${scale} ?? 1) * (+ ${var:AdvWm_x_${_this}}*sin(${var:AdvWm_θ}) - ${var:AdvWm_y_${_this}}*cos(${var:AdvWm_θ}))}, &#13;&#10;    &quot;Active&quot;:${var:AdvWm_a_${_this}}&#13;&#10;}" ActionType="ListVariable" Asynchronous="False"/>
                  <Action OrderNumber="58" ActionType="Placeholder" Description="输出" DescriptionOverride="True"/>
                  <Action OrderNumber="59" VariableOp="SetString" VariableName="AdvWm_json" VariableExpression="{&#13;&#10;${l:AdvWm_rotate.join(&quot;,⏎&quot;)}&#13;&#10;}" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="60" VariableOp="Clipboard" VariableName="AdvWm_json" Enabled="False" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="61" NamedCallbackName="place" NamedCallbackParam="${v:AdvWm_json}" VariableOp="SetString" ActionType="NamedCallback" Asynchronous="False"/>
                  <Action OrderNumber="62" VariableOp="UnsetRegexUniversal" VariableName="^AdvWm" ActionType="Variable" Asynchronous="False"/>
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Name="极坐标标点 polarDeg / polarRad" Id="bfb55631-1d0f-41d1-98b5-f2af81953111" RegularExpression="^AdvWm_polar(?&lt;type&gt;Deg|Rad)(?::[Ss]cale:(?&lt;scale&gt;[^:]*))?(?::θ:(?&lt;theta&gt;[^:]*))?(?::[Cc]enter:(?&lt;x0&gt;[^:]*):(?&lt;y0&gt;[^:]*):(?&lt;z0&gt;[^:]*))?(?&lt;A&gt;:A:(?&lt;ra&gt;[^:]*):(?&lt;thetaa&gt;[^:]*):(?&lt;za&gt;[^:]*):(?&lt;aa&gt;[^:]*))?(?&lt;B&gt;:B:(?&lt;rb&gt;[^:]*):(?&lt;thetab&gt;[^:]*):(?&lt;zb&gt;[^:]*):(?&lt;ab&gt;[^:]*))?(?&lt;C&gt;:C:(?&lt;rc&gt;[^:]*):(?&lt;thetac&gt;[^:]*):(?&lt;zc&gt;[^:]*):(?&lt;ac&gt;[^:]*))?(?&lt;D&gt;:D:(?&lt;rd&gt;[^:]*):(?&lt;thetad&gt;[^:]*):(?&lt;zd&gt;[^:]*):(?&lt;ad&gt;[^:]*))?(?&lt;One&gt;:One:(?&lt;r1&gt;[^:]*):(?&lt;theta1&gt;[^:]*):(?&lt;z1&gt;[^:]*):(?&lt;a1&gt;[^:]*))?(?&lt;Two&gt;:Two:(?&lt;r2&gt;[^:]*):(?&lt;theta2&gt;[^:]*):(?&lt;z2&gt;[^:]*):(?&lt;a2&gt;[^:]*))?(?&lt;Three&gt;:Three:(?&lt;r3&gt;[^:]*):(?&lt;theta3&gt;[^:]*):(?&lt;z3&gt;[^:]*):(?&lt;a3&gt;[^:]*))?(?&lt;Four&gt;:Four:(?&lt;r4&gt;[^:]*):(?&lt;theta4&gt;[^:]*):(?&lt;z4&gt;[^:]*):(?&lt;a4&gt;[^:]*))?$">
                <Actions>
                  <Action OrderNumber="1" TriggerOp="CancelTrigger" TriggerId="f6e98f6c-9923-4205-bffc-b2bd7d6a3ec4" ActionType="Trigger" Asynchronous="False"/>
                  <Action OrderNumber="2" TriggerOp="CancelTrigger" TriggerId="abe85090-a54f-4da0-b1c2-bcac23461fa8" ActionType="Trigger" Asynchronous="False"/>
                  <Action OrderNumber="3" VariableOp="SetNumeric" VariableName="AdvWm_dθ" VariableExpression="(${theta} ?? -pi) + pi" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="4" VariableOp="SetNumeric" VariableName="AdvWm_x0" VariableExpression="${x0} ?? 100" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="5" VariableOp="SetNumeric" VariableName="AdvWm_y0" VariableExpression="${y0} ?? 100" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="6" VariableOp="SetNumeric" VariableName="AdvWm_z0" VariableExpression="(${z0})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="7" VariableOp="SetNumeric" VariableName="AdvWm_r_A" VariableExpression="(${ra})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="8" VariableOp="SetNumeric" VariableName="AdvWm_θ_A" VariableExpression="((${type} == Deg) ? pi/180 : 1) * (${thetaa})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="9" VariableOp="SetNumeric" VariableName="AdvWm_z_A" VariableExpression="(${za})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="10" VariableOp="SetNumeric" VariableName="AdvWm_a_A" VariableExpression="(${aa})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="11" VariableOp="SetNumeric" VariableName="AdvWm_r_B" VariableExpression="(${rb})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="12" VariableOp="SetNumeric" VariableName="AdvWm_θ_B" VariableExpression="((${type} == Deg) ? pi/180 : 1) * (${thetab})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="13" VariableOp="SetNumeric" VariableName="AdvWm_z_B" VariableExpression="(${zb})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="14" VariableOp="SetNumeric" VariableName="AdvWm_a_B" VariableExpression="(${ab})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="15" VariableOp="SetNumeric" VariableName="AdvWm_r_C" VariableExpression="(${rc})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="16" VariableOp="SetNumeric" VariableName="AdvWm_θ_C" VariableExpression="((${type} == Deg) ? pi/180 : 1) * (${thetac})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="17" VariableOp="SetNumeric" VariableName="AdvWm_z_C" VariableExpression="(${zc})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="18" VariableOp="SetNumeric" VariableName="AdvWm_a_C" VariableExpression="(${ac})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="19" VariableOp="SetNumeric" VariableName="AdvWm_r_D" VariableExpression="(${rd})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="20" VariableOp="SetNumeric" VariableName="AdvWm_θ_D" VariableExpression="((${type} == Deg) ? pi/180 : 1) * (${thetad})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="21" VariableOp="SetNumeric" VariableName="AdvWm_z_D" VariableExpression="(${zd})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="22" VariableOp="SetNumeric" VariableName="AdvWm_a_D" VariableExpression="(${ad})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="23" VariableOp="SetNumeric" VariableName="AdvWm_r_One" VariableExpression="(${r1})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="24" VariableOp="SetNumeric" VariableName="AdvWm_θ_One" VariableExpression="((${type} == Deg) ? pi/180 : 1) * (${theta1})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="25" VariableOp="SetNumeric" VariableName="AdvWm_z_One" VariableExpression="(${z1})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="26" VariableOp="SetNumeric" VariableName="AdvWm_a_One" VariableExpression="(${a1})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="27" VariableOp="SetNumeric" VariableName="AdvWm_r_Two" VariableExpression="(${r2})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="28" VariableOp="SetNumeric" VariableName="AdvWm_θ_Two" VariableExpression="((${type} == Deg) ? pi/180 : 1) * (${theta2})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="29" VariableOp="SetNumeric" VariableName="AdvWm_z_Two" VariableExpression="(${z2})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="30" VariableOp="SetNumeric" VariableName="AdvWm_a_Two" VariableExpression="(${a2})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="31" VariableOp="SetNumeric" VariableName="AdvWm_r_Three" VariableExpression="(${r3})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="32" VariableOp="SetNumeric" VariableName="AdvWm_θ_Three" VariableExpression="((${type} == Deg) ? pi/180 : 1) * (${theta3})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="33" VariableOp="SetNumeric" VariableName="AdvWm_z_Three" VariableExpression="(${z3})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="34" VariableOp="SetNumeric" VariableName="AdvWm_a_Three" VariableExpression="(${a3})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="35" VariableOp="SetNumeric" VariableName="AdvWm_r_Four" VariableExpression="(${r4})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="36" VariableOp="SetNumeric" VariableName="AdvWm_θ_Four" VariableExpression="((${type} == Deg) ? pi/180 : 1) * (${theta4})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="37" VariableOp="SetNumeric" VariableName="AdvWm_z_Four" VariableExpression="(${z4})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="38" VariableOp="SetNumeric" VariableName="AdvWm_a_Four" VariableExpression="(${a4})" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="39" Enabled="False" ActionType="Placeholder" Description="加权计算坐标   转换为 JSON 格式" DescriptionOverride="True"/>
                  <Action OrderNumber="40" ListVariableOp="Build" ListVariableExpression=",A,B,C,D,One,Two,Three,Four" ListVariableTarget="AdvWm_polar" ActionType="ListVariable" Asynchronous="False"/>
                  <Action OrderNumber="41" ListVariableOp="Filter" ListVariableExpressionType="Numeric" ListVariableName="AdvWm_polar" ListVariableExpression="${f:length:${${_this}}} != 0" ListVariableTarget="AdvWm_polar" ActionType="ListVariable" Asynchronous="False"/>
                  <Action OrderNumber="42" ListVariableOp="SetAll" ListVariableName="AdvWm_polar" ListVariableExpression="&quot;${_this}&quot;: {&#13;&#10;    &quot;X&quot;: ${n: ${v:AdvWm_x0} + (${scale} ?? 1) * ${v:AdvWm_r_${_this}} * sin(${v:AdvWm_θ_${_this}} + ${v:AdvWm_dθ}) }, &#13;&#10;    &quot;Y&quot;: ${n: ${v:AdvWm_z0} + (${scale} ?? 1) * ${v:AdvWm_z_${_this}} }, &#13;&#10;    &quot;Z&quot;: ${n: ${v:AdvWm_y0} + (${scale} ?? 1) * ${v:AdvWm_r_${_this}} * cos(${v:AdvWm_θ_${_this}} + ${v:AdvWm_dθ}) }, &#13;&#10;    &quot;Active&quot;: ${v:AdvWm_a_${_this}}&#13;&#10;}" ActionType="ListVariable" Asynchronous="False"/>
                  <Action OrderNumber="43" Enabled="False" ActionType="Placeholder" Description="输出" DescriptionOverride="True"/>
                  <Action OrderNumber="44" VariableOp="SetString" VariableName="AdvWm_json" VariableExpression="{&#13;&#10;${l:AdvWm_polar.join(&quot;,⏎&quot;)}&#13;&#10;}" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="45" VariableOp="Clipboard" VariableName="AdvWm_json" Enabled="False" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="46" NamedCallbackName="place" NamedCallbackParam="${v:AdvWm_json}" VariableOp="SetString" ActionType="NamedCallback" Asynchronous="False"/>
                  <Action OrderNumber="47" VariableOp="UnsetRegexUniversal" VariableName="^AdvWm" ActionType="Variable" Asynchronous="False"/>
                </Actions>
              </Trigger>
            </Triggers>
          </Folder>
          <Folder Id="5a0a2463-9db3-4c54-8215-6888033835d8" Name="实体标点" Enabled="true">
            <Folders/>
            <Triggers>
              <Trigger Enabled="true" Name="清空标点（网络） networkClear" Id="182ec391-7404-4045-a233-744478bc8c70" RegularExpression="^AdvHm_networkClear:(?&lt;orders&gt;[1-8]+)">
                <Actions>
                  <Action OrderNumber="1" ListVariableOp="SetAll" ListVariableName="AdvHm_clearAll" ListVariableExpression="    { &quot;c&quot;: &quot;command&quot;, &quot;p&quot;: &quot;/mk clear &lt;${f:slice(${_idx}):0${orders}}&gt;&quot; }" ListVariableIndex="${f:length:${orders}}" ActionType="ListVariable" Asynchronous="False"/>
                  <Action OrderNumber="2" VariableOp="SetString" VariableName="AdvHm_clearAll" VariableExpression="[&#13;&#10;${l:AdvHm_clearAll.join(&quot;,⏎&quot;)}&#13;&#10;]" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="3" NamedCallbackName="queue" NamedCallbackParam="${v:AdvHm_clearAll}" ActionType="NamedCallback" Asynchronous="False"/>
                  <Action OrderNumber="4" VariableName="AdvHm_clearAll" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="5" ListVariableName="AdvHm_clearAll" ActionType="ListVariable" Asynchronous="False"/>
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Name="清空标点（本地） localClear" Id="02f2501d-0159-4691-b504-2157c0ce47de" RegularExpression="^AdvHm_localClear:(?!all$)(?&lt;listname&gt;[^:]+)">
                <Actions>
                  <Action OrderNumber="1" ListVariableOp="SetAll" ListVariableName="AdvHm_clearAll" ListVariableExpression="    {&#13;&#10;        &quot;c&quot;: &quot;mark&quot;,&#13;&#10;        &quot;p&quot;: &quot;{\&quot;Name\&quot;: \&quot;${l:${listname}[${_idx}]}\&quot;, \&quot;MarkType\&quot;: \&quot;0\&quot;, \&quot;LocalOnly\&quot;: 1}&quot;&#13;&#10;    }" ListVariableIndex="${l:${listname}.size}" ActionType="ListVariable" Asynchronous="False"/>
                  <Action OrderNumber="2" VariableOp="SetString" VariableName="AdvHm_clearAll" VariableExpression="[&#13;&#10;${l:AdvHm_clearAll.join(&quot;,⏎&quot;)}&#13;&#10;]" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="3" NamedCallbackName="queue" NamedCallbackParam="${v:AdvHm_clearAll}" ActionType="NamedCallback" Asynchronous="False"/>
                  <Action OrderNumber="4" VariableName="AdvHm_clearAll" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="5" ListVariableName="AdvHm_clearAll" ActionType="ListVariable" Asynchronous="False"/>
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Sequential="True" Name="清空全部标点（本地） localClear:all" Id="e47ffdaf-54f4-439a-98a2-5d45d3619bf1" RegularExpression="^AdvHm_localClear:all(?::id:(?&lt;id&gt;.+))?$">
                <Actions>
                  <Action OrderNumber="1" ActionType="Placeholder" Description="指定一个实体 ID，对其遍历执行所有标点后清除标点。ID 未提供时默认为自己。" DescriptionOverride="True"/>
                  <Action OrderNumber="2" VariableOp="SetString" VariableName="tmp_id" VariableExpression="0x${_me.id}" ActionType="Variable">
                    <Condition Enabled="true" Grouping="Or">
                      <ConditionSingle Enabled="true" ExpressionL="${id}" ExpressionTypeL="String" ExpressionR="[14]0.{6}" ExpressionTypeR="String" ConditionType="RegexNotMatch"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="3" VariableOp="SetString" VariableName="tmp_id" VariableExpression="0x${id}" ActionType="Variable">
                    <Condition Enabled="true" Grouping="Or">
                      <ConditionSingle Enabled="true" ExpressionL="${id}" ExpressionTypeL="String" ExpressionR="[14]0.{6}" ExpressionTypeR="String" ConditionType="RegexMatch"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="4" LoopInitExpression="32" LoopIncrExpression="-1" ActionType="Loop">
                    <LoopCondition Enabled="true" Grouping="Or">
                      <ConditionSingle Enabled="true" ExpressionL="${_i}" ExpressionTypeL="String" ExpressionR="0" ExpressionTypeR="String" ConditionType="NumericGreaterEqual"/>
                    </LoopCondition>
                    <LoopActions>
                      <Action OrderNumber="1" NamedCallbackName="mark" NamedCallbackParam="{&#13;&#10;    &quot;ActorID&quot;: ${v:tmp_id},&#13;&#10;    &quot;MarkType&quot;: ${_i},&#13;&#10;    &quot;LocalOnly&quot;: true&#13;&#10;}" ActionType="NamedCallback"/>
                    </LoopActions>
                  </Action>
                  <Action OrderNumber="5" VariableName="tmp_id" ActionType="Variable">
                    <Condition Enabled="true" Grouping="Or">
                      <ConditionSingle Enabled="true" ExpressionL="${id}" ExpressionTypeL="String" ExpressionR="[14]0.{6}" ExpressionTypeR="String" ConditionType="RegexMatch"/>
                    </Condition>
                  </Action>
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Name="单个实体标点 mark" Id="3b7359ec-cc25-4328-8a5f-501d5b2e26bc" RegularExpression="^AdvHm_mark:(?&lt;entity&gt;[^:]+):(?&lt;marker&gt;[^:]+):(?&lt;isLocal&gt;[^:]+)">
                <Actions>
                  <Action OrderNumber="1" VariableOp="SetNumeric" VariableName="tmp_match" VariableExpression="1" ActionType="Variable" Asynchronous="False">
                    <Condition Enabled="true" Grouping="Or">
                      <ConditionSingle Enabled="true" ExpressionL="${entity}" ExpressionTypeL="String" ExpressionR="^[14]0[A-F0-9].{6}$" ExpressionTypeR="String" ConditionType="RegexMatch"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="2" NamedCallbackName="mark" NamedCallbackParam="{&#13;&#10;  &quot;ActorID&quot;: 0x${entity},&#13;&#10;  &quot;MarkType&quot;: &quot;${marker}&quot;,&#13;&#10;  &quot;LocalOnly&quot;: ${isLocal} &#13;&#10;}" ActionType="NamedCallback">
                    <Condition Enabled="true" Grouping="Or">
                      <ConditionSingle Enabled="true" ExpressionL="${v:tmp_match}" ExpressionTypeL="Numeric" ExpressionR="1" ExpressionTypeR="Numeric" ConditionType="NumericEqual"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="3" NamedCallbackName="mark" NamedCallbackParam="{&#13;&#10;  &quot;Name&quot;: &quot;${entity}&quot;,&#13;&#10;  &quot;MarkType&quot;: &quot;${marker}&quot;,&#13;&#10;  &quot;LocalOnly&quot;: ${isLocal} &#13;&#10;}" ActionType="NamedCallback">
                    <Condition Enabled="true" Grouping="Or">
                      <ConditionSingle Enabled="true" ExpressionL="${v:tmp_match}" ExpressionTypeL="Numeric" ExpressionR="0" ExpressionTypeR="Numeric" ConditionType="NumericEqual"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="4" NamedCallbackName="mark" NamedCallbackParam="{&#13;&#10;  ${f:ifmatch(${entity}, '&quot;ActorID&quot;: 0x${entity}', '&quot;Name&quot;: &quot;${entity}&quot;'):[14]0[0-9A-F]｛6｝},&#13;&#10;  &quot;MarkType&quot;: &quot;${marker}&quot;,&#13;&#10;  &quot;LocalOnly&quot;: ${isLocal} &#13;&#10;}" ActionType="NamedCallback"/>
                  <Action OrderNumber="5" VariableName="tmp_match" ActionType="Variable" Asynchronous="False"/>
                </Actions>
              </Trigger>
            </Triggers>
          </Folder>
        </Folders>
        <Triggers/>
      </Folder>
      <Folder Id="2a3a3a81-42b0-4069-a261-dda079f29a49" Name="鲶鱼精邮差扩展 v2.5.1" Enabled="true" RawEnvironmentVariables="version = 2.5.1">
        <Folders>
          <Folder Id="43017777-4bfd-4a0a-a49d-b2b8e999115c" Name="Entity" Enabled="true">
            <Folders/>
            <Triggers>
              <Trigger Enabled="true" Name="Scaling" Id="8d1127e7-89b4-4fdc-bfcf-5e1d23480cce" RegularExpression="^.{15}\S+ 00:0038::scale +(?&lt;scales&gt;.+)$">
                <Actions>
                  <Action OrderNumber="1" VariableOp="SetString" VariableName="tmp_address" VariableExpression="${_entity[${_me.targetid}].address}" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="2" VariableOp="SetString" VariableName="tmp_address" VariableExpression="${_me.address}" ActionType="Variable" Asynchronous="False">
                    <Condition Enabled="true" Grouping="Or">
                      <ConditionSingle Enabled="true" ExpressionL="${v:tmp_address}" ExpressionTypeL="String" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="3" NamedCallbackName="ObjectScaling" NamedCallbackParam="${v:tmp_address}, ${f:replace(&quot; &quot;, &quot;,&quot;):${scales}}" ActionType="NamedCallback" Asynchronous="False"/>
                  <Action OrderNumber="4" VariableName="tmp_address" ActionType="Variable" Asynchronous="False"/>
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Name="SetHighlightColor" Id="1acda0c8-8b20-4495-b994-b4078d0eaebf" RegularExpression="^.{15}\S+ 00:0038::highlight (?&lt;color&gt;\d+)$">
                <Actions>
                  <Action OrderNumber="1" VariableOp="SetString" VariableName="tmp_address" VariableExpression="${_entity[${_me.targetid}].address}" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="2" VariableOp="SetString" VariableName="tmp_address" VariableExpression="${_me.address}" ActionType="Variable" Asynchronous="False">
                    <Condition Enabled="true" Grouping="Or">
                      <ConditionSingle Enabled="true" ExpressionL="${v:tmp_address}" ExpressionTypeL="String" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="3" NamedCallbackName="SetHighlightColor" NamedCallbackParam="${v:tmp_address}, ${color}" ActionType="NamedCallback" Asynchronous="False"/>
                  <Action OrderNumber="4" VariableName="tmp_address" ActionType="Variable" Asynchronous="False"/>
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Name="SetStatusLoopVfx" Id="ed003432-ad7b-4dce-b2db-0a79038455ab" RegularExpression="^.{15}\S+ 00:0038::vfx (?&lt;vfxid&gt;.+)$">
                <Actions>
                  <Action OrderNumber="1" VariableOp="SetString" VariableName="tmp_address" VariableExpression="${_entity[${_me.targetid}].address}" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="2" VariableOp="SetString" VariableName="tmp_address" VariableExpression="${_me.address}" ActionType="Variable" Asynchronous="False">
                    <Condition Enabled="true" Grouping="Or">
                      <ConditionSingle Enabled="true" ExpressionL="${v:tmp_address}" ExpressionTypeL="String" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="3" NamedCallbackName="SetStatusLoopVfx" NamedCallbackParam="${v:tmp_address}, ${vfxid}" ActionType="NamedCallback" Asynchronous="False"/>
                  <Action OrderNumber="4" VariableName="tmp_address" ActionType="Variable" Asynchronous="False"/>
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Name="Redraw" Id="94d8055d-df92-4624-95e3-1b20ae458bc4" RegularExpression="^.{15}\S+ 00:0038::redraw$">
                <Actions>
                  <Action OrderNumber="1" VariableOp="SetString" VariableName="tmp_address" VariableExpression="${_entity[${_me.targetid}].address}" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="2" VariableOp="SetString" VariableName="tmp_address" VariableExpression="${_me.address}" ActionType="Variable" Asynchronous="False">
                    <Condition Enabled="true" Grouping="Or">
                      <ConditionSingle Enabled="true" ExpressionL="${v:tmp_address}" ExpressionTypeL="String" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="3" NamedCallbackName="Redraw" NamedCallbackParam="${v:tmp_address}" ActionType="NamedCallback" Asynchronous="False"/>
                  <Action OrderNumber="4" VariableName="tmp_address" ActionType="Variable" Asynchronous="False"/>
                </Actions>
              </Trigger>
            </Triggers>
          </Folder>
          <Folder Id="76be1cde-4536-4a6d-a5e4-dfe6a4cd206d" Name="ShowTextGimmickHint" Enabled="true">
            <Folders/>
            <Triggers>
              <Trigger Enabled="true" Name="Hint / Warn" Id="55022223-3453-45c7-8c73-82d894a71a66" RegularExpression="^.{15}\S+ 00:0038:: *(?&lt;type&gt;[Hh][Ii][Nn][Tt]|[Ww][Aa][Rr][Nn]) +(?&lt;t&gt;[\d.]+) (?&lt;data&gt;.+)">
                <Actions>
                  <Action OrderNumber="1" NamedCallbackName="${f:tolower:${type}}" NamedCallbackParam="${n:${t}}&#13;&#10;${data}" ActionType="NamedCallback" Asynchronous="False"/>
                </Actions>
              </Trigger>
            </Triggers>
          </Folder>
          <Folder Id="8c11f90f-963a-4fe1-962c-94299965a0bf" Name="Quit" Enabled="true">
            <Folders/>
            <Triggers>
              <Trigger Enabled="true" Name="Quit" Id="fc91940b-1377-45dd-ac41-6e66c85f1a22" RegularExpression="^.{15}\S+ 00:0038:: *[Qq][Uu][Ii][Tt] *$">
                <Actions>
                  <Action OrderNumber="1" NamedCallbackName="quit" NamedCallbackParam="0" ActionType="NamedCallback" Asynchronous="False"/>
                  <Action OrderNumber="2" NamedCallbackName="quit" NamedCallbackParam="1" ActionType="NamedCallback" Asynchronous="False"/>
                </Actions>
              </Trigger>
            </Triggers>
          </Folder>
          <Folder Id="6f67b0e0-589c-46db-8307-374bcabb3abd" Name="Vfx" Enabled="true">
            <Folders/>
            <Triggers>
              <Trigger Enabled="true" Name="LockOn" Id="ffa7a16d-f2ab-4146-8555-68b598c4e9df" RegularExpression="^.{15}\S+ 00:0038::lockon (?&lt;vfxname&gt;.+)$">
                <Actions>
                  <Action OrderNumber="1" VariableOp="SetString" VariableName="tmp_address" VariableExpression="${_entity[${_me.targetid}].address}" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="2" VariableOp="SetString" VariableName="tmp_address" VariableExpression="${_me.address}" ActionType="Variable" Asynchronous="False">
                    <Condition Enabled="true" Grouping="Or">
                      <ConditionSingle Enabled="true" ExpressionL="${v:tmp_address}" ExpressionTypeL="String" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="3" NamedCallbackName="LockOn" NamedCallbackParam="${v:tmp_address}, ${vfxname}" ActionType="NamedCallback" Asynchronous="False"/>
                  <Action OrderNumber="4" VariableName="tmp_address" ActionType="Variable" Asynchronous="False"/>
                </Actions>
              </Trigger>
              <Trigger Enabled="false" Name="Channeling" Id="55ca6342-ecf1-407f-86ad-a8d04d855efa" RegularExpression="^.{15}\S+ 00:0038::channeling (?&lt;vfxname&gt;.+)$">
                <Actions>
                  <Action OrderNumber="1" NamedCallbackName="Channeling" NamedCallbackParam="${_me.address}, ${_entity[${_me.targetid}].address}, ${vfxname}" ActionType="NamedCallback" Asynchronous="False">
                    <Condition Enabled="true" Grouping="Or">
                      <ConditionSingle Enabled="true" ExpressionL="0${_entity[${_me.targetid}].address}" ExpressionTypeL="Numeric" ExpressionR="0" ExpressionTypeR="String" ConditionType="StringNotEqualCase"/>
                    </Condition>
                  </Action>
                </Actions>
              </Trigger>
            </Triggers>
          </Folder>
        </Folders>
        <Triggers>
          <Trigger Enabled="true" Sequential="True" Name="PostNamazuExtension" Id="827a5fb1-e25a-44c6-80bc-cab979992fe4" RegularExpression="^.{15}\S+ 01:">
            <Actions>
              <Action OrderNumber="1" ExecScriptExpression="using System.Windows.Forms;&#13;&#10;using System.Threading;&#13;&#10;using Triggernometry;&#13;&#10;&#13;&#10;public bool IsCafeACT()&#13;&#10;{&#13;&#10;    Control current = RealPlugin.plug.ui;&#13;&#10;    while (current != null &amp;&amp; !(current is TabControl))&#13;&#10;    {&#13;&#10;        current = current.Parent;&#13;&#10;    }&#13;&#10;&#13;&#10;    if (current is TabControl tabControl)&#13;&#10;    {&#13;&#10;        foreach (TabPage tabPage in tabControl.TabPages)&#13;&#10;        {&#13;&#10;            if (tabPage.Text == &quot;插件中心&quot;)&#13;&#10;            {&#13;&#10;                return true;&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    return false;&#13;&#10;}&#13;&#10;&#13;&#10;void Log(string msg) =&gt; Triggernometry.Interpreter.StaticHelpers.Log(RealPlugin.DebugLevelEnum.Warning, msg);&#13;&#10;void Error(string msg) =&gt; Triggernometry.Interpreter.StaticHelpers.Log(RealPlugin.DebugLevelEnum.Error, msg);&#13;&#10;&#13;&#10;if (IsCafeACT())&#13;&#10;{&#13;&#10;    Log(&quot;  不要截图到处问这是什么意思该怎么办，上面写得很清楚了。&quot;);&#13;&#10;    Thread.Sleep(10);&#13;&#10;    Log(&quot;  如果你想使用高级功能，目前已知的解决方法仅有更换呆萌整合版本。&quot;);&#13;&#10;    Thread.Sleep(10);&#13;&#10;    Log(&quot;  鲶鱼精邮差扩展无法运行，将只有基础的场地标点功能。&quot;);&#13;&#10;    Thread.Sleep(10);&#13;&#10;    Log(&quot;  由于 CafeACT 使用旧版 ACT 且未解决程序集版本冲突，&quot;);&#13;&#10;    Thread.Sleep(10);&#13;&#10;    Error(&quot;[高级标点工具箱] 检测到 CafeACT 环境。&quot;);&#13;&#10;    Triggernometry.RealPlugin.plug.RegisterNamedCallback(&quot;hint&quot;, new Action&lt;object, string&gt;((_, __) =&gt; {}), null, registrant: &quot;注册失败&quot;);&#13;&#10;}&#13;&#10;" ActionType="ExecuteScript" Asynchronous="False" Description="检测 Cafe 环境" DescriptionOverride="True"/>
              <Action OrderNumber="2" ExecScriptAssembliesExpression="PostNamazu, GreyMagic" ExecScriptExpression="using System;&#13;&#10;using System.Globalization;&#13;&#10;using System.Linq;&#13;&#10;using System.Text;&#13;&#10;using System.Threading;&#13;&#10;using System.Windows.Forms;&#13;&#10;using PostNamazu;&#13;&#10;using PostNamazu.Common;&#13;&#10;using GreyMagic;&#13;&#10;using Triggernometry;&#13;&#10;using Triggernometry.PluginBridges;&#13;&#10;using System.Numerics;&#13;&#10;using System.Text.RegularExpressions;&#13;&#10;&#13;&#10;bool initialized = false;&#13;&#10;for (int i = 1; i &lt;= 5; i++)&#13;&#10;{&#13;&#10;    try&#13;&#10;    {&#13;&#10;        PostNamazuExtension.Init();&#13;&#10;        initialized = true;&#13;&#10;        break;&#13;&#10;    }&#13;&#10;    catch&#13;&#10;    {&#13;&#10;        PostNamazuExtension.Log(RealPlugin.DebugLevelEnum.Warning, $&quot;鲶鱼精邮差扩展初始化失败，正在重试第 {i} / 5 次……&quot;);&#13;&#10;        if (i == 5) throw;&#13;&#10;    }&#13;&#10;    Thread.Sleep(i * 1000);&#13;&#10;}&#13;&#10;PostNamazuExtension.Log(RealPlugin.DebugLevelEnum.Warning, $&quot;鲶鱼精邮差扩展初始化成功。&quot;);&#13;&#10;&#13;&#10;public static class PostNamazuExtension&#13;&#10;{&#13;&#10;&#13;&#10;    #region Common&#13;&#10;&#13;&#10;    private static readonly string Name = &quot;PostNamazuExtension&quot;;&#13;&#10;&#13;&#10;    public static PostNamazu.PostNamazu NamazuPlugin =&gt; (PostNamazu.PostNamazu)RealPlugin.InstanceHook(null, &quot;PostNamazu.PostNamazu&quot;).pluginObj;&#13;&#10;    public static ExternalProcessMemory Memory =&gt; NamazuPlugin?.Memory;&#13;&#10;    public static SigScanner Scanner =&gt; NamazuPlugin?.SigScanner;&#13;&#10;    public static bool IsCN =&gt; !BridgeFFXIV.GetMyself().GetValue(&quot;name&quot;).ToString().Contains(&quot; &quot;);&#13;&#10;    private static PostNamazuUi _postNamazuUi;&#13;&#10;    public static PostNamazuUi PostNamazuUi&#13;&#10;    {&#13;&#10;        get&#13;&#10;        {&#13;&#10;            if (_postNamazuUi?.Parent as TabPage == null)&#13;&#10;            {&#13;&#10;                _postNamazuUi = GetPostNamazuUi();&#13;&#10;            }&#13;&#10;            return _postNamazuUi;&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    public static bool IsReady =&gt; Triggernometry.Interpreter.StaticHelpers.XivProcess != null &amp;&amp; Memory != null;&#13;&#10;&#13;&#10;    private static PostNamazuUi GetPostNamazuUi()&#13;&#10;    {&#13;&#10;        TabPage tp = RealPlugin.InstanceHook(null, &quot;PostNamazu.PostNamazu&quot;).TabPage;&#13;&#10;        return tp.Controls.OfType&lt;PostNamazuUi&gt;().FirstOrDefault();&#13;&#10;    }&#13;&#10;&#13;&#10;    public static void OnXivProcUpdate()&#13;&#10;    {&#13;&#10;        ScanSignatures();&#13;&#10;    }&#13;&#10;&#13;&#10;    public static void RegisterCallback(string callBackName, Action&lt;string&gt; callBackAction, IntPtr? ptr = null)&#13;&#10;    {&#13;&#10;        if (ptr == IntPtr.Zero) return;&#13;&#10;        Triggernometry.RealPlugin.plug.RegisterNamedCallback(&#13;&#10;            callBackName,&#13;&#10;            new Action&lt;object, string&gt;((_, cmd) =&gt; callBackAction(cmd)),&#13;&#10;            null,&#13;&#10;            registrant: Name&#13;&#10;        );&#13;&#10;    }&#13;&#10;&#13;&#10;    public static void Init()&#13;&#10;    {&#13;&#10;        OnXivProcUpdate();&#13;&#10;        Triggernometry.Interpreter.StaticHelpers.RegisterXivProcessUpdatedAction(Name, new System.Action(OnXivProcUpdate));&#13;&#10;        RegisterCallback(&quot;hint&quot;, ShowTextGimmickHint.Hint);&#13;&#10;        RegisterCallback(&quot;warn&quot;, ShowTextGimmickHint.Warn);&#13;&#10;&#13;&#10;        RegisterCallback(&quot;quit&quot;, QuitInstance.DoQuitInstance, QuitInstancePtr);&#13;&#10;&#13;&#10;        RegisterCallback(&quot;ObjectScaling&quot;, EntityHelper.ObjectScaling);&#13;&#10;        RegisterCallback(&quot;SetOpacity&quot;, EntityHelper.SetOpacity);&#13;&#10;        RegisterCallback(&quot;SetOpacityForOtherPlayers&quot;, EntityHelper.SetOpacityForOtherPlayers);&#13;&#10;        RegisterCallback(&quot;Hide&quot;, EntityHelper.Hide);&#13;&#10;        RegisterCallback(&quot;HideOtherPlayers&quot;, EntityHelper.HideOtherPlayers);&#13;&#10;        RegisterCallback(&quot;SetStatusLoopVfx&quot;, EntityHelper.SetStatusLoopVfx);&#13;&#10;        RegisterCallback(&quot;Redraw&quot;, EntityHelper.Redraw);&#13;&#10;        RegisterCallback(&quot;SetHighlightColor&quot;, EntityHelper.SetHighlightColor);&#13;&#10;&#13;&#10;        RegisterCallback(&quot;LockOn&quot;, VfxHelper.LockOn, ActorVfxCreatePtr);&#13;&#10;        RegisterCallback(&quot;Channeling&quot;, VfxHelper.Channeling, ActorVfxCreatePtr);&#13;&#10;&#13;&#10;        RegisterCallback(&quot;MapEffect&quot;, MapEffectHelper.MapEffect, EventFrameworkPtrPtr);&#13;&#10;        //RegisterCallback(&quot;StaticVfxTest&quot;, VfxHelper.StaticVfxTest);&#13;&#10;        Echo($&quot;已激活：{Name} v{&quot;${env:version}&quot;}&quot;);&#13;&#10;    }&#13;&#10;&#13;&#10;    public static void CheckBeforeExecution(string command)&#13;&#10;    {&#13;&#10;        if (!IsReady)&#13;&#10;            throw new Exception(&quot;没有对应的 FFXIV 进程&quot;);&#13;&#10;&#13;&#10;        if (string.IsNullOrWhiteSpace(command))&#13;&#10;            throw new Exception(&quot;指令为空&quot;);&#13;&#10;    }&#13;&#10;&#13;&#10;    #endregion Common&#13;&#10;&#13;&#10;    #region Scanning&#13;&#10;&#13;&#10;    public static IntPtr GetUiModulePtr;&#13;&#10;    public static IntPtr FrameworkPtrPtr;&#13;&#10;    public static IntPtr ShowTextGimmickHintPtr;&#13;&#10;    public static IntPtr QuitInstancePtr;&#13;&#10;&#13;&#10;    public static IntPtr StaticVfxCreatePtr;    // 静态特效创建&#13;&#10;    public static IntPtr StaticVfxRunPtr;       // 静态特效运行&#13;&#10;    public static IntPtr StaticVfxRemovePtr;    // 静态特效移除&#13;&#10;    public static IntPtr ActorVfxCreatePtr;&#13;&#10;    public static IntPtr ActorVfxRemovePtr;&#13;&#10;    public static IntPtr CreateOmenPtr;&#13;&#10;    public static IntPtr RemoveOmenPtr;&#13;&#10;    //public const string RescourseLoadSyncSig = &quot;E8 ?? ?? ?? ?? 48 8B ?? ?? ?? 84 ?? 40 ?? ?? F6 B9&quot;;//资源加载(同步Sig)&#13;&#10;    //public const string SetOmenColorSig = &quot;48 ?? ?? ?? ?? ?? ?? 48 ?? ?? 74 ?? 48 ?? ?? ?? f3 ?? ?? ?? ?? ?? f3 0f 11 89&quot;;//设置Omen颜色Sig&#13;&#10;    //public const string SetOmenMatrixSig = &quot;e8 ?? ?? ?? ?? 48 ?? ?? e8 ?? ?? ?? ?? 85 ?? 74 ?? 84&quot;;//设置Omen矩阵Sig&#13;&#10;    //public const string CreateVfxSig = &quot;e8 ?? ?? ?? ?? 48 ?? ?? 48 ?? ?? 74 ?? b2 ?? 48 ?? ?? e8 ?? ?? ?? ?? b2 ?? 48 ?? ?? e8 ?? ?? ?? ?? f6 05&quot;;//创建特效Sig&#13;&#10;    //public const string SetVfxP1Sig = &quot;e8 ?? ?? ?? ?? b2 ?? 48 ?? ?? e8 ?? ?? ?? ?? f6 05&quot;;//不知道设置什么Sig1&#13;&#10;    //public const string SetVfxP2Sig = &quot;e8 ?? ?? ?? ?? f6 05 ?? ?? ?? ?? ?? 74 ?? 80 3d ?? ?? ?? ?? ?? 73&quot;;//不知道什么Sig2&#13;&#10;    //public const string InitVfxParamSig = &quot;e8 ?? ?? ?? ?? f3 ?? ?? ?? ?? ?? ?? ?? 48 ?? ?? ?? ?? ?? ?? 48 ?? ?? ?? 48 ?? ?? ?? ?? c7 44 24&quot;;// 初始化特效参数Sig&#13;&#10;    //public const string GetResourceSyncSig = &quot;E8 ?? ?? ?? ?? 48 8D 8F ?? ?? ?? ?? 48 89 87 ?? ?? ?? ?? 48 8D 54 24&quot;;&#13;&#10;    //public const string VfxResSettupCompleteSig = &quot;40 ?? 48 ?? ?? ?? 48 ?? ?? 33 ?? 8b ?? f0 0f c0 83&quot;;&#13;&#10;&#13;&#10;    public static IntPtr MapEffectFunctionPtr;&#13;&#10;    public static IntPtr EventFrameworkPtrPtr;&#13;&#10;&#13;&#10;    public static void ScanSignatures()&#13;&#10;    {&#13;&#10;        var myName = BridgeFFXIV.GetMyself().GetValue(&quot;name&quot;).ToString();&#13;&#10;        bool notFound = string.IsNullOrEmpty(myName);&#13;&#10;        bool isCn = !notFound &amp;&amp; !myName.Contains(&quot; &quot;);&#13;&#10;        bool isGlobal = !notFound &amp;&amp; myName.Contains(&quot; &quot;);&#13;&#10;        if (isCn || notFound) // 7.0 CN&#13;&#10;        {&#13;&#10;            try&#13;&#10;            {&#13;&#10;                var sigStart = Scanner.ScanText(&quot;49 8B C4 48 8B 0D&quot;, nameof(FrameworkPtrPtr));&#13;&#10;                FrameworkPtrPtr = sigStart + 24 + Memory.Read&lt;int&gt;(sigStart + 20);&#13;&#10;                notFound = false;&#13;&#10;            }&#13;&#10;            catch { }&#13;&#10;        }&#13;&#10;        if (isGlobal || notFound) // 7.0 global&#13;&#10;        {&#13;&#10;            var sigStart = Scanner.ScanText(&quot;49 8B DC 48 89 1D&quot;, nameof(FrameworkPtrPtr));&#13;&#10;            FrameworkPtrPtr = sigStart + 10 + Memory.Read&lt;int&gt;(sigStart + 6);&#13;&#10;        }&#13;&#10;        GetUiModulePtr = Scanner.ScanText(&quot;E8 ?? ?? ?? ?? 80 7B 1D 01&quot;, nameof(GetUiModulePtr));&#13;&#10;        ShowTextGimmickHintPtr = Scanner.ScanText(&quot;48 ?? ?? 0F 84 ?? ?? ?? ?? 4C ?? ?? 49 89 5B ?? 49 89 73&quot;, nameof(ShowTextGimmickHintPtr));&#13;&#10;        QuitInstancePtr = Scanner.ScanText(&quot;48 83 EC ?? 0F B6 D1 45 33 C9&quot;, nameof(QuitInstancePtr));&#13;&#10;&#13;&#10;        try&#13;&#10;        {&#13;&#10;            //StaticVfxCreatePtr = Scanner.ScanText(&quot;E8 ?? ?? ?? ?? F3 0F 10 35 ?? ?? ?? ?? 48 89 43 08&quot;, nameof(StaticVfxCreatePtr));&#13;&#10;            //StaticVfxRunPtr = Scanner.ScanText(&quot;E8 ?? ?? ?? ?? 8B 4B 7C 85 C9&quot;, nameof(StaticVfxRunPtr));&#13;&#10;            //StaticVfxRemovePtr = Scanner.ScanText(&quot;40 53 48 83 EC 20 48 8B D9 48 8B 89 ?? ?? ?? ?? 48 85 C9 74 28 33 D2 E8 ?? ?? ?? ?? 48 8B 8B ?? ?? ?? ?? 48 85 C9&quot;, nameof(StaticVfxRemovePtr));&#13;&#10;            ActorVfxCreatePtr = Scanner.ScanText(&quot;E8 ?? ?? ?? ?? 48 8B D8 48 85 C0 74 ?? 0F B6 57 ?? 48 8B C8 C0 EA 02 80 E2 01&quot;, nameof(ActorVfxCreatePtr));&#13;&#10;            var sigStart = Scanner.ScanText(&quot;0F 11 48 10 48 8D 05 ?? ?? ?? ??&quot;, nameof(ActorVfxRemovePtr));&#13;&#10;            ActorVfxRemovePtr = Memory.Read&lt;IntPtr&gt;(sigStart + 11 + Memory.Read&lt;int&gt;(sigStart + 7));&#13;&#10;        }&#13;&#10;        catch (Exception ex)&#13;&#10;        {&#13;&#10;            Log(RealPlugin.DebugLevelEnum.Error, $&quot;鲶鱼精邮差扩展的特效模块初始化失败，可能是游戏版本更新或某些卫月插件冲突所致：\n{ex.Message}\n&quot;);&#13;&#10;        }&#13;&#10;&#13;&#10;        try&#13;&#10;        {&#13;&#10;            try {MapEffectFunctionPtr = Scanner.ScanText(&quot;E8 ?? ?? ?? ?? 48 8B 5C 24 ?? 48 83 C4 ?? 5F C3 CC CC CC CC CC CC CC CC CC CC CC CC CC CC 48 89 5C 24 ?? 57 48 83 EC ?? 0F B7 DA 33 C0&quot;, nameof(MapEffectFunctionPtr));}&#13;&#10;            catch {MapEffectFunctionPtr = Scanner.ScanText(&quot;48 89 5C 24 ?? 48 89 6C 24 ?? 48 89 74 24 ?? 57 48 83 EC 20 8B FA 41 0F B7 E8&quot;, nameof(MapEffectFunctionPtr));}&#13;&#10;            var sigStart = Scanner.ScanText(&quot;4C 39 2D ?? ?? ?? ?? 74 14&quot;, nameof(EventFrameworkPtrPtr));&#13;&#10;            EventFrameworkPtrPtr = sigStart + 7 + Memory.Read&lt;int&gt;(sigStart + 3);&#13;&#10;        }&#13;&#10;        catch (Exception ex)&#13;&#10;        {&#13;&#10;            Log(RealPlugin.DebugLevelEnum.Error, $&quot;鲶鱼精邮差扩展的 MapEffect 模块初始化失败，可能是游戏版本更新或某些卫月插件冲突所致：\n{ex.Message}\n&quot;);&#13;&#10;        }&#13;&#10;&#13;&#10;    }&#13;&#10;&#13;&#10;&#13;&#10;    #endregion Scanning&#13;&#10;&#13;&#10;    private static readonly object assemblyLock = Memory.Executor.AssemblyLock;&#13;&#10;    public static void ExecuteWithLock(System.Action action)&#13;&#10;    {&#13;&#10;        bool lockTaken = false;&#13;&#10;        try&#13;&#10;        {&#13;&#10;            Monitor.Enter(assemblyLock, ref lockTaken);&#13;&#10;            action();&#13;&#10;        }&#13;&#10;        finally { if (lockTaken) Monitor.Exit(assemblyLock); }&#13;&#10;    }&#13;&#10;&#13;&#10;    public static T ExecuteWithLock&lt;T&gt;(Func&lt;T&gt; function)&#13;&#10;    {&#13;&#10;        bool lockTaken = false;&#13;&#10;        try&#13;&#10;        {&#13;&#10;            Monitor.Enter(assemblyLock, ref lockTaken);&#13;&#10;            return function();&#13;&#10;        }&#13;&#10;        finally { if (lockTaken) Monitor.Exit(assemblyLock); }&#13;&#10;    }&#13;&#10;&#13;&#10;    public static class ShowTextGimmickHint&#13;&#10;    {&#13;&#10;        public static void Hint(string command) =&gt; DoShowTextGimmickHint(true, command);&#13;&#10;        public static void Warn(string command) =&gt; DoShowTextGimmickHint(false, command);&#13;&#10;&#13;&#10;        public static void DoShowTextGimmickHint(bool isInfo, string command)&#13;&#10;        {&#13;&#10;            CheckBeforeExecution(command);&#13;&#10;&#13;&#10;            string rawTime = command.Substring(0, command.IndexOf('\n')).Trim();&#13;&#10;            if (!double.TryParse(rawTime, NumberStyles.Float, CultureInfo.InvariantCulture, out double time))&#13;&#10;            {&#13;&#10;                throw Context.ParseTypeError(&quot;string&quot;, rawTime, &quot;double&quot;, command);&#13;&#10;            }&#13;&#10;            int timeIn100Ms = Math.Max(0, (int)(time * 10));&#13;&#10;            string text = command.Substring(command.IndexOf('\n') + 1);&#13;&#10;            PostNamazuUi?.Log((isInfo ? &quot;Hint&quot; : &quot;Warn&quot;) + $&quot; ({timeIn100Ms / 10.0:F1} s): \n{text}&quot;);&#13;&#10;&#13;&#10;            var assemblyLock = Memory.Executor.AssemblyLock;&#13;&#10;            var flag = false;&#13;&#10;            try&#13;&#10;            {&#13;&#10;                Monitor.Enter(assemblyLock, ref flag);&#13;&#10;                var frameworkPtr = Memory.Read&lt;IntPtr&gt;(FrameworkPtrPtr);&#13;&#10;                var uiModulePtr = Memory.CallInjected64&lt;IntPtr&gt;(GetUiModulePtr, frameworkPtr);&#13;&#10;                var raptureAtkModule = Memory.CallInjected64&lt;IntPtr&gt;(Memory.Read&lt;IntPtr&gt;(Memory.Read&lt;IntPtr&gt;(uiModulePtr) + (0x8 * 7)), uiModulePtr);&#13;&#10;                var array = Encoding.UTF8.GetBytes(text);&#13;&#10;                using AllocatedMemory allocatedMemory = Memory.CreateAllocatedMemory(array.Length + 30);&#13;&#10;                allocatedMemory.AllocateOfChunk(&quot;cmd&quot;, array.Length);&#13;&#10;                allocatedMemory.WriteBytes(&quot;cmd&quot;, array);&#13;&#10;                _ = Memory.CallInjected64&lt;int&gt;(ShowTextGimmickHintPtr, raptureAtkModule, allocatedMemory.Address, isInfo ? 1 : 0, timeIn100Ms);&#13;&#10;            }&#13;&#10;            finally&#13;&#10;            {&#13;&#10;                if (flag) Monitor.Exit(assemblyLock);&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    public static class QuitInstance&#13;&#10;    {&#13;&#10;        public static void DoQuitInstance(string cmd)&#13;&#10;        {&#13;&#10;            cmd = cmd.Trim().ToLower();&#13;&#10;            bool force = cmd == &quot;1&quot; || cmd == &quot;true&quot;;&#13;&#10;            var assemblyLock = Memory.Executor.AssemblyLock;&#13;&#10;            var flag = false;&#13;&#10;            try&#13;&#10;            {&#13;&#10;                Monitor.Enter(assemblyLock, ref flag);&#13;&#10;                _ = Memory.CallInjected64&lt;IntPtr&gt;(QuitInstancePtr, force ? 1 : 0);&#13;&#10;            }&#13;&#10;            finally&#13;&#10;            {&#13;&#10;                if (flag) Monitor.Exit(assemblyLock);&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    public static class EntityHelper&#13;&#10;    {&#13;&#10;        public static void ObjectScaling(string cmd)&#13;&#10;        {&#13;&#10;            var args = ParseArgs_OutAddress(cmd, out IntPtr objectPtr);&#13;&#10;            float scaleX = float.Parse(args[0], NumberStyles.Float, CultureInfo.InvariantCulture);&#13;&#10;            float scaleY = float.Parse(args.Length &gt; 1 ? args[1] : args[0], NumberStyles.Float, CultureInfo.InvariantCulture);&#13;&#10;            float scaleZ = float.Parse(args.Length &gt; 2 ? args[2] : args[0], NumberStyles.Float, CultureInfo.InvariantCulture);&#13;&#10;&#13;&#10;            var assemblyLock = Memory.Executor.AssemblyLock;&#13;&#10;            var flag = false;&#13;&#10;            try&#13;&#10;            {&#13;&#10;                Monitor.Enter(assemblyLock, ref flag);&#13;&#10;                ObjectScaling(objectPtr, scaleX, scaleY, scaleZ);&#13;&#10;            }&#13;&#10;            finally { if (flag) Monitor.Exit(assemblyLock); }&#13;&#10;        }&#13;&#10;&#13;&#10;        public static void SetOpacity(string cmd)&#13;&#10;        {&#13;&#10;            var args = ParseArgs_OutAddress(cmd, out IntPtr objectPtr);&#13;&#10;            float opacity = float.Parse(args[0], NumberStyles.Float, CultureInfo.InvariantCulture);&#13;&#10;            var assemblyLock = Memory.Executor.AssemblyLock;&#13;&#10;            var flag = false;&#13;&#10;            try&#13;&#10;            {&#13;&#10;                Monitor.Enter(assemblyLock, ref flag);&#13;&#10;                SetOpacity(objectPtr, opacity);&#13;&#10;            }&#13;&#10;            finally { if (flag) Monitor.Exit(assemblyLock); }&#13;&#10;        }&#13;&#10;&#13;&#10;        public static void SetOpacityForOtherPlayers(string cmd)&#13;&#10;        {&#13;&#10;            float opacity = float.Parse(cmd, NumberStyles.Float, CultureInfo.InvariantCulture);&#13;&#10;            var addresses = BridgeFFXIV.GetAllEntities()&#13;&#10;                .Where(c =&gt; (c.GetValue(&quot;id&quot;).ToString().StartsWith(&quot;10&quot;) &amp;&amp; c.GetValue(&quot;id&quot;).ToString() != BridgeFFXIV.PlayerHexId)&#13;&#10;                     || c.GetValue(&quot;ownerid&quot;).ToString().StartsWith(&quot;10&quot;))&#13;&#10;                .Select(c =&gt; (IntPtr)long.Parse(c.GetValue(&quot;address&quot;).ToString()));&#13;&#10;            var assemblyLock = Memory.Executor.AssemblyLock;&#13;&#10;            var flag = false;&#13;&#10;            try&#13;&#10;            {&#13;&#10;                Monitor.Enter(assemblyLock, ref flag);&#13;&#10;                foreach (var address in addresses)&#13;&#10;                {&#13;&#10;                    SetOpacity(address, opacity);&#13;&#10;                }&#13;&#10;            }&#13;&#10;            finally { if (flag) Monitor.Exit(assemblyLock); }&#13;&#10;        }&#13;&#10;&#13;&#10;        public static void Hide(string cmd)&#13;&#10;        {&#13;&#10;            var args = ParseArgs_OutAddress(cmd, out IntPtr objectPtr);&#13;&#10;            bool hide = bool.TryParse(args[0].ToLower(), out hide) ? hide : (!MathParser.IsZero(MathParser.Parse(args[0])));&#13;&#10;            var assemblyLock = Memory.Executor.AssemblyLock;&#13;&#10;            var flag = false;&#13;&#10;            try&#13;&#10;            {&#13;&#10;                Monitor.Enter(assemblyLock, ref flag);&#13;&#10;                Hide(objectPtr, hide);&#13;&#10;            }&#13;&#10;            finally { if (flag) Monitor.Exit(assemblyLock); }&#13;&#10;        }&#13;&#10;&#13;&#10;        public static void HideOtherPlayers(string cmd)&#13;&#10;        {&#13;&#10;            bool hide = bool.TryParse(cmd.ToLower(), out hide) ? hide : (!MathParser.IsZero(MathParser.Parse(cmd)));&#13;&#10;&#13;&#10;            var addresses = BridgeFFXIV.GetAllEntities()&#13;&#10;                .Where(c =&gt; (c.GetValue(&quot;id&quot;).ToString().StartsWith(&quot;10&quot;) &amp;&amp; c.GetValue(&quot;id&quot;).ToString() != BridgeFFXIV.PlayerHexId)&#13;&#10;                     || c.GetValue(&quot;ownerid&quot;).ToString().StartsWith(&quot;10&quot;))&#13;&#10;                .Select(c =&gt; (IntPtr)long.Parse(c.GetValue(&quot;address&quot;).ToString()));&#13;&#10;&#13;&#10;            var assemblyLock = Memory.Executor.AssemblyLock;&#13;&#10;            var flag = false;&#13;&#10;            try&#13;&#10;            {&#13;&#10;                Monitor.Enter(assemblyLock, ref flag);&#13;&#10;                foreach (var address in addresses)&#13;&#10;                {&#13;&#10;                    Hide(address, hide);&#13;&#10;                }&#13;&#10;            }&#13;&#10;            finally { if (flag) Monitor.Exit(assemblyLock); }&#13;&#10;        }&#13;&#10;&#13;&#10;        public static void SetStatusLoopVfx(string cmd)&#13;&#10;        {&#13;&#10;            var args = ParseArgs_OutAddress(cmd, out IntPtr objectPtr);&#13;&#10;            ushort vfxId = ushort.Parse(args[0]);&#13;&#10;            var assemblyLock = Memory.Executor.AssemblyLock;&#13;&#10;            var flag = false;&#13;&#10;            try&#13;&#10;            {&#13;&#10;                Monitor.Enter(assemblyLock, ref flag);&#13;&#10;                SetStatusLoopVfx(objectPtr, vfxId);&#13;&#10;                DisableDraw(objectPtr);&#13;&#10;                EnableDraw(objectPtr);&#13;&#10;            }&#13;&#10;            finally { if (flag) Monitor.Exit(assemblyLock); }&#13;&#10;        }&#13;&#10;&#13;&#10;        public static void Redraw(string address)&#13;&#10;        {&#13;&#10;            IntPtr entityPtr = (IntPtr)long.Parse(address);&#13;&#10;            var assemblyLock = Memory.Executor.AssemblyLock;&#13;&#10;            var flag = false;&#13;&#10;            try&#13;&#10;            {&#13;&#10;                Monitor.Enter(assemblyLock, ref flag);&#13;&#10;                DisableDraw(entityPtr);&#13;&#10;                EnableDraw(entityPtr);&#13;&#10;            }&#13;&#10;            finally { if (flag) Monitor.Exit(assemblyLock); }&#13;&#10;        }&#13;&#10;&#13;&#10;        public static void SetHighlightColor(string cmd)&#13;&#10;        {&#13;&#10;            var args = ParseArgs_OutAddress(cmd, out IntPtr objectPtr);&#13;&#10;            byte color = byte.Parse(args[0]);&#13;&#10;            var assemblyLock = Memory.Executor.AssemblyLock;&#13;&#10;            var flag = false;&#13;&#10;            try&#13;&#10;            {&#13;&#10;                Monitor.Enter(assemblyLock, ref flag);&#13;&#10;                SetHighlightColor(objectPtr, color);&#13;&#10;            }&#13;&#10;            finally { if (flag) Monitor.Exit(assemblyLock); }&#13;&#10;        }&#13;&#10;&#13;&#10;        private static void ObjectScaling(IntPtr objectAddress, float scaleX, float scaleY, float scaleZ)&#13;&#10;        {&#13;&#10;            uint id = Memory.Read&lt;uint&gt;(objectAddress + 0x74);&#13;&#10;            if (BridgeFFXIV.PlayerId == id) // 调整视角高度&#13;&#10;            {&#13;&#10;                Memory.Write&lt;float&gt;(objectAddress + 0xC4, (scaleZ + 1) / 2f);&#13;&#10;            }&#13;&#10;            IntPtr drawObjectAddress = Memory.Read&lt;IntPtr&gt;(objectAddress + 0x100);&#13;&#10;            Memory.Write&lt;float&gt;(drawObjectAddress + 0x70, scaleX);&#13;&#10;            Memory.Write&lt;float&gt;(drawObjectAddress + 0x74, scaleZ);&#13;&#10;            Memory.Write&lt;float&gt;(drawObjectAddress + 0x78, scaleY);&#13;&#10;        }&#13;&#10;&#13;&#10;        private static void SetOpacity(IntPtr objectAddress, float opacity)&#13;&#10;        {&#13;&#10;            // FFXIVClientStructs/FFXIV/Client/Game/Character/Character.cs&#13;&#10;            // [FieldOffset(0x21C8)] public float Alpha;&#13;&#10;            Memory.Write&lt;float&gt;(objectAddress + 0x21C8, opacity);&#13;&#10;        }&#13;&#10;&#13;&#10;        private static void Hide(IntPtr objectAddress, bool hide)&#13;&#10;        {&#13;&#10;            Memory.Write&lt;byte&gt;(objectAddress + 0x118, (byte)(hide ? 2 : 0));&#13;&#10;        }&#13;&#10;&#13;&#10;        private static void SetStatusLoopVfx(IntPtr objectAddress, ushort id)&#13;&#10;        {&#13;&#10;            Memory.Write&lt;ushort&gt;(objectAddress + (IsCN ? 0x1D8 : 0x1C8), id);&#13;&#10;            DisableDraw(objectAddress);&#13;&#10;            EnableDraw(objectAddress);&#13;&#10;        }&#13;&#10;&#13;&#10;        private static void EnableDraw(IntPtr address)&#13;&#10;        {&#13;&#10;            IntPtr vTablePtr = Memory.Read&lt;IntPtr&gt;(address);&#13;&#10;            IntPtr enableDrawPtr = Memory.Read&lt;IntPtr&gt;(vTablePtr + 8 * 12);&#13;&#10;            _ = Memory.CallInjected64&lt;IntPtr&gt;(enableDrawPtr, address);&#13;&#10;        }&#13;&#10;&#13;&#10;        private static void DisableDraw(IntPtr address)&#13;&#10;        {&#13;&#10;            IntPtr vTablePtr = Memory.Read&lt;IntPtr&gt;(address);&#13;&#10;            IntPtr disableDrawPtr = Memory.Read&lt;IntPtr&gt;(vTablePtr + 8 * 13);&#13;&#10;            _ = Memory.CallInjected64&lt;IntPtr&gt;(disableDrawPtr, address);&#13;&#10;        }&#13;&#10;&#13;&#10;        private static void SetHighlightColor(IntPtr address, byte color)&#13;&#10;        {&#13;&#10;            IntPtr vTablePtr = Memory.Read&lt;IntPtr&gt;(address);&#13;&#10;            IntPtr setHighlightColorPtr = Memory.Read&lt;IntPtr&gt;(vTablePtr + 8 * 26);&#13;&#10;            _ = Memory.CallInjected64&lt;IntPtr&gt;(setHighlightColorPtr, address, color);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    public static class VfxHelper&#13;&#10;    {&#13;&#10;        public static void LockOn(string cmd)&#13;&#10;        {&#13;&#10;            string[] args = ParseArgs_OutAddress(cmd, out IntPtr tgtAddress);&#13;&#10;            string vfxName = args[0];&#13;&#10;            var assemblyLock = Memory.Executor.AssemblyLock;&#13;&#10;            var flag = false;&#13;&#10;            try&#13;&#10;            {&#13;&#10;                Monitor.Enter(assemblyLock, ref flag);&#13;&#10;                _LockOn(tgtAddress, vfxName);&#13;&#10;            }&#13;&#10;            finally { if (flag) Monitor.Exit(assemblyLock); }&#13;&#10;        }&#13;&#10;&#13;&#10;        private static IntPtr _LockOn(IntPtr tgtAddress, string vfxName)&#13;&#10;        {&#13;&#10;            string path = $&quot;vfx/lockon/eff/{vfxName}.avfx&quot;;&#13;&#10;            IntPtr pathPtr = IntPtr.Zero;&#13;&#10;            try&#13;&#10;            {&#13;&#10;                pathPtr = Memory.AllocateMemory(256);&#13;&#10;                Memory.WriteString(pathPtr, path, Encoding.UTF8);&#13;&#10;                IntPtr vfxHandle = Memory.CallInjected64&lt;IntPtr&gt;(&#13;&#10;                    ActorVfxCreatePtr,&#13;&#10;                    pathPtr,    // vfx name&#13;&#10;                    tgtAddress, // caster &#13;&#10;                    tgtAddress, // target &#13;&#10;                    -1f, /*(char)*/(ushort)0, 0, /*(char)*/(ushort)0&#13;&#10;                );&#13;&#10;                return vfxHandle;&#13;&#10;            }&#13;&#10;            finally { if (pathPtr != IntPtr.Zero) Memory.FreeMemory(pathPtr); }&#13;&#10;        }&#13;&#10;&#13;&#10;        public static void Channeling(string cmd)&#13;&#10;        {&#13;&#10;            string[] args = ParseArgs_OutAddress2(cmd, out IntPtr srcAddress, out IntPtr tgtAddress);&#13;&#10;            string vfxName = args[0];&#13;&#10;            double duration = args.Length &gt; 1 ? double.Parse(args[1], NumberStyles.Float, CultureInfo.InvariantCulture) : 3.0;&#13;&#10;&#13;&#10;            IntPtr vfxHandle = ExecuteWithLock(() =&gt; _Channeling(srcAddress, tgtAddress, vfxName));&#13;&#10;            Thread.Sleep((int)(duration * 1000));&#13;&#10;            ExecuteWithLock(() =&gt; _ActorVfxRemove(vfxHandle));&#13;&#10;        }&#13;&#10;&#13;&#10;        private static IntPtr _Channeling(IntPtr srcAddress, IntPtr tgtAddress, string vfxName)&#13;&#10;        {&#13;&#10;            string path = $&quot;vfx/channeling/eff/{vfxName}.avfx&quot;;&#13;&#10;            IntPtr pathPtr = IntPtr.Zero;&#13;&#10;            try&#13;&#10;            {&#13;&#10;                pathPtr = Memory.AllocateMemory(256);&#13;&#10;                Memory.WriteString(pathPtr, path, Encoding.UTF8);&#13;&#10;                IntPtr vfxHandle = Memory.CallInjected64&lt;IntPtr&gt;(&#13;&#10;                    ActorVfxCreatePtr,&#13;&#10;                    pathPtr,    // vfx name&#13;&#10;                    srcAddress, // caster &#13;&#10;                    tgtAddress, // target &#13;&#10;                    -1f, /*(char)*/(ushort)0, 0, /*(char)*/(ushort)0&#13;&#10;                );&#13;&#10;                return vfxHandle;&#13;&#10;            }&#13;&#10;            finally { if (pathPtr != IntPtr.Zero) Memory.FreeMemory(pathPtr); }&#13;&#10;        }&#13;&#10;&#13;&#10;        private static void _ActorVfxRemove(IntPtr vfxHandle)&#13;&#10;        {&#13;&#10;            Memory.CallInjected64&lt;IntPtr&gt;(ActorVfxRemovePtr, vfxHandle, /*(char)*/(ushort)1);&#13;&#10;        }&#13;&#10;&#13;&#10;    }&#13;&#10;&#13;&#10;    public static class MapEffectHelper&#13;&#10;    {&#13;&#10;        public static void MapEffect(string command)&#13;&#10;        {&#13;&#10;            CheckBeforeExecution(command);&#13;&#10;            uint position;&#13;&#10;            ushort data1, data2;&#13;&#10;&#13;&#10;            if (command.Contains(&quot;,&quot;)) // given 3 parameters&#13;&#10;            {&#13;&#10;                var rawArgs = Context.SplitArguments(command);&#13;&#10;                if (!uint.TryParse(rawArgs[0], NumberStyles.Integer, CultureInfo.InvariantCulture, out position))&#13;&#10;                {&#13;&#10;                    throw Context.ParseTypeError(&quot;string&quot;, rawArgs[0], &quot;uint&quot;, command);&#13;&#10;                }&#13;&#10;                if (!ushort.TryParse(rawArgs[1], NumberStyles.Integer, CultureInfo.InvariantCulture, out data1))&#13;&#10;                {&#13;&#10;                    throw Context.ParseTypeError(&quot;string&quot;, rawArgs[1], &quot;ushort&quot;, command);&#13;&#10;                }&#13;&#10;                if (!ushort.TryParse(rawArgs[2], NumberStyles.Integer, CultureInfo.InvariantCulture, out data2))&#13;&#10;                {&#13;&#10;                    throw Context.ParseTypeError(&quot;string&quot;, rawArgs[2], &quot;ushort&quot;, command);&#13;&#10;                }&#13;&#10;            }&#13;&#10;            else // given act or network log format&#13;&#10;            {&#13;&#10;                string pattern = @&quot;^(?&lt;data2&gt;[0-9A-Fa-f]{4})(?&lt;data1&gt;[0-9A-Fa-f]{4})[:|](?&lt;position&gt;[0-9A-Fa-f]{1,8})$&quot;;&#13;&#10;                var match = Regex.Match(command.Trim(), pattern);&#13;&#10;                if (match.Success)&#13;&#10;                {&#13;&#10;                    data2 = ushort.Parse(match.Groups[&quot;data2&quot;].Value, NumberStyles.HexNumber, CultureInfo.InvariantCulture);&#13;&#10;                    data1 = ushort.Parse(match.Groups[&quot;data1&quot;].Value, NumberStyles.HexNumber, CultureInfo.InvariantCulture);&#13;&#10;                    position = uint.Parse(match.Groups[&quot;position&quot;].Value, NumberStyles.HexNumber, CultureInfo.InvariantCulture);&#13;&#10;                }&#13;&#10;                else&#13;&#10;                {&#13;&#10;                    throw new Exception($&quot;Invalid mapeffect parameters: {command}&quot;);&#13;&#10;                }&#13;&#10;            }&#13;&#10;&#13;&#10;            PostNamazuUi?.Log($&quot;MapEffect: position = {position}, data1 = {data1}, data2 = {data2} ({data2:X4}{data1:X4}:{position:X2})&quot;);&#13;&#10;&#13;&#10;            var assemblyLock = Memory.Executor.AssemblyLock;&#13;&#10;            var flag = false;&#13;&#10;            try&#13;&#10;            {&#13;&#10;                Monitor.Enter(assemblyLock, ref flag);&#13;&#10;                var mapEffectModulePtr = Memory.Read&lt;IntPtr&gt;(Memory.Read&lt;IntPtr&gt;(EventFrameworkPtrPtr) + 0x158);&#13;&#10;                Memory.CallInjected64&lt;IntPtr&gt;(MapEffectFunctionPtr, mapEffectModulePtr, position, data1, data2);&#13;&#10;            }&#13;&#10;            finally&#13;&#10;            {&#13;&#10;                if (flag) Monitor.Exit(assemblyLock);&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private static string[] ParseArgs_OutAddress(string cmd, out IntPtr address)&#13;&#10;    {&#13;&#10;        var args = Context.SplitArguments(cmd);&#13;&#10;        address = (IntPtr)long.Parse(args[0]);&#13;&#10;        return args.Skip(1).ToArray();&#13;&#10;    }&#13;&#10;&#13;&#10;    private static string[] ParseArgs_OutAddress2(string cmd, out IntPtr address1, out IntPtr address2)&#13;&#10;    {&#13;&#10;        var args = Context.SplitArguments(cmd);&#13;&#10;        address1 = (IntPtr)long.Parse(args[0]);&#13;&#10;        address2 = (IntPtr)long.Parse(args[1]);&#13;&#10;        return args.Skip(2).ToArray();&#13;&#10;    }&#13;&#10;&#13;&#10;    public static void Echo(string msg) =&gt; RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, $&quot;/e {msg}&quot;);&#13;&#10;&#13;&#10;    public static void Log(RealPlugin.DebugLevelEnum level, string msg) =&gt; Interpreter.StaticHelpers.Log(level, msg);&#13;&#10;&#13;&#10;}" ActionType="ExecuteScript" Description="鲶鱼精邮差扩展【注册回调】" DescriptionOverride="True">
                <Condition Enabled="true" Grouping="Or">
                  <ConditionSingle Enabled="true" ExpressionL="${ecallback:hint}" ExpressionTypeL="String" ExpressionR="0" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                </Condition>
              </Action>
            </Actions>
            <Condition Enabled="true" Grouping="Or">
              <ConditionSingle Enabled="true" ExpressionL="${ecallback:hint}" ExpressionTypeL="String" ExpressionR="0" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
            </Condition>
          </Trigger>
          <Trigger Enabled="false" Source="None" Name="鲶鱼精邮差扩展 说明" Id="3d897fe1-590f-4aae-acde-0846d06531f9" RegularExpression="">
            <Actions>
              <Action OrderNumber="1" ActionType="Placeholder" Asynchronous="False" Description="CafeACT 无法使用此工具。" DescBgColor="f0f8ff" DescTextColor="234" DescriptionOverride="True"/>
              <Action OrderNumber="2" ActionType="Placeholder" Asynchronous="False" Description="鲶鱼精邮差扩展" DescBgColor="acf" DescTextColor="248" DescriptionOverride="True"/>
              <Action OrderNumber="3" ActionType="Placeholder" Asynchronous="False" Description="　利用鲶鱼精邮差的内存相关工具，向触发器注册以下回调。" DescBgColor="f0f8ff" DescTextColor="234" DescriptionOverride="True"/>
              <Action OrderNumber="4" ActionType="Placeholder" Asynchronous="False" Description="　注：这些功能与鲶鱼精本身无关。下方的测试行可以双击查看怎么使用。" DescBgColor="f0f8ff" DescTextColor="234" DescriptionOverride="True"/>
              <Action OrderNumber="5" ActionType="Placeholder" Asynchronous="False" Description="1. 文本提示：“hint”（蓝色）、“warn”（红色），回调参数：“时间/秒（换行）显示文本”" DescBgColor="f0f8ff" DescTextColor="26f" DescriptionOverride="True"/>
              <Action OrderNumber="6" NamedCallbackName="warn" NamedCallbackParam="3&#13;&#10;我是 Honey Bee 小姐的狗！" ActionType="NamedCallback" Description="· 右键此行可测试动作（显示提示文本）" DescBgColor="f0f8ff" DescTextColor="2a8" DescriptionOverride="True"/>
              <Action OrderNumber="7" ActionType="Placeholder" Asynchronous="False" Description="2. 退出副本：“quit”，回调参数留空，如下一行" DescBgColor="f0f8ff" DescTextColor="26f" DescriptionOverride="True"/>
              <Action OrderNumber="8" NamedCallbackName="quit" ActionType="NamedCallback" Description="· 右键此行可测试动作（退本）" DescBgColor="f0f8ff" DescTextColor="2a8" DescriptionOverride="True"/>
              <Action OrderNumber="9" ActionType="Placeholder" Asynchronous="False" Description="3. 缩放实体：“ObjectScaling”，回调参数为 “实体地址, scaleX, scaleY, scaleZ”, 如下一行" DescBgColor="f0f8ff" DescTextColor="26f" DescriptionOverride="True"/>
              <Action OrderNumber="10" NamedCallbackName="ObjectScaling" NamedCallbackParam="${_me.address}, 5" ActionType="NamedCallback" Description="· 右键此行可测试动作（放大自身）" DescBgColor="f0f8ff" DescTextColor="2a8" DescriptionOverride="True"/>
              <Action OrderNumber="11" NamedCallbackName="ObjectScaling" NamedCallbackParam="${_me.address}, 1" ActionType="NamedCallback" Description="· 右键此行可测试动作（复原自身）" DescBgColor="f0f8ff" DescTextColor="2a8" DescriptionOverride="True"/>
              <Action OrderNumber="12" ActionType="Placeholder" Asynchronous="False" Description="4. 设置不透明度：“SetOpacity”，回调参数为 “实体地址, 不透明度(0-1)” (7.1 暂不能使用)" DescBgColor="f0f8ff" DescTextColor="26f" DescriptionOverride="True"/>
              <Action OrderNumber="13" NamedCallbackName="SetOpacity" NamedCallbackParam="${_me.address}, 0.3" ActionType="NamedCallback" Description="· 右键此行可测试动作（自身半透明）" DescBgColor="f0f8ff" DescTextColor="2a8" DescriptionOverride="True"/>
              <Action OrderNumber="14" NamedCallbackName="SetOpacityForOtherPlayers" NamedCallbackParam="0.1" ActionType="NamedCallback" Description="· 右键此行可测试动作（全员半透明）" DescBgColor="f0f8ff" DescTextColor="2a8" DescriptionOverride="True"/>
              <Action OrderNumber="15" NamedCallbackName="SetOpacity" NamedCallbackParam="${_me.address}, 1" ActionType="NamedCallback" Description="· 右键此行可测试动作（自身恢复）" DescBgColor="f0f8ff" DescTextColor="2a8" DescriptionOverride="True"/>
              <Action OrderNumber="16" ActionType="Placeholder" Asynchronous="False" Description="5. 隐藏实体" DescBgColor="f0f8ff" DescTextColor="26f" DescriptionOverride="True"/>
              <Action OrderNumber="17" NamedCallbackName="HideOtherPlayers" NamedCallbackParam="1" ActionType="NamedCallback" Description="· 右键此行可测试动作（全员隐藏）" DescBgColor="f0f8ff" DescTextColor="2a8" DescriptionOverride="True"/>
              <Action OrderNumber="18" NamedCallbackName="HideOtherPlayers" NamedCallbackParam="0" ActionType="NamedCallback" Description="· 右键此行可测试动作（全员恢复）" DescBgColor="f0f8ff" DescTextColor="2a8" DescriptionOverride="True"/>
              <Action OrderNumber="19" ActionType="Placeholder" Asynchronous="False" Description="6. 设置状态特效（StatusLoopVfx）" DescBgColor="f0f8ff" DescTextColor="26f" DescriptionOverride="True"/>
              <Action OrderNumber="20" NamedCallbackName="SetStatusLoopVfx" NamedCallbackParam="${_me.address}, 683" ActionType="NamedCallback" Description="· 右键此行可测试动作（设置自身特效）" DescBgColor="f0f8ff" DescTextColor="2a8" DescriptionOverride="True"/>
              <Action OrderNumber="21" NamedCallbackName="SetStatusLoopVfx" NamedCallbackParam="${_me.address}, 692" ActionType="NamedCallback" Description="· 右键此行可测试动作（设置自身特效）" DescBgColor="f0f8ff" DescTextColor="2a8" DescriptionOverride="True"/>
              <Action OrderNumber="22" NamedCallbackName="SetStatusLoopVfx" NamedCallbackParam="${_me.address}, 0" ActionType="NamedCallback" Description="· 右键此行可测试动作（清除自身特效）" DescBgColor="f0f8ff" DescTextColor="2a8" DescriptionOverride="True"/>
              <Action OrderNumber="23" ActionType="Placeholder" Asynchronous="False" Description="7. 设置点名标记特效（LockOn）" DescBgColor="f0f8ff" DescTextColor="26f" DescriptionOverride="True"/>
              <Action OrderNumber="24" NamedCallbackName="LockOn" NamedCallbackParam="${_me.address}, m0857_stop_s5t1" ActionType="NamedCallback" Description="· 右键此行可测试动作（设置自身特效）" DescBgColor="f0f8ff" DescTextColor="2a8" DescriptionOverride="True"/>
              <Action OrderNumber="25" NamedCallbackName="LockOn" NamedCallbackParam="${_me.address}, m0855trg_rot_c5a1" ActionType="NamedCallback" Description="· 右键此行可测试动作（设置自身特效）" DescBgColor="f0f8ff" DescTextColor="2a8" DescriptionOverride="True"/>
              <Action OrderNumber="26" ActionType="Placeholder" Asynchronous="False" Description="8. 设置连线特效（Channeling）" DescBgColor="f0f8ff" DescTextColor="26f" DescriptionOverride="True"/>
              <Action OrderNumber="27" NamedCallbackName="Channeling" NamedCallbackParam="${_me.address}, ${_entity[${_me.targetid}].address}, chn_m0906_ht02k2" ActionType="NamedCallback" Description="· 右键此行可测试动作（设置特效：自身 → 选中的目标）" DescBgColor="f0f8ff" DescTextColor="2a8" DescriptionOverride="True"/>
              <Action OrderNumber="28" ActionType="Placeholder" Asynchronous="False" Description="9. 地图特效（MapEffect） 回调参数：日志格式（00800040:07）或参数格式（7, 64, 128）" DescBgColor="f0f8ff" DescTextColor="26f" DescriptionOverride="True"/>
              <Action OrderNumber="29" NamedCallbackName="MapEffect" NamedCallbackParam="00020001:00" ActionType="NamedCallback" Description="· 进入极火天王副本，右键此行可测试动作 （在非副本地图使用可能直接炸游戏）" DescBgColor="f0f8ff" DescTextColor="2a8" DescriptionOverride="True"/>
            </Actions>
          </Trigger>
        </Triggers>
      </Folder>
      <Folder Id="078f8a75-2ef6-47b0-808c-675dd305f8be" Name="小队框架 PartyList v2.0" Enabled="true">
        <Folders>
          <Folder Id="82610aea-3097-4a9f-b7fc-4114aea41949" Name="记录完整小队" Enabled="true">
            <Folders/>
            <Triggers>
              <Trigger Enabled="true" Name="[F] 注册区域      PartyList:Register:[zoneid]:[playerDescs]" Id="4644ecb9-dd23-4707-b23d-6bda38c2c2a6" RegularExpression="^PartyList:Register:(?&lt;zoneid&gt;\d+):(?&lt;playerDescs&gt;.+)">
                <Actions>
                  <Action OrderNumber="1" DictVariableOp="Set" DictVariableName="PartyListPlayerDescs" DictVariableKey="${zoneid}" DictVariableValue="${playerDescs}" ActionType="DictVariable"/>
                  <Action OrderNumber="2" ActionType="Placeholder" Asynchronous="False" Description="如果当前处于要注册的地图：触发检查" DescriptionOverride="True"/>
                  <Action OrderNumber="3" LogMessageText="PartyList:Show:1:1:0:${zoneid}" LogProcess="True" ActionType="LogMessage">
                    <Condition Enabled="true" Grouping="Or">
                      <ConditionSingle Enabled="true" ExpressionL="${zoneid}" ExpressionTypeL="String" ExpressionR="${_ffxivzoneid}" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                    </Condition>
                  </Action>
                </Actions>
                <Condition Enabled="true" Grouping="Or">
                  <ConditionSingle Enabled="true" ExpressionL="${playerDescs}" ExpressionTypeL="String" ExpressionR="Self" ExpressionTypeR="String" ConditionType="StringNotEqualNocase"/>
                </Condition>
              </Trigger>
              <Trigger Enabled="true" Name="接收：倒计时" Id="d5e977d1-0557-4e56-8431-1c93f8f3dbf9" RegularExpression="^.{15}\S+ 10C:">
                <Actions>
                  <Action OrderNumber="1" LogMessageText="PartyList:Show:0:1:0" LogProcess="True" ActionType="LogMessage"/>
                </Actions>
                <Condition Enabled="true" Grouping="And">
                  <ConditionSingle Enabled="true" ExpressionL="${d:PartyListPlayerDescs[${_ffxivzoneid}]}" ExpressionTypeL="String" ExpressionR="" ExpressionTypeR="String" ConditionType="StringNotEqualCase"/>
                  <ConditionSingle Enabled="true" ExpressionL="${d:PartyListPlayerDescs[${_ffxivzoneid}]}" ExpressionTypeL="String" ExpressionR="Self" ExpressionTypeR="String" ConditionType="StringNotEqualCase"/>
                </Condition>
              </Trigger>
              <Trigger Enabled="true" Name="接收：文本指令　　/e party　（非全队模式下提示错误）" Id="6b35dda2-854d-4ae3-98ca-66a8f6b25025" RegularExpression="^.{15}\S+ 00:0038:: *[Pp][Aa][Rr][Tt][Yy] *$">
                <Actions>
                  <Action OrderNumber="1" ActionType="Placeholder" Description="条件：当前地图未注册为全队模式" DescriptionOverride="True"/>
                  <Action OrderNumber="2" UseTTSTextExpression="当前地图区域未注册小队类型。" ActionType="UseTTS"/>
                </Actions>
                <Condition Enabled="true" Grouping="Or">
                  <ConditionSingle Enabled="true" ExpressionL="${d:PartyListPlayerDescs[${_ffxivzoneid}]}" ExpressionTypeL="String" ExpressionR="Self" ExpressionTypeR="String" ConditionType="StringEqualNocase"/>
                  <ConditionSingle Enabled="true" ExpressionL="${d:PartyListPlayerDescs[${_ffxivzoneid}]}" ExpressionTypeL="String" ExpressionR="" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                </Condition>
              </Trigger>
              <Trigger Enabled="true" Sequential="True" Name="[F][C] 开启窗口   PartyList:Show:..." Id="66d05a9f-3309-4050-acc7-bfa6c11a94ad" RegularExpression="^PartyList:Show:(?&lt;successTTS&gt;[01]):(?&lt;failTTS&gt;[01]):(?&lt;forceOpen&gt;[01])(?::(?&lt;zoneid&gt;[^:]*))?">
                <Actions>
                  <Action OrderNumber="1" UseTTSTextExpression="正在开启小队配置" ActionType="UseTTS">
                    <Condition Enabled="true" Grouping="And">
                      <ConditionSingle Enabled="true" ExpressionL="${successTTS}" ExpressionTypeL="String" ExpressionR="1" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                      <ConditionGroup Enabled="true" Grouping="Or">
                        <ConditionSingle Enabled="true" ExpressionL="${ev:PartyListForm_isRunning}" ExpressionTypeL="String" ExpressionR="0" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                        <ConditionSingle Enabled="true" ExpressionL="${forceOpen}" ExpressionTypeL="String" ExpressionR="1" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                      </ConditionGroup>
                    </Condition>
                  </Action>
                  <Action OrderNumber="2" UseTTSTextExpression="请检查后台窗口" ActionType="UseTTS">
                    <Condition Enabled="true" Grouping="And">
                      <ConditionSingle Enabled="true" ExpressionL="${ev:PartyListForm_isRunning}" ExpressionTypeL="String" ExpressionR="1" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                      <ConditionSingle Enabled="true" ExpressionL="${successTTS}" ExpressionTypeL="String" ExpressionR="1" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                      <ConditionSingle Enabled="true" ExpressionL="${forceOpen}" ExpressionTypeL="String" ExpressionR="0" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="3" ExecScriptExpression="using System;&#13;&#10;using System.Collections.Generic;&#13;&#10;using System.Drawing;&#13;&#10;using System.Globalization;&#13;&#10;using System.Linq;&#13;&#10;using System.Threading;&#13;&#10;using System.Windows.Forms;&#13;&#10;using Triggernometry;&#13;&#10;using Triggernometry.CustomControls;&#13;&#10;using static Triggernometry.Interpreter;&#13;&#10;&#13;&#10;public struct Info&#13;&#10;{&#13;&#10;    public const string Name = &quot;小队列表&quot;;&#13;&#10;    public const string Version = &quot;0.3&quot;; // 2024.11.25&#13;&#10;    public const string Author = &quot;阿洛 MnFeN&quot;;&#13;&#10;}&#13;&#10;&#13;&#10;RealPlugin.plug.RegisterNamedCallback(&quot;PartyList&quot;, new Action&lt;object, string&gt;(PartyListHelper.Start), null);&#13;&#10;&#13;&#10;public static class PartyListHelper&#13;&#10;{&#13;&#10;    public static void Start(object _, string rawPlayerDescriptions)&#13;&#10;    {&#13;&#10;        StaticHelpers.SetScalarVariable(false, &quot;PartyListForm_isRunning&quot;, &quot;1&quot;);&#13;&#10;        try&#13;&#10;        {&#13;&#10;            string[] playerDescriptions = Context.SplitArguments(rawPlayerDescriptions);&#13;&#10;            if (playerDescriptions.Length &lt; 1) throw new ArgumentException(&quot;PartyList: 未提供初始化小队列表所需的描述文本参数。&quot;);&#13;&#10;            Thread staThread = new Thread(() =&gt; new PartyListForm(playerDescriptions).Run());&#13;&#10;            staThread.SetApartmentState(ApartmentState.STA);&#13;&#10;            staThread.Start();&#13;&#10;            staThread.Join();&#13;&#10;        }&#13;&#10;        finally&#13;&#10;        {&#13;&#10;            StaticHelpers.SetScalarVariable(false, &quot;PartyListForm_isRunning&quot;, null);&#13;&#10;        }&#13;&#10;    }&#13;&#10;}&#13;&#10;&#13;&#10;#region PartyListForm&#13;&#10;public class PartyListForm : Form&#13;&#10;{&#13;&#10;    public static Font UserFont = CreateFont(10, &quot;Microsoft YaHei&quot;, &quot;Microsoft JhengHei&quot;);&#13;&#10;&#13;&#10;    PartyListPanel partyListPanel;&#13;&#10;&#13;&#10;    /// &lt;summary&gt; The Panel that contains all the option groups on the form, scrollable. &lt;/summary&gt;&#13;&#10;    Panel mainPanel = new Panel()&#13;&#10;    {&#13;&#10;        AutoSize = true,&#13;&#10;        AutoSizeMode = AutoSizeMode.GrowAndShrink,&#13;&#10;        Dock = DockStyle.Top,&#13;&#10;        AutoScroll = true,&#13;&#10;    };&#13;&#10;&#13;&#10;    /// &lt;summary&gt; The TableLayoutPanel which contains buttons and other controls at the bottom of the form. &lt;/summary&gt;&#13;&#10;    TableLayoutPanel bottomPanel = new BottomTableLayoutPanel();&#13;&#10;&#13;&#10;    public Button btnSave = new MyButton { Text = &quot;保存&quot; };&#13;&#10;&#13;&#10;    public PartyListForm(params string[] playerDescriptions)&#13;&#10;    {&#13;&#10;        // SuspendLayout until Run()&#13;&#10;        SuspendLayout();&#13;&#10;        // basic&#13;&#10;        Text = Info.Name;&#13;&#10;        Font = UserFont;&#13;&#10;        TopMost = true;&#13;&#10;        StartPosition = FormStartPosition.CenterScreen;&#13;&#10;        int width = (TextRenderer.MeasureText(&quot;啊啊啊啊啊&quot;, Font).Width) * 8;&#13;&#10;        MinimumSize = new Size(width, width * 3 / 5); // To-do：添加一个根据所有控件总高度调节最小高度的逻辑&#13;&#10;&#13;&#10;        // Controls&#13;&#10;        Controls.Add(mainPanel);&#13;&#10;        Controls.Add(bottomPanel);&#13;&#10;        bottomPanel.Controls.Add(btnSave);&#13;&#10;        bottomPanel.ColumnStyles.Add(new ColumnStyle(SizeType.AutoSize));&#13;&#10;&#13;&#10;        // Events&#13;&#10;        Shown += (sender, e) =&gt; RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &lt;se.9&gt;\n正在开启小队列表控件。\n如果没有看到，请检查后台窗口。&quot;);&#13;&#10;        Shown += (sender, e) =&gt; mainPanel.AutoScrollPosition = new Point(0, 0);&#13;&#10;        btnSave.Click += btnSave_Click;&#13;&#10;&#13;&#10;        // PartyListPanel&#13;&#10;        partyListPanel = new PartyListPanel(playerDescriptions);&#13;&#10;        var group = new MyGroupBox { Text = &quot; 小队顺序（拖拽调整）&quot; };&#13;&#10;        var panel = new GroupPanel();&#13;&#10;        mainPanel.Controls.Add(panel);&#13;&#10;        panel.Controls.Add(group);&#13;&#10;        group.Controls.Add(partyListPanel);&#13;&#10;    }&#13;&#10;&#13;&#10;    public static Font CreateFont(float size, params string[] fontFamilies)&#13;&#10;    {&#13;&#10;        foreach (var fontFamily in fontFamilies)&#13;&#10;        {&#13;&#10;            try { return new Font(fontFamily, size); }&#13;&#10;            catch (ArgumentException) { }&#13;&#10;        }&#13;&#10;        return SystemFonts.DefaultFont;&#13;&#10;    }&#13;&#10;&#13;&#10;    void btnSave_Click(object sender, EventArgs e)&#13;&#10;    {&#13;&#10;        partyListPanel.SaveToConfig();&#13;&#10;        RealPlugin.plug.InvokeNamedCallback(&quot;command&quot;, &quot;/e &lt;se.10&gt;\n已保存小队列表。&quot;);&#13;&#10;        Close();&#13;&#10;    }&#13;&#10;&#13;&#10;    /// &lt;summary&gt; 读取配置，恢复表单布局，显示表单。&lt;/summary&gt;&#13;&#10;    public void Run()&#13;&#10;    {&#13;&#10;        partyListPanel.LoadFromConfig();&#13;&#10;        ResumeLayout();&#13;&#10;        ShowDialog();&#13;&#10;        Dispose();&#13;&#10;    }&#13;&#10;&#13;&#10;    class BottomTableLayoutPanel : TableLayoutPanel&#13;&#10;    {&#13;&#10;        public BottomTableLayoutPanel() : base()&#13;&#10;        {&#13;&#10;            Dock = DockStyle.Bottom;&#13;&#10;            RowCount = 1;&#13;&#10;            ColumnCount = 1;&#13;&#10;            ColumnStyles.Add(new ColumnStyle(SizeType.AutoSize));&#13;&#10;        }&#13;&#10;    }&#13;&#10;    class MyGroupBox : GroupBox&#13;&#10;    {&#13;&#10;        public MyGroupBox() : base()&#13;&#10;        {&#13;&#10;            Dock = DockStyle.Top;&#13;&#10;            AutoSize = true;&#13;&#10;            AutoSizeMode = AutoSizeMode.GrowAndShrink;&#13;&#10;            Margin = new Padding(20);&#13;&#10;        }&#13;&#10;    }&#13;&#10;    class MyButton : Button&#13;&#10;    {&#13;&#10;        public MyButton() : base()&#13;&#10;        {&#13;&#10;            Anchor = AnchorStyles.None;&#13;&#10;            AutoSize = true;&#13;&#10;            Margin = new Padding(5);&#13;&#10;            Padding = new Padding(5);&#13;&#10;        }&#13;&#10;    }&#13;&#10;    class BackgroundPanel : Panel&#13;&#10;    {&#13;&#10;        public BackgroundPanel() : base()&#13;&#10;        {&#13;&#10;            AutoSize = true;&#13;&#10;            AutoSizeMode = AutoSizeMode.GrowAndShrink;&#13;&#10;            Dock = DockStyle.Fill;&#13;&#10;            AutoScroll = true;&#13;&#10;        }&#13;&#10;    }&#13;&#10;    class GroupPanel : Panel&#13;&#10;    {&#13;&#10;        public GroupPanel() : base()&#13;&#10;        {&#13;&#10;            AutoSize = true;&#13;&#10;            AutoSizeMode = AutoSizeMode.GrowAndShrink;&#13;&#10;            Dock = DockStyle.Top;&#13;&#10;            Padding = new Padding(20, 20, 20, 0);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;}&#13;&#10;&#13;&#10;#endregion&#13;&#10;" ActionType="ExecuteScript">
                    <Condition Enabled="true" Grouping="Or">
                      <ConditionSingle Enabled="true" ExpressionL="${ecallback:小队列表}" ExpressionTypeL="String" ExpressionR="0" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                      <ConditionSingle Enabled="true" ExpressionL="${forceOpen}" ExpressionTypeL="String" ExpressionR="1" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="4" NamedCallbackName="PartyList" NamedCallbackParam="${d:PartyListPlayerDescs[${n: ${zoneid} ?? ${_ffxivzoneid} }]}" ActionType="NamedCallback">
                    <Condition Enabled="true" Grouping="Or">
                      <ConditionSingle Enabled="true" ExpressionL="${ev:PartyListForm_isRunning}" ExpressionTypeL="String" ExpressionR="0" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                      <ConditionSingle Enabled="true" ExpressionL="${forceOpen}" ExpressionTypeL="String" ExpressionR="1" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                    </Condition>
                  </Action>
                </Actions>
                <Condition Enabled="true" Grouping="And">
                  <ConditionSingle Enabled="true" ExpressionL="${d:PartyListPlayerDescs[${_ffxivzoneid}]}" ExpressionTypeL="String" ExpressionR="" ExpressionTypeR="String" ConditionType="StringNotEqualCase"/>
                  <ConditionSingle Enabled="true" ExpressionL="${d:PartyListPlayerDescs[${_ffxivzoneid}]}" ExpressionTypeL="String" ExpressionR="Self" ExpressionTypeR="String" ConditionType="StringNotEqualCase"/>
                </Condition>
              </Trigger>
              <Trigger Enabled="true" Name="接收：团灭" Id="46cedb18-cc8c-427e-8243-c4d1dd1421b5" RegularExpression="^.{15}\S+ 21:.{8}:4000000(?&lt;type&gt;[16])">
                <Actions>
                  <Action OrderNumber="1" LogMessageText="PartyList:Show:0:1:0" LogProcess="True" ActionType="LogMessage"/>
                </Actions>
                <Condition Enabled="true" Grouping="And">
                  <ConditionSingle Enabled="true" ExpressionL="${d:PartyListPlayerDescs[${_ffxivzoneid}]}" ExpressionTypeL="String" ExpressionR="" ExpressionTypeR="String" ConditionType="StringNotEqualCase"/>
                  <ConditionSingle Enabled="true" ExpressionL="${d:PartyListPlayerDescs[${_ffxivzoneid}]}" ExpressionTypeL="String" ExpressionR="Self" ExpressionTypeR="String" ConditionType="StringNotEqualCase"/>
                </Condition>
              </Trigger>
              <Trigger Enabled="true" Name="接收：文本指令　　/e party　（正确）" Id="3397bef6-a5ac-4ffe-94a3-3d87382ac30c" RegularExpression="^.{15}\S+ 00:0038:: *[Pp][Aa][Rr][Tt][Yy] *(?&lt;force&gt; force)?$">
                <Actions>
                  <Action OrderNumber="1" ActionType="Placeholder" Description="条件：当前地图注册为全队模式（或使用 force 强制开启）" DescriptionOverride="True"/>
                  <Action OrderNumber="2" LogMessageText="PartyList:Show:1:1:${if: len(${force}) &gt; 0 ? 1 : 0 }" LogProcess="True" ActionType="LogMessage"/>
                </Actions>
                <Condition Enabled="true" Grouping="Or">
                  <ConditionSingle Enabled="true" ExpressionL="${force}" ExpressionTypeL="String" ExpressionR="" ExpressionTypeR="String" ConditionType="StringNotEqualCase"/>
                  <ConditionGroup Enabled="true" Grouping="And">
                    <ConditionSingle Enabled="true" ExpressionL="${d:PartyListPlayerDescs[${_ffxivzoneid}]}" ExpressionTypeL="String" ExpressionR="" ExpressionTypeR="String" ConditionType="StringNotEqualCase"/>
                    <ConditionSingle Enabled="true" ExpressionL="${d:PartyListPlayerDescs[${_ffxivzoneid}]}" ExpressionTypeL="String" ExpressionR="Self" ExpressionTypeR="String" ConditionType="StringNotEqualNocase"/>
                  </ConditionGroup>
                </Condition>
              </Trigger>
            </Triggers>
          </Folder>
          <Folder Id="67fc4caa-fba2-4f82-a9aa-cbde4e240807" Name="记录自身位置" Enabled="true">
            <Folders/>
            <Triggers>
              <Trigger Enabled="true" Sequential="True" Name="[F] Setter        PartyList:MyIdx8:[1-8]" Id="5453edd5-9419-41c7-94c5-9e3ac192a97c" RegularExpression="^PartyList:MyIdx8:(?&lt;idx&gt;\d)">
                <Actions>
                  <Action OrderNumber="1" ActionType="Placeholder" Description="MyIdx8:序号" DescriptionOverride="True"/>
                  <Action OrderNumber="2" VariableOp="SetString" VariableName="myIdx" VariableExpression="${idx}" ActionType="Variable"/>
                  <Action OrderNumber="3" VariableOp="SetNumeric" VariableName="myIdx_isG1" VariableExpression="${v:myIdx} % 2 = 1" ActionType="Variable"/>
                  <Action OrderNumber="4" VariableOp="SetNumeric" VariableName="myIdx_isTH" VariableExpression="${v:myIdx} &lt;= 4" ActionType="Variable"/>
                  <Action OrderNumber="5" VariableOp="SetNumeric" VariableName="myIdx_isTM" VariableExpression="${v:myIdx} % 4 % 3 != 0" ActionType="Variable"/>
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Name="接收：团灭" Id="ab5f0b38-8d3c-42f6-9335-838b738e5030" RegularExpression="^.{15}\S+ 21:.{8}:4000000(?&lt;type&gt;[16])">
                <Actions>
                  <Action OrderNumber="1" ActionType="Placeholder" Asynchronous="False" Description="条件：已注册 zoneId =&gt; Self" DescriptionOverride="True"/>
                  <Action OrderNumber="2" LogMessageText="PartyList:MyIdxCheck:0:1:0:1:0:10::&lt;se.11&gt;" LogProcess="True" ActionType="LogMessage"/>
                </Actions>
                <Condition Enabled="true" Grouping="Or">
                  <ConditionSingle Enabled="true" ExpressionL="${d:PartyListPlayerDescs[${_ffxivzoneid}]}" ExpressionTypeL="String" ExpressionR="Self" ExpressionTypeR="String" ConditionType="StringEqualNocase"/>
                </Condition>
              </Trigger>
              <Trigger Enabled="true" Sequential="True" Name="接收：文本指令　　/e MT 　　（正确）" Id="bedbfe91-ebe2-4692-b661-aefa54f6e164" RegularExpression="^.{15}\S+ 00:0038:: *([MmSs][Tt]|[TtHhDd][1-4]) *$">
                <Actions>
                  <Action OrderNumber="1" ActionType="Placeholder" Asynchronous="False" Description="条件：当前地图未注册为全队模式" DescriptionOverride="True"/>
                  <Action OrderNumber="2" LogMessageText="PartyList:MyIdx8:${?d: &#13;&#10;  MT = 1, T1 = 1,  &#13;&#10;  ST = 2, T2 = 2, &#13;&#10;  H1 = 3, &#13;&#10;  H2 = 4, &#13;&#10;  D1 = 5, &#13;&#10;  D2 = 6, &#13;&#10;  D3 = 7, &#13;&#10;  D4 = 8  &#13;&#10;  [${f:toupper:$1}]&#13;&#10;}" LogProcess="True" ActionType="LogMessage"/>
                  <Action OrderNumber="3"/>
                  <Action OrderNumber="4" LogMessageText="PartyList:MyIdxCheck:1:1:1:1:5:10:&lt;se.10&gt;:&lt;se.11&gt;" LogProcess="True" LogProcessACT="True" ActionType="LogMessage"/>
                </Actions>
                <Condition Enabled="true" Grouping="Or">
                  <ConditionSingle Enabled="true" ExpressionL="${d:PartyListPlayerDescs[${_ffxivzoneid}]}" ExpressionTypeL="String" ExpressionR="Self" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                  <ConditionSingle Enabled="true" ExpressionL="${d:PartyListPlayerDescs[${_ffxivzoneid}]}" ExpressionTypeL="String" ExpressionR="" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                </Condition>
              </Trigger>
              <Trigger Enabled="true" Name="[F] 注册区域      PartyList:Register:[zoneid]:Self" Id="9dcc2cf8-b902-4038-b8d3-bcbd87c72b39" RegularExpression="^PartyList:Register:(?&lt;zoneid&gt;\d+):Self">
                <Actions>
                  <Action OrderNumber="1" DictVariableOp="Set" DictVariableName="PartyListPlayerDescs" DictVariableKey="${zoneid}" DictVariableValue="Self" ActionType="DictVariable"/>
                  <Action OrderNumber="2" ActionType="Placeholder" Asynchronous="False" Description="如果当前处于要注册的地图：触发检查" DescriptionOverride="True"/>
                  <Action OrderNumber="3" LogMessageText="PartyList:MyIdxCheck:1:1:1:1:10:10:&lt;se.9&gt;:&lt;se.9&gt;" LogProcess="True" ActionType="LogMessage">
                    <Condition Enabled="true" Grouping="Or">
                      <ConditionSingle Enabled="true" ExpressionL="${zoneid}" ExpressionTypeL="String" ExpressionR="${_ffxivzoneid}" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                    </Condition>
                  </Action>
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Sequential="True" Name="[F] 检查或播报    PartyList:MyIdxCheck:..." Id="7da49d12-41e8-43a4-8507-7bae1bb0fc82" RegularExpression="^PartyList:MyIdxCheck:(?&lt;successTTS&gt;[01]):(?&lt;failTTS&gt;[01]):(?&lt;successEcho&gt;[01]):(?&lt;failEcho&gt;[01]):(?&lt;successHintTime&gt;[^:]+):(?&lt;failHintTime&gt;[^:]+):(?&lt;successSound&gt;[^:]*):(?&lt;failSound&gt;[^:]*)">
                <Actions>
                  <Action OrderNumber="1" VariableOp="SetNumeric" VariableName="tmp_success" VariableExpression="(0${v:myIdx} &gt; 0) &amp;&amp; (0${v:myIdx} &lt;= 8) &amp;&amp; (0${v:myIdx} % 1 = 0)" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="2" ActionType="Placeholder" Asynchronous="False" Description="fail" DescriptionOverride="True"/>
                  <Action OrderNumber="3" VariableOp="SetString" VariableName="tmp_hint" VariableExpression="尚未设置自身职能。&#13;&#10;可输入文本指令设置，大小写不限。&#13;&#10;如：　/e mt　　/e h1　　/e d4" ActionType="Variable" Asynchronous="False">
                    <Condition Enabled="true" Grouping="And">
                      <ConditionSingle Enabled="true" ExpressionL="${f:contain(&quot; &quot;):${_me.name}}" ExpressionTypeL="String" ExpressionR="0" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="4" VariableOp="SetString" VariableName="tmp_hint" VariableExpression="尚未設置自身職能。&#13;&#10;可輸入文本指令設置，大小写不限。&#13;&#10;如：　/e mt　　/e h1　　/e d4" ActionType="Variable" Asynchronous="False">
                    <Condition Enabled="true" Grouping="And">
                      <ConditionSingle Enabled="true" ExpressionL="${f:contain(&quot; &quot;):${_me.name}}" ExpressionTypeL="String" ExpressionR="1" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="5" UseTTSTextExpression="尚未设置职能，请查看聊天栏默语提示。" ActionType="UseTTS" Asynchronous="False">
                    <Condition Enabled="true" Grouping="And">
                      <ConditionSingle Enabled="true" ExpressionL="${v:tmp_success}" ExpressionTypeL="String" ExpressionR="0" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                      <ConditionSingle Enabled="true" ExpressionL="${failTTS}" ExpressionTypeL="String" ExpressionR="1" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="6" NamedCallbackName="command" NamedCallbackParam="/e ${failSound}&#13;&#10;${v:tmp_hint}" ActionType="NamedCallback" Asynchronous="False">
                    <Condition Enabled="true" Grouping="And">
                      <ConditionSingle Enabled="true" ExpressionL="${failEcho}" ExpressionTypeL="String" ExpressionR="1" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                      <ConditionSingle Enabled="true" ExpressionL="${v:tmp_success}" ExpressionTypeL="String" ExpressionR="0" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="7" NamedCallbackName="warn" NamedCallbackParam="${failHintTime}&#13;&#10;${v:tmp_hint}" ActionType="NamedCallback" Asynchronous="False">
                    <Condition Enabled="true" Grouping="And">
                      <ConditionSingle Enabled="true" ExpressionL="0${failHintTime}" ExpressionTypeL="String" ExpressionR="0" ExpressionTypeR="String" ConditionType="NumericGreater"/>
                      <ConditionSingle Enabled="true" ExpressionL="${v:tmp_success}" ExpressionTypeL="String" ExpressionR="0" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="8" ActionType="Placeholder" Asynchronous="False" Description="success" DescriptionOverride="True"/>
                  <Action OrderNumber="9" VariableOp="SetString" VariableName="tmp_hint" VariableExpression="已设置自身职能：${?l: MT, ST, H1, H2, D1, D2, D3, D4 [0${v:myIdx}]}&#13;&#10;如有误，可输入文本指令设置，大小写不限。&#13;&#10;如：　/e mt　　/e h1　　/e d4" ActionType="Variable" Asynchronous="False">
                    <Condition Enabled="true" Grouping="And">
                      <ConditionSingle Enabled="true" ExpressionL="${f:contain(&quot; &quot;):${_me.name}}" ExpressionTypeL="String" ExpressionR="0" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="10" VariableOp="SetString" VariableName="tmp_hint" VariableExpression="已設置自身職能：${?l: MT, ST, H1, H2, D1, D2, D3, D4 [0${v:myIdx}]}&#13;&#10;如有誤，可輸入文本指令設置，大小写不限。&#13;&#10;如：　/e mt　　/e h1　　/e d4" ActionType="Variable" Asynchronous="False">
                    <Condition Enabled="true" Grouping="And">
                      <ConditionSingle Enabled="true" ExpressionL="${f:contain(&quot; &quot;):${_me.name}}" ExpressionTypeL="String" ExpressionR="1" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="11" UseTTSTextExpression="已设置职能：${?l: MT, ST, H1, H2, D1, D2, D3, D4 [${v:myIdx}]}" ActionType="UseTTS" Asynchronous="False">
                    <Condition Enabled="true" Grouping="And">
                      <ConditionSingle Enabled="true" ExpressionL="${v:tmp_success}" ExpressionTypeL="String" ExpressionR="1" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                      <ConditionSingle Enabled="true" ExpressionL="${successTTS}" ExpressionTypeL="String" ExpressionR="1" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="12" NamedCallbackName="command" NamedCallbackParam="/e ${successSound}&#13;&#10;${v:tmp_hint}" ActionType="NamedCallback" Asynchronous="False">
                    <Condition Enabled="true" Grouping="And">
                      <ConditionSingle Enabled="true" ExpressionL="${successEcho}" ExpressionTypeL="String" ExpressionR="1" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                      <ConditionSingle Enabled="true" ExpressionL="${v:tmp_success}" ExpressionTypeL="String" ExpressionR="1" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="13" NamedCallbackName="hint" NamedCallbackParam="${successHintTime}&#13;&#10;${v:tmp_hint}" ActionType="NamedCallback" Asynchronous="False">
                    <Condition Enabled="true" Grouping="And">
                      <ConditionSingle Enabled="true" ExpressionL="0${successHintTime}" ExpressionTypeL="String" ExpressionR="0" ExpressionTypeR="String" ConditionType="NumericGreater"/>
                      <ConditionSingle Enabled="true" ExpressionL="${v:tmp_success}" ExpressionTypeL="String" ExpressionR="1" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="14" VariableName="tmp_hint" ActionType="Variable" Asynchronous="False"/>
                  <Action OrderNumber="15" VariableName="tmp_success" ActionType="Variable" Asynchronous="False"/>
                </Actions>
              </Trigger>
              <Trigger Enabled="true" Name="接收：倒计时" Id="fddad58a-d2d6-4c63-9f4e-60102a211fc7" RegularExpression="^.{15}\S+ 10C:">
                <Actions>
                  <Action OrderNumber="1" ActionType="Placeholder" Asynchronous="False" Description="条件：已注册 zoneId =&gt; Self" DescriptionOverride="True"/>
                  <Action OrderNumber="2" LogMessageText="PartyList:MyIdxCheck:0:1:0:1:0:10::&lt;se.11&gt;" LogProcess="True" ActionType="LogMessage"/>
                </Actions>
                <Condition Enabled="true" Grouping="Or">
                  <ConditionSingle Enabled="true" ExpressionL="${d:PartyListPlayerDescs[${_ffxivzoneid}]}" ExpressionTypeL="String" ExpressionR="Self" ExpressionTypeR="String" ConditionType="StringEqualNocase"/>
                </Condition>
              </Trigger>
              <Trigger Enabled="true" Sequential="True" Name="接收：文本指令　　/e MT 　  （全队模式下提示错误）" Id="4f98c15a-ebf4-4b0d-bbea-1b7e80f7bd86" RegularExpression="^.{15}\S+ 00:0038:: *([MmSs][Tt]|[TtHhDd][1-4]) *$">
                <Actions>
                  <Action OrderNumber="1" ActionType="Placeholder" Description="条件：当前地图注册为全队模式" DescriptionOverride="True"/>
                  <Action OrderNumber="2" VariableOp="SetString" VariableName="tmp_hint" VariableExpression="当前地图需要设置全队顺序，而非自身职能顺序。&#13;&#10;请使用 /e party（应该会自动弹出窗口）。" ActionType="Variable">
                    <Condition Enabled="true" Grouping="And">
                      <ConditionSingle Enabled="true" ExpressionL="${f:contain(&quot; &quot;):${_me.name}}" ExpressionTypeL="String" ExpressionR="0" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="3" VariableOp="SetString" VariableName="tmp_hint" VariableExpression="当前地圖需要設置全隊順序，而非自身職能順序。&#13;&#10;請使用 /e party（應該会自動彈出窗口）。" ActionType="Variable">
                    <Condition Enabled="true" Grouping="And">
                      <ConditionSingle Enabled="true" ExpressionL="${f:contain(&quot; &quot;):${_me.name}}" ExpressionTypeL="String" ExpressionR="1" ExpressionTypeR="String" ConditionType="StringEqualCase"/>
                    </Condition>
                  </Action>
                  <Action OrderNumber="4" NamedCallbackName="command" NamedCallbackParam="/e &lt;se.11&gt;&#13;&#10;${v:tmp_hint}" ActionType="NamedCallback"/>
                  <Action OrderNumber="5" NamedCallbackName="warn" NamedCallbackParam="10&#13;&#10;${v:tmp_hint}" ActionType="NamedCallback"/>
                </Actions>
                <Condition Enabled="true" Grouping="And">
                  <ConditionSingle Enabled="true" ExpressionL="${d:PartyListPlayerDescs[${_ffxivzoneid}]}" ExpressionTypeL="String" ExpressionR="Self" ExpressionTypeR="String" ConditionType="StringNotEqualNocase"/>
                  <ConditionSingle Enabled="true" ExpressionL="${d:PartyListPlayerDescs[${_ffxivzoneid}]}" ExpressionTypeL="String" ExpressionR="" ExpressionTypeR="String" ConditionType="StringNotEqualNocase"/>
                </Condition>
              </Trigger>
            </Triggers>
          </Folder>
          <Folder FFXIVZoneFilterEnabled="True" FfxivZoneFilterRegularExpression="^997$" Id="95f7fe0c-7b4e-4b41-b1b2-edb2e12c1fea" Name="测试（真小鸟）" Enabled="false">
            <Folders/>
            <Triggers>
              <Trigger Enabled="true" Name="进本" Id="c8bfa72e-be59-4091-a662-bd75e5f7daad" RegularExpression="^.{15}\S+ 01:(?&lt;zoneId&gt;[^:]*):">
                <Actions>
                  <Action OrderNumber="1" LogMessageText="PartyList:Register:${n: 0x${zoneId} }:MT, ST, H1, H2, D1, D2, D3, D4" LogProcess="True" ActionType="LogMessage"/>
                  <Action OrderNumber="2" LogMessageText="PartyList:Register:${n: 0x${zoneId} }:Self" LogProcess="True" Enabled="False" ActionType="LogMessage"/>
                </Actions>
              </Trigger>
            </Triggers>
          </Folder>
        </Folders>
        <Triggers>
          <Trigger Enabled="false" Name="使用说明（面向开发）" Id="0536f384-462e-47d5-bb63-7445dcaed29d" RegularExpression="">
            <Actions>
              <Action OrderNumber="1" ActionType="Placeholder" Asynchronous="False" Description="首先通过触发器注册某副本的地图 ID" DescriptionOverride="True"/>
              <Action OrderNumber="2" ActionType="Placeholder" Asynchronous="False" Description="注册后可在进本、团灭、倒计时时自动触发提示" DescriptionOverride="True"/>
              <Action OrderNumber="3" ActionType="Placeholder" Asynchronous="False" Description="根据不同模式，用户可按提示设置自身或全队的职能顺序" DescriptionOverride="True"/>
              <Action OrderNumber="4" ActionType="Placeholder" Asynchronous="False" Description="支持两种模式：" DescriptionOverride="True"/>
              <Action OrderNumber="5" ActionType="Placeholder" Asynchronous="False" Description="1. 完整版" DescriptionOverride="True"/>
              <Action OrderNumber="6" ActionType="Placeholder" Asynchronous="False" Description="    将 PartyList:Register:[要注册的地图 ID]:[逗号分隔的自定义的全员描述] 发送为待解析的 ACT 日志行，即可注册。" DescriptionOverride="True"/>
              <Action OrderNumber="7" ActionType="Placeholder" Asynchronous="False" Description="    如你可以使用 M4s 副本的 01 行（ZoneChanged）触发，并发送：PartyList:Register:1132:MT, ST, H1, H2, D1, D2, D3, D4" DescriptionOverride="True"/>
              <Action OrderNumber="8" ActionType="Placeholder" Asynchronous="False" Description="    用户也可以使用 /e party 手动调用此 UI" DescriptionOverride="True"/>
              <Action OrderNumber="9" ActionType="Placeholder" Asynchronous="False" Description="  可使用的变量：" DescriptionOverride="True"/>
              <Action OrderNumber="10" ActionType="Placeholder" Asynchronous="False" Description="  · 列表 party：包含按顺序的八个 ID" DescriptionOverride="True"/>
              <Action OrderNumber="11" ActionType="Placeholder" Asynchronous="False" Description="  · 列表 pname：包含按顺序的八个名字（不建议在能使用 ID 的情况下使用）" DescriptionOverride="True"/>
              <Action OrderNumber="12" ActionType="Placeholder" Asynchronous="False" Description="  · 标量 myIdx：自身顺序，相当于 ${list:party.indexof(${_me.id})}" DescriptionOverride="True"/>
              <Action OrderNumber="13" ActionType="Placeholder" Asynchronous="False" Description="2. 单人版" DescriptionOverride="True"/>
              <Action OrderNumber="14" ActionType="Placeholder" Asynchronous="False" Description="    将 PartyList:Register:[要注册的地图 ID]:Self 发送为待解析的 ACT 日志行，即可注册。" DescriptionOverride="True"/>
              <Action OrderNumber="15" ActionType="Placeholder" Asynchronous="False" Description="    如你可以使用 M4s 副本的 01 行（ZoneChanged）触发，并发送：PartyList:Register:1132:Self" DescriptionOverride="True"/>
              <Action OrderNumber="16" ActionType="Placeholder" Asynchronous="False" Description="    用户需要使用 /e MT 等文本指令设置自身职能顺序" DescriptionOverride="True"/>
              <Action OrderNumber="17" ActionType="Placeholder" Asynchronous="False" Description="  可使用的变量：" DescriptionOverride="True"/>
              <Action OrderNumber="18" ActionType="Placeholder" Asynchronous="False" Description="   · 标量 myIdx：自身顺序" DescriptionOverride="True"/>
            </Actions>
          </Trigger>
        </Triggers>
      </Folder>
      <Folder Id="2dfd46f6-eadc-42ef-a9af-fde0db5afbd9" Name="日志转录" Enabled="true">
        <Folders/>
        <Triggers>
          <Trigger Enabled="true" Sequential="True" Name="10F =&gt; F10F ActorSetPos" Id="f5406bf3-195a-4b36-9e19-eb4e23bc1fc3" RegularExpression="^(?&lt;time&gt;.{14}) \S+ 10F:(?&lt;id&gt;4.{7}):(?&lt;h&gt;[^:]+):[^:]+:[^:]+:(?&lt;x&gt;[^:]+):(?&lt;y&gt;[^:]+):(?&lt;z&gt;[^:]+)$">
            <Actions>
              <Action OrderNumber="1" DictVariableOp="GetEntityById" DictVariableName="tmp_entity" DictVariableValue="${id}" ActionType="DictVariable" Asynchronous="False"/>
              <Action OrderNumber="2" LogMessageText="${time} ActorSetPos F10F:${id}:${d:tmp_entity[name]}:${d:tmp_entity[bnpcnameid]}:${d:tmp_entity[bnpcid]}:${x}:${y}:${z}:${h}" LogProcess="True" LogProcessACT="True" ActionType="LogMessage" Asynchronous="False">
                <Condition Enabled="false" Grouping="Or">
                  <ConditionSingle Enabled="true" ExpressionL="${d:tmp_entity[bnpcid]}" ExpressionTypeL="String" ExpressionR="9020" ExpressionTypeR="String" ConditionType="StringNotEqualCase"/>
                </Condition>
              </Action>
              <Action OrderNumber="3" DictVariableName="tmp_entity" ActionType="DictVariable" Asynchronous="False"/>
            </Actions>
          </Trigger>
        </Triggers>
      </Folder>
    </Folders>
    <Triggers>
      <Trigger Enabled="false" Source="None" Name="使用说明" Id="63b74994-1430-4165-9d43-e7646b81ce22" RegularExpression="">
        <Actions>
          <Action OrderNumber="1" ActionType="Placeholder" Asynchronous="False" Description="　用户不需要、也不应改变或执行任何触发器，仅需要保持分组开启即可。" DescBgColor="f0f8ff" DescTextColor="234" DescriptionOverride="True"/>
          <Action OrderNumber="2" ActionType="Placeholder" Asynchronous="False" Description="　如果你是普通用户，无需阅读下面的内容。" DescBgColor="f0f8ff" DescTextColor="234" DescriptionOverride="True"/>
          <Action OrderNumber="3" ActionType="Placeholder" Asynchronous="False" Description="　本工具箱包含以下内容：" DescBgColor="f0f8ff" DescTextColor="234" DescriptionOverride="True"/>
          <Action OrderNumber="4" ActionType="Placeholder" Asynchronous="False" Description="高级标点工具箱（新版）" DescBgColor="acf" DescTextColor="248" DescriptionOverride="True"/>
          <Action OrderNumber="5" ActionType="Placeholder" Asynchronous="False" Description="  在切换区域（包括 ACT 与游戏之一运行时开启另一个）时向触发器程序注册回调" DescBgColor="f0f8ff" DescTextColor="234" DescriptionOverride="True"/>
          <Action OrderNumber="6" ActionType="Placeholder" Asynchronous="False" Description="  用户可以直接使用具名回调操作 “AdvWm” 触发。" DescBgColor="f0f8ff" DescTextColor="234" DescriptionOverride="True"/>
          <Action OrderNumber="7" LaunchProcessPathExpression="https://github.com/MnFeN/ACT_Tech_Guide" ActionType="LaunchProcess" Description="· 右键 - 测试动作 打开说明文档链接（GitHub）" DescBgColor="f0f8ff" DescTextColor="2a8" DescriptionOverride="True"/>
          <Action OrderNumber="8" NamedCallbackName="AdvWm" NamedCallbackParam="// 左侧箭头可以展开为多行模式&#13;&#10;// 双斜线开始的行会当做为注释行，和空行一起被忽略&#13;&#10;// 所有参数的顺序不重要，每行提供一个参数&#13;&#10;&#13;&#10;// 采用日志中的坐标系，即正东 x+，正南 y+，正上 z+&#13;&#10;// 角度从正北开始逆时针递增，如 北 西 南 东 分别为： ±π, -π/2, 0, π/2&#13;&#10;&#13;&#10;// 必须参数：action，代表标点模式&#13;&#10;// place 模式下允许你输入一组相对坐标&#13;&#10;action: place&#13;&#10;&#13;&#10;// 可选参数：scaleX scaleY scaleZ：坐标在各个方向上的缩放尺度，负数即为反向&#13;&#10;// 未提供时的默认值：均为 1&#13;&#10;scaleX: 2&#13;&#10;scaleY: -2&#13;&#10;// 如果尺度相同，可以使用 scale: 2 简化&#13;&#10;&#13;&#10;// 可选参数 θ：旋转角度，可以理解为将这个相对坐标系的正北旋转至哪个绝对方向&#13;&#10;// 未提供时的默认值：-π （将正北旋转至正北，即未旋转）&#13;&#10;θ: π/2&#13;&#10;// 也可以写作角度，如 θ: 90°&#13;&#10;&#13;&#10;// 可选参数 center：中心坐标&#13;&#10;// 下方演示的是使用触发器的实体查询功能获取并填入自身坐标&#13;&#10;// 未提供时的默认值：0, 0, 0&#13;&#10;center: ${_me.x}, ${_me.y}, ${_me.z}&#13;&#10;&#13;&#10;// 提供的坐标首先经过缩放变换，其次经过平面旋转，最后平移至中心坐标&#13;&#10;&#13;&#10;// 下方给出所有相对坐标：&#13;&#10;A: 0, -4, 0&#13;&#10;// z = 0 可以省略：&#13;&#10;B: 4, -4&#13;&#10;// 也可以使用极坐标模式：polar [r], [θ]：&#13;&#10;C: polar 4, 90°&#13;&#10;// 也可以结合两种模式，以平面直角坐标系下的坐标为中心进一步添加一个极坐标系的偏移：&#13;&#10;D: 0, 4 polar 2, 30°&#13;&#10;// 清除一个标点：&#13;&#10;1: clear&#13;&#10;// “清除”一个标点，实为移动到看不见的位置，使之下次出现时没有淡入动画：&#13;&#10;2: fakeclear&#13;&#10;// 没有提供的标点会被忽略，保持标点的原状态&#13;&#10;// 3:... 4:...&#13;&#10;&#13;&#10;// 三条 hyphen 连字符为分隔线，代表另起一条指令，所有指令依次执行&#13;&#10;---&#13;&#10;&#13;&#10;// circle 模式下通过给定的圆心和半径将所有点标记在圆周的等分位置&#13;&#10;action: circle&#13;&#10;&#13;&#10;// 必须参数：waymarks，从正北开始所有的标点&#13;&#10;// 可以使用 _ 表示这个位置依旧需要等分，但是并不放置一个标点，如下面代表八等分圆但正南不标点&#13;&#10;waymarks: ABCD_234&#13;&#10;&#13;&#10;// 必须参数：r，半径&#13;&#10;r: 5&#13;&#10;&#13;&#10;// 必须参数：center 圆心坐标&#13;&#10;center: ${_me.x}, ${_me.y}, ${_me.z}&#13;&#10;&#13;&#10;// 可选参数：θ，与 place 中类似&#13;&#10;θ: -π&#13;&#10;&#13;&#10;// linear（连接两个点）和 arc（朝某个方向标记圆弧）指令还没写介绍，有兴趣可以看代码&#13;&#10;" ActionType="NamedCallback" Description="· 也可双击这行查看一小段简短说明" DescBgColor="f0f8ff" DescTextColor="2a8" DescriptionOverride="True"/>
          <Action OrderNumber="9" ActionType="Placeholder" Asynchronous="False" Description="  此外，你可以使用指令：/e pl/place A/B/C/D/1/2/3/4 [x] [y] [z] 放置标点。" DescBgColor="f0f8ff" DescTextColor="234" DescriptionOverride="True"/>
          <Action OrderNumber="10" ActionType="Placeholder" Asynchronous="False" Description="  坐标参数均为可选，不提供时用自身坐标，如 /e pl A 将 A 点放在自己脚下。" DescBgColor="f0f8ff" DescTextColor="234" DescriptionOverride="True"/>
          <Action OrderNumber="11" ActionType="Placeholder" Asynchronous="False" Description="高级标点工具箱（旧版）" DescBgColor="acf" DescTextColor="248" DescriptionOverride="True"/>
          <Action OrderNumber="12" ActionType="Placeholder" Asynchronous="False" Description="　旧版本，使用固定格式的日志触发标点，已弃用，但触发器依然保留以兼容旧版科技。" DescBgColor="f0f8ff" DescTextColor="234" DescriptionOverride="True"/>
          <Action OrderNumber="13" ActionType="Placeholder" Asynchronous="False" Description="鲶鱼精邮差扩展" DescBgColor="acf" DescTextColor="248" DescriptionOverride="True"/>
          <Action OrderNumber="14" ActionType="Placeholder" Asynchronous="False" Description="　详见【鲶鱼精邮差扩展】文件夹。" DescBgColor="f0f8ff" DescTextColor="234" DescriptionOverride="True"/>
          <Action OrderNumber="15" ActionType="Placeholder" Asynchronous="False" Description="　CafeACT 无法使用。建议更换呆萌。" DescBgColor="f0f8ff" DescTextColor="234" DescriptionOverride="True"/>
          <Action OrderNumber="16" ActionType="Placeholder" Asynchronous="False" Description="关于" DescBgColor="acf" DescTextColor="248" DescriptionOverride="True"/>
          <Action OrderNumber="17" ActionType="Placeholder" Asynchronous="False" Description="　作者：MnFeN 阿洛" DescBgColor="f0f8ff" DescTextColor="234" DescriptionOverride="True"/>
          <Action OrderNumber="18" ActionType="Placeholder" Asynchronous="False" Description="　致谢：AtmoOmen　　Fragile　　Latihias　　Natsukage　　Small-Miao" DescBgColor="f0f8ff" DescTextColor="234" DescriptionOverride="True"/>
        </Actions>
      </Trigger>
    </Triggers>
  </ExportedFolder>
</TriggernometryExport>
